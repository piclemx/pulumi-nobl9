# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 project: pulumi.Input[str],
                 ingest_url: Optional[pulumi.Input[str]] = None,
                 okta_auth_server: Optional[pulumi.Input[str]] = None,
                 okta_org_url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] client_id: the [Client ID](https://docs.nobl9.com/sloctl-user-guide/#configuration) of your Nobl9 account required to connect to
               Nobl9.
        :param pulumi.Input[str] client_secret: the [Client Secret](https://docs.nobl9.com/sloctl-user-guide/#configuration) of your Nobl9 account required to connect
               to Nobl9.
        :param pulumi.Input[str] organization: Nobl9 [Organization ID](https://docs.nobl9.com/API_Documentation/api-endpoints-for-slo-annotations/#common-headers) that
               contains resources managed by the Nobl9 Terraform provider.
        :param pulumi.Input[str] project: Nobl9 project used when importing resources.
        :param pulumi.Input[str] ingest_url: Nobl9 API URL.
        :param pulumi.Input[str] okta_auth_server: Authorization service configuration.
        :param pulumi.Input[str] okta_org_url: Authorization service URL.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "project", project)
        if ingest_url is not None:
            pulumi.set(__self__, "ingest_url", ingest_url)
        if okta_auth_server is not None:
            pulumi.set(__self__, "okta_auth_server", okta_auth_server)
        if okta_org_url is not None:
            pulumi.set(__self__, "okta_org_url", okta_org_url)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        the [Client ID](https://docs.nobl9.com/sloctl-user-guide/#configuration) of your Nobl9 account required to connect to
        Nobl9.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        the [Client Secret](https://docs.nobl9.com/sloctl-user-guide/#configuration) of your Nobl9 account required to connect
        to Nobl9.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        Nobl9 [Organization ID](https://docs.nobl9.com/API_Documentation/api-endpoints-for-slo-annotations/#common-headers) that
        contains resources managed by the Nobl9 Terraform provider.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        Nobl9 project used when importing resources.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="ingestUrl")
    def ingest_url(self) -> Optional[pulumi.Input[str]]:
        """
        Nobl9 API URL.
        """
        return pulumi.get(self, "ingest_url")

    @ingest_url.setter
    def ingest_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingest_url", value)

    @property
    @pulumi.getter(name="oktaAuthServer")
    def okta_auth_server(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization service configuration.
        """
        return pulumi.get(self, "okta_auth_server")

    @okta_auth_server.setter
    def okta_auth_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "okta_auth_server", value)

    @property
    @pulumi.getter(name="oktaOrgUrl")
    def okta_org_url(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization service URL.
        """
        return pulumi.get(self, "okta_org_url")

    @okta_org_url.setter
    def okta_org_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "okta_org_url", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 ingest_url: Optional[pulumi.Input[str]] = None,
                 okta_auth_server: Optional[pulumi.Input[str]] = None,
                 okta_org_url: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the nobl9 package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_id: the [Client ID](https://docs.nobl9.com/sloctl-user-guide/#configuration) of your Nobl9 account required to connect to
               Nobl9.
        :param pulumi.Input[str] client_secret: the [Client Secret](https://docs.nobl9.com/sloctl-user-guide/#configuration) of your Nobl9 account required to connect
               to Nobl9.
        :param pulumi.Input[str] ingest_url: Nobl9 API URL.
        :param pulumi.Input[str] okta_auth_server: Authorization service configuration.
        :param pulumi.Input[str] okta_org_url: Authorization service URL.
        :param pulumi.Input[str] organization: Nobl9 [Organization ID](https://docs.nobl9.com/API_Documentation/api-endpoints-for-slo-annotations/#common-headers) that
               contains resources managed by the Nobl9 Terraform provider.
        :param pulumi.Input[str] project: Nobl9 project used when importing resources.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the nobl9 package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 ingest_url: Optional[pulumi.Input[str]] = None,
                 okta_auth_server: Optional[pulumi.Input[str]] = None,
                 okta_org_url: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if client_id is None and not opts.urn:
                raise TypeError("Missing required property 'client_id'")
            __props__.__dict__["client_id"] = client_id
            if client_secret is None and not opts.urn:
                raise TypeError("Missing required property 'client_secret'")
            __props__.__dict__["client_secret"] = client_secret
            __props__.__dict__["ingest_url"] = ingest_url
            __props__.__dict__["okta_auth_server"] = okta_auth_server
            __props__.__dict__["okta_org_url"] = okta_org_url
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
        super(Provider, __self__).__init__(
            'nobl9',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        """
        the [Client ID](https://docs.nobl9.com/sloctl-user-guide/#configuration) of your Nobl9 account required to connect to
        Nobl9.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[str]:
        """
        the [Client Secret](https://docs.nobl9.com/sloctl-user-guide/#configuration) of your Nobl9 account required to connect
        to Nobl9.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="ingestUrl")
    def ingest_url(self) -> pulumi.Output[Optional[str]]:
        """
        Nobl9 API URL.
        """
        return pulumi.get(self, "ingest_url")

    @property
    @pulumi.getter(name="oktaAuthServer")
    def okta_auth_server(self) -> pulumi.Output[Optional[str]]:
        """
        Authorization service configuration.
        """
        return pulumi.get(self, "okta_auth_server")

    @property
    @pulumi.getter(name="oktaOrgUrl")
    def okta_org_url(self) -> pulumi.Output[Optional[str]]:
        """
        Authorization service URL.
        """
        return pulumi.get(self, "okta_org_url")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        Nobl9 [Organization ID](https://docs.nobl9.com/API_Documentation/api-endpoints-for-slo-annotations/#common-headers) that
        contains resources managed by the Nobl9 Terraform provider.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        Nobl9 project used when importing resources.
        """
        return pulumi.get(self, "project")

