# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AgentArgs', 'Agent']

@pulumi.input_type
class AgentArgs:
    def __init__(__self__, *,
                 agent_type: pulumi.Input[str],
                 project: pulumi.Input[str],
                 source_ofs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 amazon_prometheus_config: Optional[pulumi.Input['AgentAmazonPrometheusConfigArgs']] = None,
                 appdynamics_config: Optional[pulumi.Input['AgentAppdynamicsConfigArgs']] = None,
                 bigquery_config: Optional[pulumi.Input['AgentBigqueryConfigArgs']] = None,
                 cloudwatch_config: Optional[pulumi.Input['AgentCloudwatchConfigArgs']] = None,
                 datadog_config: Optional[pulumi.Input['AgentDatadogConfigArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dynatrace_config: Optional[pulumi.Input['AgentDynatraceConfigArgs']] = None,
                 elasticsearch_config: Optional[pulumi.Input['AgentElasticsearchConfigArgs']] = None,
                 gcm_config: Optional[pulumi.Input['AgentGcmConfigArgs']] = None,
                 grafana_loki_config: Optional[pulumi.Input['AgentGrafanaLokiConfigArgs']] = None,
                 graphite_config: Optional[pulumi.Input['AgentGraphiteConfigArgs']] = None,
                 influxdb_config: Optional[pulumi.Input['AgentInfluxdbConfigArgs']] = None,
                 instana_config: Optional[pulumi.Input['AgentInstanaConfigArgs']] = None,
                 lightstep_config: Optional[pulumi.Input['AgentLightstepConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 newrelic_config: Optional[pulumi.Input['AgentNewrelicConfigArgs']] = None,
                 opentsdb_config: Optional[pulumi.Input['AgentOpentsdbConfigArgs']] = None,
                 pingdom_config: Optional[pulumi.Input['AgentPingdomConfigArgs']] = None,
                 prometheus_config: Optional[pulumi.Input['AgentPrometheusConfigArgs']] = None,
                 query_delay: Optional[pulumi.Input['AgentQueryDelayArgs']] = None,
                 redshift_config: Optional[pulumi.Input['AgentRedshiftConfigArgs']] = None,
                 splunk_config: Optional[pulumi.Input['AgentSplunkConfigArgs']] = None,
                 splunk_observability_config: Optional[pulumi.Input['AgentSplunkObservabilityConfigArgs']] = None,
                 sumologic_config: Optional[pulumi.Input['AgentSumologicConfigArgs']] = None,
                 thousandeyes_config: Optional[pulumi.Input['AgentThousandeyesConfigArgs']] = None):
        """
        The set of arguments for constructing a Agent resource.
        :param pulumi.Input[str] agent_type: The type of the Agent. Check [Supported Agent types | Nobl9 Documentation](https://docs.nobl9.com/Sources/)
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: Source of Metrics and/or Services.
        :param pulumi.Input['AgentAmazonPrometheusConfigArgs'] amazon_prometheus_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#ams-prometheus-agent)
        :param pulumi.Input['AgentAppdynamicsConfigArgs'] appdynamics_config: [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#appdynamics-agent)
        :param pulumi.Input['AgentBigqueryConfigArgs'] bigquery_config: [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#bigquery-agent)
        :param pulumi.Input['AgentCloudwatchConfigArgs'] cloudwatch_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#cloudwatch-agent)
        :param pulumi.Input['AgentDatadogConfigArgs'] datadog_config: [Configuration documentation](https://docs.nobl9.com/Sources/datadog#datadog-agent)
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input['AgentDynatraceConfigArgs'] dynatrace_config: [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#dynatrace-agent)
        :param pulumi.Input['AgentElasticsearchConfigArgs'] elasticsearch_config: [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#elasticsearch-agent)
        :param pulumi.Input['AgentGcmConfigArgs'] gcm_config: [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#google-cloud-monitoring-agent)
        :param pulumi.Input['AgentGrafanaLokiConfigArgs'] grafana_loki_config: [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#grafana-loki-agent)
        :param pulumi.Input['AgentGraphiteConfigArgs'] graphite_config: [Configuration documentation](https://docs.nobl9.com/Sources/graphite#graphite-agent)
        :param pulumi.Input['AgentInfluxdbConfigArgs'] influxdb_config: [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#influxdb-agent)
        :param pulumi.Input['AgentInstanaConfigArgs'] instana_config: [Configuration documentation](https://docs.nobl9.com/Sources/instana#instana-agent)
        :param pulumi.Input['AgentLightstepConfigArgs'] lightstep_config: [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#lightstep-agent)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input['AgentNewrelicConfigArgs'] newrelic_config: [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#new-relic-agent)
        :param pulumi.Input['AgentOpentsdbConfigArgs'] opentsdb_config: [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#opentsdb-agent)
        :param pulumi.Input['AgentPingdomConfigArgs'] pingdom_config: [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#pingdom-agent)
        :param pulumi.Input['AgentPrometheusConfigArgs'] prometheus_config: [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#prometheus-agent)
        :param pulumi.Input['AgentQueryDelayArgs'] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input['AgentRedshiftConfigArgs'] redshift_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/?_highlight=redshift#amazon-redshift-agent)
        :param pulumi.Input['AgentSplunkConfigArgs'] splunk_config: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#splunk-agent)
        :param pulumi.Input['AgentSplunkObservabilityConfigArgs'] splunk_observability_config: [Configuration documentation](https://docs.nobl9.com/Sources/splunk-observability/#splunk-observability-agent)
        :param pulumi.Input['AgentSumologicConfigArgs'] sumologic_config: [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#sumo-logic-agent)
        :param pulumi.Input['AgentThousandeyesConfigArgs'] thousandeyes_config: [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#thousandeyes-agent)
        """
        pulumi.set(__self__, "agent_type", agent_type)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "source_ofs", source_ofs)
        if amazon_prometheus_config is not None:
            pulumi.set(__self__, "amazon_prometheus_config", amazon_prometheus_config)
        if appdynamics_config is not None:
            pulumi.set(__self__, "appdynamics_config", appdynamics_config)
        if bigquery_config is not None:
            pulumi.set(__self__, "bigquery_config", bigquery_config)
        if cloudwatch_config is not None:
            pulumi.set(__self__, "cloudwatch_config", cloudwatch_config)
        if datadog_config is not None:
            pulumi.set(__self__, "datadog_config", datadog_config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dynatrace_config is not None:
            pulumi.set(__self__, "dynatrace_config", dynatrace_config)
        if elasticsearch_config is not None:
            pulumi.set(__self__, "elasticsearch_config", elasticsearch_config)
        if gcm_config is not None:
            pulumi.set(__self__, "gcm_config", gcm_config)
        if grafana_loki_config is not None:
            pulumi.set(__self__, "grafana_loki_config", grafana_loki_config)
        if graphite_config is not None:
            pulumi.set(__self__, "graphite_config", graphite_config)
        if influxdb_config is not None:
            pulumi.set(__self__, "influxdb_config", influxdb_config)
        if instana_config is not None:
            pulumi.set(__self__, "instana_config", instana_config)
        if lightstep_config is not None:
            pulumi.set(__self__, "lightstep_config", lightstep_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if newrelic_config is not None:
            pulumi.set(__self__, "newrelic_config", newrelic_config)
        if opentsdb_config is not None:
            pulumi.set(__self__, "opentsdb_config", opentsdb_config)
        if pingdom_config is not None:
            pulumi.set(__self__, "pingdom_config", pingdom_config)
        if prometheus_config is not None:
            pulumi.set(__self__, "prometheus_config", prometheus_config)
        if query_delay is not None:
            pulumi.set(__self__, "query_delay", query_delay)
        if redshift_config is not None:
            pulumi.set(__self__, "redshift_config", redshift_config)
        if splunk_config is not None:
            pulumi.set(__self__, "splunk_config", splunk_config)
        if splunk_observability_config is not None:
            pulumi.set(__self__, "splunk_observability_config", splunk_observability_config)
        if sumologic_config is not None:
            pulumi.set(__self__, "sumologic_config", sumologic_config)
        if thousandeyes_config is not None:
            pulumi.set(__self__, "thousandeyes_config", thousandeyes_config)

    @property
    @pulumi.getter(name="agentType")
    def agent_type(self) -> pulumi.Input[str]:
        """
        The type of the Agent. Check [Supported Agent types | Nobl9 Documentation](https://docs.nobl9.com/Sources/)
        """
        return pulumi.get(self, "agent_type")

    @agent_type.setter
    def agent_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent_type", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Source of Metrics and/or Services.
        """
        return pulumi.get(self, "source_ofs")

    @source_ofs.setter
    def source_ofs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "source_ofs", value)

    @property
    @pulumi.getter(name="amazonPrometheusConfig")
    def amazon_prometheus_config(self) -> Optional[pulumi.Input['AgentAmazonPrometheusConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#ams-prometheus-agent)
        """
        return pulumi.get(self, "amazon_prometheus_config")

    @amazon_prometheus_config.setter
    def amazon_prometheus_config(self, value: Optional[pulumi.Input['AgentAmazonPrometheusConfigArgs']]):
        pulumi.set(self, "amazon_prometheus_config", value)

    @property
    @pulumi.getter(name="appdynamicsConfig")
    def appdynamics_config(self) -> Optional[pulumi.Input['AgentAppdynamicsConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#appdynamics-agent)
        """
        return pulumi.get(self, "appdynamics_config")

    @appdynamics_config.setter
    def appdynamics_config(self, value: Optional[pulumi.Input['AgentAppdynamicsConfigArgs']]):
        pulumi.set(self, "appdynamics_config", value)

    @property
    @pulumi.getter(name="bigqueryConfig")
    def bigquery_config(self) -> Optional[pulumi.Input['AgentBigqueryConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#bigquery-agent)
        """
        return pulumi.get(self, "bigquery_config")

    @bigquery_config.setter
    def bigquery_config(self, value: Optional[pulumi.Input['AgentBigqueryConfigArgs']]):
        pulumi.set(self, "bigquery_config", value)

    @property
    @pulumi.getter(name="cloudwatchConfig")
    def cloudwatch_config(self) -> Optional[pulumi.Input['AgentCloudwatchConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#cloudwatch-agent)
        """
        return pulumi.get(self, "cloudwatch_config")

    @cloudwatch_config.setter
    def cloudwatch_config(self, value: Optional[pulumi.Input['AgentCloudwatchConfigArgs']]):
        pulumi.set(self, "cloudwatch_config", value)

    @property
    @pulumi.getter(name="datadogConfig")
    def datadog_config(self) -> Optional[pulumi.Input['AgentDatadogConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/datadog#datadog-agent)
        """
        return pulumi.get(self, "datadog_config")

    @datadog_config.setter
    def datadog_config(self, value: Optional[pulumi.Input['AgentDatadogConfigArgs']]):
        pulumi.set(self, "datadog_config", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="dynatraceConfig")
    def dynatrace_config(self) -> Optional[pulumi.Input['AgentDynatraceConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#dynatrace-agent)
        """
        return pulumi.get(self, "dynatrace_config")

    @dynatrace_config.setter
    def dynatrace_config(self, value: Optional[pulumi.Input['AgentDynatraceConfigArgs']]):
        pulumi.set(self, "dynatrace_config", value)

    @property
    @pulumi.getter(name="elasticsearchConfig")
    def elasticsearch_config(self) -> Optional[pulumi.Input['AgentElasticsearchConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#elasticsearch-agent)
        """
        return pulumi.get(self, "elasticsearch_config")

    @elasticsearch_config.setter
    def elasticsearch_config(self, value: Optional[pulumi.Input['AgentElasticsearchConfigArgs']]):
        pulumi.set(self, "elasticsearch_config", value)

    @property
    @pulumi.getter(name="gcmConfig")
    def gcm_config(self) -> Optional[pulumi.Input['AgentGcmConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#google-cloud-monitoring-agent)
        """
        return pulumi.get(self, "gcm_config")

    @gcm_config.setter
    def gcm_config(self, value: Optional[pulumi.Input['AgentGcmConfigArgs']]):
        pulumi.set(self, "gcm_config", value)

    @property
    @pulumi.getter(name="grafanaLokiConfig")
    def grafana_loki_config(self) -> Optional[pulumi.Input['AgentGrafanaLokiConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#grafana-loki-agent)
        """
        return pulumi.get(self, "grafana_loki_config")

    @grafana_loki_config.setter
    def grafana_loki_config(self, value: Optional[pulumi.Input['AgentGrafanaLokiConfigArgs']]):
        pulumi.set(self, "grafana_loki_config", value)

    @property
    @pulumi.getter(name="graphiteConfig")
    def graphite_config(self) -> Optional[pulumi.Input['AgentGraphiteConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/graphite#graphite-agent)
        """
        return pulumi.get(self, "graphite_config")

    @graphite_config.setter
    def graphite_config(self, value: Optional[pulumi.Input['AgentGraphiteConfigArgs']]):
        pulumi.set(self, "graphite_config", value)

    @property
    @pulumi.getter(name="influxdbConfig")
    def influxdb_config(self) -> Optional[pulumi.Input['AgentInfluxdbConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#influxdb-agent)
        """
        return pulumi.get(self, "influxdb_config")

    @influxdb_config.setter
    def influxdb_config(self, value: Optional[pulumi.Input['AgentInfluxdbConfigArgs']]):
        pulumi.set(self, "influxdb_config", value)

    @property
    @pulumi.getter(name="instanaConfig")
    def instana_config(self) -> Optional[pulumi.Input['AgentInstanaConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/instana#instana-agent)
        """
        return pulumi.get(self, "instana_config")

    @instana_config.setter
    def instana_config(self, value: Optional[pulumi.Input['AgentInstanaConfigArgs']]):
        pulumi.set(self, "instana_config", value)

    @property
    @pulumi.getter(name="lightstepConfig")
    def lightstep_config(self) -> Optional[pulumi.Input['AgentLightstepConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#lightstep-agent)
        """
        return pulumi.get(self, "lightstep_config")

    @lightstep_config.setter
    def lightstep_config(self, value: Optional[pulumi.Input['AgentLightstepConfigArgs']]):
        pulumi.set(self, "lightstep_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="newrelicConfig")
    def newrelic_config(self) -> Optional[pulumi.Input['AgentNewrelicConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#new-relic-agent)
        """
        return pulumi.get(self, "newrelic_config")

    @newrelic_config.setter
    def newrelic_config(self, value: Optional[pulumi.Input['AgentNewrelicConfigArgs']]):
        pulumi.set(self, "newrelic_config", value)

    @property
    @pulumi.getter(name="opentsdbConfig")
    def opentsdb_config(self) -> Optional[pulumi.Input['AgentOpentsdbConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#opentsdb-agent)
        """
        return pulumi.get(self, "opentsdb_config")

    @opentsdb_config.setter
    def opentsdb_config(self, value: Optional[pulumi.Input['AgentOpentsdbConfigArgs']]):
        pulumi.set(self, "opentsdb_config", value)

    @property
    @pulumi.getter(name="pingdomConfig")
    def pingdom_config(self) -> Optional[pulumi.Input['AgentPingdomConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#pingdom-agent)
        """
        return pulumi.get(self, "pingdom_config")

    @pingdom_config.setter
    def pingdom_config(self, value: Optional[pulumi.Input['AgentPingdomConfigArgs']]):
        pulumi.set(self, "pingdom_config", value)

    @property
    @pulumi.getter(name="prometheusConfig")
    def prometheus_config(self) -> Optional[pulumi.Input['AgentPrometheusConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#prometheus-agent)
        """
        return pulumi.get(self, "prometheus_config")

    @prometheus_config.setter
    def prometheus_config(self, value: Optional[pulumi.Input['AgentPrometheusConfigArgs']]):
        pulumi.set(self, "prometheus_config", value)

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> Optional[pulumi.Input['AgentQueryDelayArgs']]:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @query_delay.setter
    def query_delay(self, value: Optional[pulumi.Input['AgentQueryDelayArgs']]):
        pulumi.set(self, "query_delay", value)

    @property
    @pulumi.getter(name="redshiftConfig")
    def redshift_config(self) -> Optional[pulumi.Input['AgentRedshiftConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/?_highlight=redshift#amazon-redshift-agent)
        """
        return pulumi.get(self, "redshift_config")

    @redshift_config.setter
    def redshift_config(self, value: Optional[pulumi.Input['AgentRedshiftConfigArgs']]):
        pulumi.set(self, "redshift_config", value)

    @property
    @pulumi.getter(name="splunkConfig")
    def splunk_config(self) -> Optional[pulumi.Input['AgentSplunkConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk#splunk-agent)
        """
        return pulumi.get(self, "splunk_config")

    @splunk_config.setter
    def splunk_config(self, value: Optional[pulumi.Input['AgentSplunkConfigArgs']]):
        pulumi.set(self, "splunk_config", value)

    @property
    @pulumi.getter(name="splunkObservabilityConfig")
    def splunk_observability_config(self) -> Optional[pulumi.Input['AgentSplunkObservabilityConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk-observability/#splunk-observability-agent)
        """
        return pulumi.get(self, "splunk_observability_config")

    @splunk_observability_config.setter
    def splunk_observability_config(self, value: Optional[pulumi.Input['AgentSplunkObservabilityConfigArgs']]):
        pulumi.set(self, "splunk_observability_config", value)

    @property
    @pulumi.getter(name="sumologicConfig")
    def sumologic_config(self) -> Optional[pulumi.Input['AgentSumologicConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#sumo-logic-agent)
        """
        return pulumi.get(self, "sumologic_config")

    @sumologic_config.setter
    def sumologic_config(self, value: Optional[pulumi.Input['AgentSumologicConfigArgs']]):
        pulumi.set(self, "sumologic_config", value)

    @property
    @pulumi.getter(name="thousandeyesConfig")
    def thousandeyes_config(self) -> Optional[pulumi.Input['AgentThousandeyesConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#thousandeyes-agent)
        """
        return pulumi.get(self, "thousandeyes_config")

    @thousandeyes_config.setter
    def thousandeyes_config(self, value: Optional[pulumi.Input['AgentThousandeyesConfigArgs']]):
        pulumi.set(self, "thousandeyes_config", value)


@pulumi.input_type
class _AgentState:
    def __init__(__self__, *,
                 agent_type: Optional[pulumi.Input[str]] = None,
                 amazon_prometheus_config: Optional[pulumi.Input['AgentAmazonPrometheusConfigArgs']] = None,
                 appdynamics_config: Optional[pulumi.Input['AgentAppdynamicsConfigArgs']] = None,
                 bigquery_config: Optional[pulumi.Input['AgentBigqueryConfigArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 cloudwatch_config: Optional[pulumi.Input['AgentCloudwatchConfigArgs']] = None,
                 datadog_config: Optional[pulumi.Input['AgentDatadogConfigArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dynatrace_config: Optional[pulumi.Input['AgentDynatraceConfigArgs']] = None,
                 elasticsearch_config: Optional[pulumi.Input['AgentElasticsearchConfigArgs']] = None,
                 gcm_config: Optional[pulumi.Input['AgentGcmConfigArgs']] = None,
                 grafana_loki_config: Optional[pulumi.Input['AgentGrafanaLokiConfigArgs']] = None,
                 graphite_config: Optional[pulumi.Input['AgentGraphiteConfigArgs']] = None,
                 influxdb_config: Optional[pulumi.Input['AgentInfluxdbConfigArgs']] = None,
                 instana_config: Optional[pulumi.Input['AgentInstanaConfigArgs']] = None,
                 lightstep_config: Optional[pulumi.Input['AgentLightstepConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 newrelic_config: Optional[pulumi.Input['AgentNewrelicConfigArgs']] = None,
                 opentsdb_config: Optional[pulumi.Input['AgentOpentsdbConfigArgs']] = None,
                 pingdom_config: Optional[pulumi.Input['AgentPingdomConfigArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 prometheus_config: Optional[pulumi.Input['AgentPrometheusConfigArgs']] = None,
                 query_delay: Optional[pulumi.Input['AgentQueryDelayArgs']] = None,
                 redshift_config: Optional[pulumi.Input['AgentRedshiftConfigArgs']] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 splunk_config: Optional[pulumi.Input['AgentSplunkConfigArgs']] = None,
                 splunk_observability_config: Optional[pulumi.Input['AgentSplunkObservabilityConfigArgs']] = None,
                 status: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 sumologic_config: Optional[pulumi.Input['AgentSumologicConfigArgs']] = None,
                 thousandeyes_config: Optional[pulumi.Input['AgentThousandeyesConfigArgs']] = None):
        """
        Input properties used for looking up and filtering Agent resources.
        :param pulumi.Input[str] agent_type: The type of the Agent. Check [Supported Agent types | Nobl9 Documentation](https://docs.nobl9.com/Sources/)
        :param pulumi.Input['AgentAmazonPrometheusConfigArgs'] amazon_prometheus_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#ams-prometheus-agent)
        :param pulumi.Input['AgentAppdynamicsConfigArgs'] appdynamics_config: [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#appdynamics-agent)
        :param pulumi.Input['AgentBigqueryConfigArgs'] bigquery_config: [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#bigquery-agent)
        :param pulumi.Input[str] client_id: client_id of created agent.
        :param pulumi.Input[str] client_secret: client_secret of created agent.
        :param pulumi.Input['AgentCloudwatchConfigArgs'] cloudwatch_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#cloudwatch-agent)
        :param pulumi.Input['AgentDatadogConfigArgs'] datadog_config: [Configuration documentation](https://docs.nobl9.com/Sources/datadog#datadog-agent)
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input['AgentDynatraceConfigArgs'] dynatrace_config: [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#dynatrace-agent)
        :param pulumi.Input['AgentElasticsearchConfigArgs'] elasticsearch_config: [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#elasticsearch-agent)
        :param pulumi.Input['AgentGcmConfigArgs'] gcm_config: [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#google-cloud-monitoring-agent)
        :param pulumi.Input['AgentGrafanaLokiConfigArgs'] grafana_loki_config: [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#grafana-loki-agent)
        :param pulumi.Input['AgentGraphiteConfigArgs'] graphite_config: [Configuration documentation](https://docs.nobl9.com/Sources/graphite#graphite-agent)
        :param pulumi.Input['AgentInfluxdbConfigArgs'] influxdb_config: [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#influxdb-agent)
        :param pulumi.Input['AgentInstanaConfigArgs'] instana_config: [Configuration documentation](https://docs.nobl9.com/Sources/instana#instana-agent)
        :param pulumi.Input['AgentLightstepConfigArgs'] lightstep_config: [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#lightstep-agent)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input['AgentNewrelicConfigArgs'] newrelic_config: [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#new-relic-agent)
        :param pulumi.Input['AgentOpentsdbConfigArgs'] opentsdb_config: [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#opentsdb-agent)
        :param pulumi.Input['AgentPingdomConfigArgs'] pingdom_config: [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#pingdom-agent)
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input['AgentPrometheusConfigArgs'] prometheus_config: [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#prometheus-agent)
        :param pulumi.Input['AgentQueryDelayArgs'] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input['AgentRedshiftConfigArgs'] redshift_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/?_highlight=redshift#amazon-redshift-agent)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: Source of Metrics and/or Services.
        :param pulumi.Input['AgentSplunkConfigArgs'] splunk_config: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#splunk-agent)
        :param pulumi.Input['AgentSplunkObservabilityConfigArgs'] splunk_observability_config: [Configuration documentation](https://docs.nobl9.com/Sources/splunk-observability/#splunk-observability-agent)
        :param pulumi.Input[Mapping[str, Any]] status: Status of the created agent.
        :param pulumi.Input['AgentSumologicConfigArgs'] sumologic_config: [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#sumo-logic-agent)
        :param pulumi.Input['AgentThousandeyesConfigArgs'] thousandeyes_config: [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#thousandeyes-agent)
        """
        if agent_type is not None:
            pulumi.set(__self__, "agent_type", agent_type)
        if amazon_prometheus_config is not None:
            pulumi.set(__self__, "amazon_prometheus_config", amazon_prometheus_config)
        if appdynamics_config is not None:
            pulumi.set(__self__, "appdynamics_config", appdynamics_config)
        if bigquery_config is not None:
            pulumi.set(__self__, "bigquery_config", bigquery_config)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if cloudwatch_config is not None:
            pulumi.set(__self__, "cloudwatch_config", cloudwatch_config)
        if datadog_config is not None:
            pulumi.set(__self__, "datadog_config", datadog_config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dynatrace_config is not None:
            pulumi.set(__self__, "dynatrace_config", dynatrace_config)
        if elasticsearch_config is not None:
            pulumi.set(__self__, "elasticsearch_config", elasticsearch_config)
        if gcm_config is not None:
            pulumi.set(__self__, "gcm_config", gcm_config)
        if grafana_loki_config is not None:
            pulumi.set(__self__, "grafana_loki_config", grafana_loki_config)
        if graphite_config is not None:
            pulumi.set(__self__, "graphite_config", graphite_config)
        if influxdb_config is not None:
            pulumi.set(__self__, "influxdb_config", influxdb_config)
        if instana_config is not None:
            pulumi.set(__self__, "instana_config", instana_config)
        if lightstep_config is not None:
            pulumi.set(__self__, "lightstep_config", lightstep_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if newrelic_config is not None:
            pulumi.set(__self__, "newrelic_config", newrelic_config)
        if opentsdb_config is not None:
            pulumi.set(__self__, "opentsdb_config", opentsdb_config)
        if pingdom_config is not None:
            pulumi.set(__self__, "pingdom_config", pingdom_config)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if prometheus_config is not None:
            pulumi.set(__self__, "prometheus_config", prometheus_config)
        if query_delay is not None:
            pulumi.set(__self__, "query_delay", query_delay)
        if redshift_config is not None:
            pulumi.set(__self__, "redshift_config", redshift_config)
        if source_ofs is not None:
            pulumi.set(__self__, "source_ofs", source_ofs)
        if splunk_config is not None:
            pulumi.set(__self__, "splunk_config", splunk_config)
        if splunk_observability_config is not None:
            pulumi.set(__self__, "splunk_observability_config", splunk_observability_config)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sumologic_config is not None:
            pulumi.set(__self__, "sumologic_config", sumologic_config)
        if thousandeyes_config is not None:
            pulumi.set(__self__, "thousandeyes_config", thousandeyes_config)

    @property
    @pulumi.getter(name="agentType")
    def agent_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the Agent. Check [Supported Agent types | Nobl9 Documentation](https://docs.nobl9.com/Sources/)
        """
        return pulumi.get(self, "agent_type")

    @agent_type.setter
    def agent_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_type", value)

    @property
    @pulumi.getter(name="amazonPrometheusConfig")
    def amazon_prometheus_config(self) -> Optional[pulumi.Input['AgentAmazonPrometheusConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#ams-prometheus-agent)
        """
        return pulumi.get(self, "amazon_prometheus_config")

    @amazon_prometheus_config.setter
    def amazon_prometheus_config(self, value: Optional[pulumi.Input['AgentAmazonPrometheusConfigArgs']]):
        pulumi.set(self, "amazon_prometheus_config", value)

    @property
    @pulumi.getter(name="appdynamicsConfig")
    def appdynamics_config(self) -> Optional[pulumi.Input['AgentAppdynamicsConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#appdynamics-agent)
        """
        return pulumi.get(self, "appdynamics_config")

    @appdynamics_config.setter
    def appdynamics_config(self, value: Optional[pulumi.Input['AgentAppdynamicsConfigArgs']]):
        pulumi.set(self, "appdynamics_config", value)

    @property
    @pulumi.getter(name="bigqueryConfig")
    def bigquery_config(self) -> Optional[pulumi.Input['AgentBigqueryConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#bigquery-agent)
        """
        return pulumi.get(self, "bigquery_config")

    @bigquery_config.setter
    def bigquery_config(self, value: Optional[pulumi.Input['AgentBigqueryConfigArgs']]):
        pulumi.set(self, "bigquery_config", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        client_id of created agent.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        client_secret of created agent.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="cloudwatchConfig")
    def cloudwatch_config(self) -> Optional[pulumi.Input['AgentCloudwatchConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#cloudwatch-agent)
        """
        return pulumi.get(self, "cloudwatch_config")

    @cloudwatch_config.setter
    def cloudwatch_config(self, value: Optional[pulumi.Input['AgentCloudwatchConfigArgs']]):
        pulumi.set(self, "cloudwatch_config", value)

    @property
    @pulumi.getter(name="datadogConfig")
    def datadog_config(self) -> Optional[pulumi.Input['AgentDatadogConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/datadog#datadog-agent)
        """
        return pulumi.get(self, "datadog_config")

    @datadog_config.setter
    def datadog_config(self, value: Optional[pulumi.Input['AgentDatadogConfigArgs']]):
        pulumi.set(self, "datadog_config", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="dynatraceConfig")
    def dynatrace_config(self) -> Optional[pulumi.Input['AgentDynatraceConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#dynatrace-agent)
        """
        return pulumi.get(self, "dynatrace_config")

    @dynatrace_config.setter
    def dynatrace_config(self, value: Optional[pulumi.Input['AgentDynatraceConfigArgs']]):
        pulumi.set(self, "dynatrace_config", value)

    @property
    @pulumi.getter(name="elasticsearchConfig")
    def elasticsearch_config(self) -> Optional[pulumi.Input['AgentElasticsearchConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#elasticsearch-agent)
        """
        return pulumi.get(self, "elasticsearch_config")

    @elasticsearch_config.setter
    def elasticsearch_config(self, value: Optional[pulumi.Input['AgentElasticsearchConfigArgs']]):
        pulumi.set(self, "elasticsearch_config", value)

    @property
    @pulumi.getter(name="gcmConfig")
    def gcm_config(self) -> Optional[pulumi.Input['AgentGcmConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#google-cloud-monitoring-agent)
        """
        return pulumi.get(self, "gcm_config")

    @gcm_config.setter
    def gcm_config(self, value: Optional[pulumi.Input['AgentGcmConfigArgs']]):
        pulumi.set(self, "gcm_config", value)

    @property
    @pulumi.getter(name="grafanaLokiConfig")
    def grafana_loki_config(self) -> Optional[pulumi.Input['AgentGrafanaLokiConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#grafana-loki-agent)
        """
        return pulumi.get(self, "grafana_loki_config")

    @grafana_loki_config.setter
    def grafana_loki_config(self, value: Optional[pulumi.Input['AgentGrafanaLokiConfigArgs']]):
        pulumi.set(self, "grafana_loki_config", value)

    @property
    @pulumi.getter(name="graphiteConfig")
    def graphite_config(self) -> Optional[pulumi.Input['AgentGraphiteConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/graphite#graphite-agent)
        """
        return pulumi.get(self, "graphite_config")

    @graphite_config.setter
    def graphite_config(self, value: Optional[pulumi.Input['AgentGraphiteConfigArgs']]):
        pulumi.set(self, "graphite_config", value)

    @property
    @pulumi.getter(name="influxdbConfig")
    def influxdb_config(self) -> Optional[pulumi.Input['AgentInfluxdbConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#influxdb-agent)
        """
        return pulumi.get(self, "influxdb_config")

    @influxdb_config.setter
    def influxdb_config(self, value: Optional[pulumi.Input['AgentInfluxdbConfigArgs']]):
        pulumi.set(self, "influxdb_config", value)

    @property
    @pulumi.getter(name="instanaConfig")
    def instana_config(self) -> Optional[pulumi.Input['AgentInstanaConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/instana#instana-agent)
        """
        return pulumi.get(self, "instana_config")

    @instana_config.setter
    def instana_config(self, value: Optional[pulumi.Input['AgentInstanaConfigArgs']]):
        pulumi.set(self, "instana_config", value)

    @property
    @pulumi.getter(name="lightstepConfig")
    def lightstep_config(self) -> Optional[pulumi.Input['AgentLightstepConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#lightstep-agent)
        """
        return pulumi.get(self, "lightstep_config")

    @lightstep_config.setter
    def lightstep_config(self, value: Optional[pulumi.Input['AgentLightstepConfigArgs']]):
        pulumi.set(self, "lightstep_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="newrelicConfig")
    def newrelic_config(self) -> Optional[pulumi.Input['AgentNewrelicConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#new-relic-agent)
        """
        return pulumi.get(self, "newrelic_config")

    @newrelic_config.setter
    def newrelic_config(self, value: Optional[pulumi.Input['AgentNewrelicConfigArgs']]):
        pulumi.set(self, "newrelic_config", value)

    @property
    @pulumi.getter(name="opentsdbConfig")
    def opentsdb_config(self) -> Optional[pulumi.Input['AgentOpentsdbConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#opentsdb-agent)
        """
        return pulumi.get(self, "opentsdb_config")

    @opentsdb_config.setter
    def opentsdb_config(self, value: Optional[pulumi.Input['AgentOpentsdbConfigArgs']]):
        pulumi.set(self, "opentsdb_config", value)

    @property
    @pulumi.getter(name="pingdomConfig")
    def pingdom_config(self) -> Optional[pulumi.Input['AgentPingdomConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#pingdom-agent)
        """
        return pulumi.get(self, "pingdom_config")

    @pingdom_config.setter
    def pingdom_config(self, value: Optional[pulumi.Input['AgentPingdomConfigArgs']]):
        pulumi.set(self, "pingdom_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="prometheusConfig")
    def prometheus_config(self) -> Optional[pulumi.Input['AgentPrometheusConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#prometheus-agent)
        """
        return pulumi.get(self, "prometheus_config")

    @prometheus_config.setter
    def prometheus_config(self, value: Optional[pulumi.Input['AgentPrometheusConfigArgs']]):
        pulumi.set(self, "prometheus_config", value)

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> Optional[pulumi.Input['AgentQueryDelayArgs']]:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @query_delay.setter
    def query_delay(self, value: Optional[pulumi.Input['AgentQueryDelayArgs']]):
        pulumi.set(self, "query_delay", value)

    @property
    @pulumi.getter(name="redshiftConfig")
    def redshift_config(self) -> Optional[pulumi.Input['AgentRedshiftConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/?_highlight=redshift#amazon-redshift-agent)
        """
        return pulumi.get(self, "redshift_config")

    @redshift_config.setter
    def redshift_config(self, value: Optional[pulumi.Input['AgentRedshiftConfigArgs']]):
        pulumi.set(self, "redshift_config", value)

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Source of Metrics and/or Services.
        """
        return pulumi.get(self, "source_ofs")

    @source_ofs.setter
    def source_ofs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ofs", value)

    @property
    @pulumi.getter(name="splunkConfig")
    def splunk_config(self) -> Optional[pulumi.Input['AgentSplunkConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk#splunk-agent)
        """
        return pulumi.get(self, "splunk_config")

    @splunk_config.setter
    def splunk_config(self, value: Optional[pulumi.Input['AgentSplunkConfigArgs']]):
        pulumi.set(self, "splunk_config", value)

    @property
    @pulumi.getter(name="splunkObservabilityConfig")
    def splunk_observability_config(self) -> Optional[pulumi.Input['AgentSplunkObservabilityConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk-observability/#splunk-observability-agent)
        """
        return pulumi.get(self, "splunk_observability_config")

    @splunk_observability_config.setter
    def splunk_observability_config(self, value: Optional[pulumi.Input['AgentSplunkObservabilityConfigArgs']]):
        pulumi.set(self, "splunk_observability_config", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Status of the created agent.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="sumologicConfig")
    def sumologic_config(self) -> Optional[pulumi.Input['AgentSumologicConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#sumo-logic-agent)
        """
        return pulumi.get(self, "sumologic_config")

    @sumologic_config.setter
    def sumologic_config(self, value: Optional[pulumi.Input['AgentSumologicConfigArgs']]):
        pulumi.set(self, "sumologic_config", value)

    @property
    @pulumi.getter(name="thousandeyesConfig")
    def thousandeyes_config(self) -> Optional[pulumi.Input['AgentThousandeyesConfigArgs']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#thousandeyes-agent)
        """
        return pulumi.get(self, "thousandeyes_config")

    @thousandeyes_config.setter
    def thousandeyes_config(self, value: Optional[pulumi.Input['AgentThousandeyesConfigArgs']]):
        pulumi.set(self, "thousandeyes_config", value)


class Agent(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_type: Optional[pulumi.Input[str]] = None,
                 amazon_prometheus_config: Optional[pulumi.Input[pulumi.InputType['AgentAmazonPrometheusConfigArgs']]] = None,
                 appdynamics_config: Optional[pulumi.Input[pulumi.InputType['AgentAppdynamicsConfigArgs']]] = None,
                 bigquery_config: Optional[pulumi.Input[pulumi.InputType['AgentBigqueryConfigArgs']]] = None,
                 cloudwatch_config: Optional[pulumi.Input[pulumi.InputType['AgentCloudwatchConfigArgs']]] = None,
                 datadog_config: Optional[pulumi.Input[pulumi.InputType['AgentDatadogConfigArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dynatrace_config: Optional[pulumi.Input[pulumi.InputType['AgentDynatraceConfigArgs']]] = None,
                 elasticsearch_config: Optional[pulumi.Input[pulumi.InputType['AgentElasticsearchConfigArgs']]] = None,
                 gcm_config: Optional[pulumi.Input[pulumi.InputType['AgentGcmConfigArgs']]] = None,
                 grafana_loki_config: Optional[pulumi.Input[pulumi.InputType['AgentGrafanaLokiConfigArgs']]] = None,
                 graphite_config: Optional[pulumi.Input[pulumi.InputType['AgentGraphiteConfigArgs']]] = None,
                 influxdb_config: Optional[pulumi.Input[pulumi.InputType['AgentInfluxdbConfigArgs']]] = None,
                 instana_config: Optional[pulumi.Input[pulumi.InputType['AgentInstanaConfigArgs']]] = None,
                 lightstep_config: Optional[pulumi.Input[pulumi.InputType['AgentLightstepConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 newrelic_config: Optional[pulumi.Input[pulumi.InputType['AgentNewrelicConfigArgs']]] = None,
                 opentsdb_config: Optional[pulumi.Input[pulumi.InputType['AgentOpentsdbConfigArgs']]] = None,
                 pingdom_config: Optional[pulumi.Input[pulumi.InputType['AgentPingdomConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 prometheus_config: Optional[pulumi.Input[pulumi.InputType['AgentPrometheusConfigArgs']]] = None,
                 query_delay: Optional[pulumi.Input[pulumi.InputType['AgentQueryDelayArgs']]] = None,
                 redshift_config: Optional[pulumi.Input[pulumi.InputType['AgentRedshiftConfigArgs']]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 splunk_config: Optional[pulumi.Input[pulumi.InputType['AgentSplunkConfigArgs']]] = None,
                 splunk_observability_config: Optional[pulumi.Input[pulumi.InputType['AgentSplunkObservabilityConfigArgs']]] = None,
                 sumologic_config: Optional[pulumi.Input[pulumi.InputType['AgentSumologicConfigArgs']]] = None,
                 thousandeyes_config: Optional[pulumi.Input[pulumi.InputType['AgentThousandeyesConfigArgs']]] = None,
                 __props__=None):
        """
        The Agent is a lightweight application that executes the queries defined for your Nobl9 SLOs. Queries are written in the language supported by the data source in question and executed via native APIs.

        The Agent then sends your SLI metrics back to Nobl9 for processing and error budget calculation.

        For more information, refer to [Agent configuration | Nobl9 Documentation](https://docs.nobl9.com/nobl9_agent)

        ## Example Usage

        ```python
        import pulumi
        import pulumi_nobl9 as nobl9

        this_project = nobl9.Project("thisProject",
            display_name="Test N9 Terraform",
            description="An example N9 Terraform project")
        this_agent = nobl9.Agent("thisAgent",
            project=this_project.name,
            source_ofs=[
                "Metrics",
                "Services",
            ],
            agent_type="prometheus",
            prometheus_config=nobl9.AgentPrometheusConfigArgs(
                url="http://web.net",
            ))
        ```
        ## Nobl9 Official Documentation

        https://docs.nobl9.com/

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] agent_type: The type of the Agent. Check [Supported Agent types | Nobl9 Documentation](https://docs.nobl9.com/Sources/)
        :param pulumi.Input[pulumi.InputType['AgentAmazonPrometheusConfigArgs']] amazon_prometheus_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#ams-prometheus-agent)
        :param pulumi.Input[pulumi.InputType['AgentAppdynamicsConfigArgs']] appdynamics_config: [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#appdynamics-agent)
        :param pulumi.Input[pulumi.InputType['AgentBigqueryConfigArgs']] bigquery_config: [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#bigquery-agent)
        :param pulumi.Input[pulumi.InputType['AgentCloudwatchConfigArgs']] cloudwatch_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#cloudwatch-agent)
        :param pulumi.Input[pulumi.InputType['AgentDatadogConfigArgs']] datadog_config: [Configuration documentation](https://docs.nobl9.com/Sources/datadog#datadog-agent)
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[pulumi.InputType['AgentDynatraceConfigArgs']] dynatrace_config: [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#dynatrace-agent)
        :param pulumi.Input[pulumi.InputType['AgentElasticsearchConfigArgs']] elasticsearch_config: [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#elasticsearch-agent)
        :param pulumi.Input[pulumi.InputType['AgentGcmConfigArgs']] gcm_config: [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#google-cloud-monitoring-agent)
        :param pulumi.Input[pulumi.InputType['AgentGrafanaLokiConfigArgs']] grafana_loki_config: [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#grafana-loki-agent)
        :param pulumi.Input[pulumi.InputType['AgentGraphiteConfigArgs']] graphite_config: [Configuration documentation](https://docs.nobl9.com/Sources/graphite#graphite-agent)
        :param pulumi.Input[pulumi.InputType['AgentInfluxdbConfigArgs']] influxdb_config: [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#influxdb-agent)
        :param pulumi.Input[pulumi.InputType['AgentInstanaConfigArgs']] instana_config: [Configuration documentation](https://docs.nobl9.com/Sources/instana#instana-agent)
        :param pulumi.Input[pulumi.InputType['AgentLightstepConfigArgs']] lightstep_config: [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#lightstep-agent)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[pulumi.InputType['AgentNewrelicConfigArgs']] newrelic_config: [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#new-relic-agent)
        :param pulumi.Input[pulumi.InputType['AgentOpentsdbConfigArgs']] opentsdb_config: [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#opentsdb-agent)
        :param pulumi.Input[pulumi.InputType['AgentPingdomConfigArgs']] pingdom_config: [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#pingdom-agent)
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[pulumi.InputType['AgentPrometheusConfigArgs']] prometheus_config: [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#prometheus-agent)
        :param pulumi.Input[pulumi.InputType['AgentQueryDelayArgs']] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[pulumi.InputType['AgentRedshiftConfigArgs']] redshift_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/?_highlight=redshift#amazon-redshift-agent)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: Source of Metrics and/or Services.
        :param pulumi.Input[pulumi.InputType['AgentSplunkConfigArgs']] splunk_config: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#splunk-agent)
        :param pulumi.Input[pulumi.InputType['AgentSplunkObservabilityConfigArgs']] splunk_observability_config: [Configuration documentation](https://docs.nobl9.com/Sources/splunk-observability/#splunk-observability-agent)
        :param pulumi.Input[pulumi.InputType['AgentSumologicConfigArgs']] sumologic_config: [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#sumo-logic-agent)
        :param pulumi.Input[pulumi.InputType['AgentThousandeyesConfigArgs']] thousandeyes_config: [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#thousandeyes-agent)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AgentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The Agent is a lightweight application that executes the queries defined for your Nobl9 SLOs. Queries are written in the language supported by the data source in question and executed via native APIs.

        The Agent then sends your SLI metrics back to Nobl9 for processing and error budget calculation.

        For more information, refer to [Agent configuration | Nobl9 Documentation](https://docs.nobl9.com/nobl9_agent)

        ## Example Usage

        ```python
        import pulumi
        import pulumi_nobl9 as nobl9

        this_project = nobl9.Project("thisProject",
            display_name="Test N9 Terraform",
            description="An example N9 Terraform project")
        this_agent = nobl9.Agent("thisAgent",
            project=this_project.name,
            source_ofs=[
                "Metrics",
                "Services",
            ],
            agent_type="prometheus",
            prometheus_config=nobl9.AgentPrometheusConfigArgs(
                url="http://web.net",
            ))
        ```
        ## Nobl9 Official Documentation

        https://docs.nobl9.com/

        :param str resource_name: The name of the resource.
        :param AgentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AgentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_type: Optional[pulumi.Input[str]] = None,
                 amazon_prometheus_config: Optional[pulumi.Input[pulumi.InputType['AgentAmazonPrometheusConfigArgs']]] = None,
                 appdynamics_config: Optional[pulumi.Input[pulumi.InputType['AgentAppdynamicsConfigArgs']]] = None,
                 bigquery_config: Optional[pulumi.Input[pulumi.InputType['AgentBigqueryConfigArgs']]] = None,
                 cloudwatch_config: Optional[pulumi.Input[pulumi.InputType['AgentCloudwatchConfigArgs']]] = None,
                 datadog_config: Optional[pulumi.Input[pulumi.InputType['AgentDatadogConfigArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dynatrace_config: Optional[pulumi.Input[pulumi.InputType['AgentDynatraceConfigArgs']]] = None,
                 elasticsearch_config: Optional[pulumi.Input[pulumi.InputType['AgentElasticsearchConfigArgs']]] = None,
                 gcm_config: Optional[pulumi.Input[pulumi.InputType['AgentGcmConfigArgs']]] = None,
                 grafana_loki_config: Optional[pulumi.Input[pulumi.InputType['AgentGrafanaLokiConfigArgs']]] = None,
                 graphite_config: Optional[pulumi.Input[pulumi.InputType['AgentGraphiteConfigArgs']]] = None,
                 influxdb_config: Optional[pulumi.Input[pulumi.InputType['AgentInfluxdbConfigArgs']]] = None,
                 instana_config: Optional[pulumi.Input[pulumi.InputType['AgentInstanaConfigArgs']]] = None,
                 lightstep_config: Optional[pulumi.Input[pulumi.InputType['AgentLightstepConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 newrelic_config: Optional[pulumi.Input[pulumi.InputType['AgentNewrelicConfigArgs']]] = None,
                 opentsdb_config: Optional[pulumi.Input[pulumi.InputType['AgentOpentsdbConfigArgs']]] = None,
                 pingdom_config: Optional[pulumi.Input[pulumi.InputType['AgentPingdomConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 prometheus_config: Optional[pulumi.Input[pulumi.InputType['AgentPrometheusConfigArgs']]] = None,
                 query_delay: Optional[pulumi.Input[pulumi.InputType['AgentQueryDelayArgs']]] = None,
                 redshift_config: Optional[pulumi.Input[pulumi.InputType['AgentRedshiftConfigArgs']]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 splunk_config: Optional[pulumi.Input[pulumi.InputType['AgentSplunkConfigArgs']]] = None,
                 splunk_observability_config: Optional[pulumi.Input[pulumi.InputType['AgentSplunkObservabilityConfigArgs']]] = None,
                 sumologic_config: Optional[pulumi.Input[pulumi.InputType['AgentSumologicConfigArgs']]] = None,
                 thousandeyes_config: Optional[pulumi.Input[pulumi.InputType['AgentThousandeyesConfigArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AgentArgs.__new__(AgentArgs)

            if agent_type is None and not opts.urn:
                raise TypeError("Missing required property 'agent_type'")
            __props__.__dict__["agent_type"] = agent_type
            __props__.__dict__["amazon_prometheus_config"] = amazon_prometheus_config
            __props__.__dict__["appdynamics_config"] = appdynamics_config
            __props__.__dict__["bigquery_config"] = bigquery_config
            __props__.__dict__["cloudwatch_config"] = cloudwatch_config
            __props__.__dict__["datadog_config"] = datadog_config
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["dynatrace_config"] = dynatrace_config
            __props__.__dict__["elasticsearch_config"] = elasticsearch_config
            __props__.__dict__["gcm_config"] = gcm_config
            __props__.__dict__["grafana_loki_config"] = grafana_loki_config
            __props__.__dict__["graphite_config"] = graphite_config
            __props__.__dict__["influxdb_config"] = influxdb_config
            __props__.__dict__["instana_config"] = instana_config
            __props__.__dict__["lightstep_config"] = lightstep_config
            __props__.__dict__["name"] = name
            __props__.__dict__["newrelic_config"] = newrelic_config
            __props__.__dict__["opentsdb_config"] = opentsdb_config
            __props__.__dict__["pingdom_config"] = pingdom_config
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["prometheus_config"] = prometheus_config
            __props__.__dict__["query_delay"] = query_delay
            __props__.__dict__["redshift_config"] = redshift_config
            if source_ofs is None and not opts.urn:
                raise TypeError("Missing required property 'source_ofs'")
            __props__.__dict__["source_ofs"] = source_ofs
            __props__.__dict__["splunk_config"] = splunk_config
            __props__.__dict__["splunk_observability_config"] = splunk_observability_config
            __props__.__dict__["sumologic_config"] = sumologic_config
            __props__.__dict__["thousandeyes_config"] = thousandeyes_config
            __props__.__dict__["client_id"] = None
            __props__.__dict__["client_secret"] = None
            __props__.__dict__["status"] = None
        super(Agent, __self__).__init__(
            'nobl9:index/agent:Agent',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agent_type: Optional[pulumi.Input[str]] = None,
            amazon_prometheus_config: Optional[pulumi.Input[pulumi.InputType['AgentAmazonPrometheusConfigArgs']]] = None,
            appdynamics_config: Optional[pulumi.Input[pulumi.InputType['AgentAppdynamicsConfigArgs']]] = None,
            bigquery_config: Optional[pulumi.Input[pulumi.InputType['AgentBigqueryConfigArgs']]] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_secret: Optional[pulumi.Input[str]] = None,
            cloudwatch_config: Optional[pulumi.Input[pulumi.InputType['AgentCloudwatchConfigArgs']]] = None,
            datadog_config: Optional[pulumi.Input[pulumi.InputType['AgentDatadogConfigArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            dynatrace_config: Optional[pulumi.Input[pulumi.InputType['AgentDynatraceConfigArgs']]] = None,
            elasticsearch_config: Optional[pulumi.Input[pulumi.InputType['AgentElasticsearchConfigArgs']]] = None,
            gcm_config: Optional[pulumi.Input[pulumi.InputType['AgentGcmConfigArgs']]] = None,
            grafana_loki_config: Optional[pulumi.Input[pulumi.InputType['AgentGrafanaLokiConfigArgs']]] = None,
            graphite_config: Optional[pulumi.Input[pulumi.InputType['AgentGraphiteConfigArgs']]] = None,
            influxdb_config: Optional[pulumi.Input[pulumi.InputType['AgentInfluxdbConfigArgs']]] = None,
            instana_config: Optional[pulumi.Input[pulumi.InputType['AgentInstanaConfigArgs']]] = None,
            lightstep_config: Optional[pulumi.Input[pulumi.InputType['AgentLightstepConfigArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            newrelic_config: Optional[pulumi.Input[pulumi.InputType['AgentNewrelicConfigArgs']]] = None,
            opentsdb_config: Optional[pulumi.Input[pulumi.InputType['AgentOpentsdbConfigArgs']]] = None,
            pingdom_config: Optional[pulumi.Input[pulumi.InputType['AgentPingdomConfigArgs']]] = None,
            project: Optional[pulumi.Input[str]] = None,
            prometheus_config: Optional[pulumi.Input[pulumi.InputType['AgentPrometheusConfigArgs']]] = None,
            query_delay: Optional[pulumi.Input[pulumi.InputType['AgentQueryDelayArgs']]] = None,
            redshift_config: Optional[pulumi.Input[pulumi.InputType['AgentRedshiftConfigArgs']]] = None,
            source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            splunk_config: Optional[pulumi.Input[pulumi.InputType['AgentSplunkConfigArgs']]] = None,
            splunk_observability_config: Optional[pulumi.Input[pulumi.InputType['AgentSplunkObservabilityConfigArgs']]] = None,
            status: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            sumologic_config: Optional[pulumi.Input[pulumi.InputType['AgentSumologicConfigArgs']]] = None,
            thousandeyes_config: Optional[pulumi.Input[pulumi.InputType['AgentThousandeyesConfigArgs']]] = None) -> 'Agent':
        """
        Get an existing Agent resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] agent_type: The type of the Agent. Check [Supported Agent types | Nobl9 Documentation](https://docs.nobl9.com/Sources/)
        :param pulumi.Input[pulumi.InputType['AgentAmazonPrometheusConfigArgs']] amazon_prometheus_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#ams-prometheus-agent)
        :param pulumi.Input[pulumi.InputType['AgentAppdynamicsConfigArgs']] appdynamics_config: [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#appdynamics-agent)
        :param pulumi.Input[pulumi.InputType['AgentBigqueryConfigArgs']] bigquery_config: [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#bigquery-agent)
        :param pulumi.Input[str] client_id: client_id of created agent.
        :param pulumi.Input[str] client_secret: client_secret of created agent.
        :param pulumi.Input[pulumi.InputType['AgentCloudwatchConfigArgs']] cloudwatch_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#cloudwatch-agent)
        :param pulumi.Input[pulumi.InputType['AgentDatadogConfigArgs']] datadog_config: [Configuration documentation](https://docs.nobl9.com/Sources/datadog#datadog-agent)
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[pulumi.InputType['AgentDynatraceConfigArgs']] dynatrace_config: [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#dynatrace-agent)
        :param pulumi.Input[pulumi.InputType['AgentElasticsearchConfigArgs']] elasticsearch_config: [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#elasticsearch-agent)
        :param pulumi.Input[pulumi.InputType['AgentGcmConfigArgs']] gcm_config: [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#google-cloud-monitoring-agent)
        :param pulumi.Input[pulumi.InputType['AgentGrafanaLokiConfigArgs']] grafana_loki_config: [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#grafana-loki-agent)
        :param pulumi.Input[pulumi.InputType['AgentGraphiteConfigArgs']] graphite_config: [Configuration documentation](https://docs.nobl9.com/Sources/graphite#graphite-agent)
        :param pulumi.Input[pulumi.InputType['AgentInfluxdbConfigArgs']] influxdb_config: [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#influxdb-agent)
        :param pulumi.Input[pulumi.InputType['AgentInstanaConfigArgs']] instana_config: [Configuration documentation](https://docs.nobl9.com/Sources/instana#instana-agent)
        :param pulumi.Input[pulumi.InputType['AgentLightstepConfigArgs']] lightstep_config: [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#lightstep-agent)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[pulumi.InputType['AgentNewrelicConfigArgs']] newrelic_config: [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#new-relic-agent)
        :param pulumi.Input[pulumi.InputType['AgentOpentsdbConfigArgs']] opentsdb_config: [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#opentsdb-agent)
        :param pulumi.Input[pulumi.InputType['AgentPingdomConfigArgs']] pingdom_config: [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#pingdom-agent)
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[pulumi.InputType['AgentPrometheusConfigArgs']] prometheus_config: [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#prometheus-agent)
        :param pulumi.Input[pulumi.InputType['AgentQueryDelayArgs']] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[pulumi.InputType['AgentRedshiftConfigArgs']] redshift_config: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/?_highlight=redshift#amazon-redshift-agent)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: Source of Metrics and/or Services.
        :param pulumi.Input[pulumi.InputType['AgentSplunkConfigArgs']] splunk_config: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#splunk-agent)
        :param pulumi.Input[pulumi.InputType['AgentSplunkObservabilityConfigArgs']] splunk_observability_config: [Configuration documentation](https://docs.nobl9.com/Sources/splunk-observability/#splunk-observability-agent)
        :param pulumi.Input[Mapping[str, Any]] status: Status of the created agent.
        :param pulumi.Input[pulumi.InputType['AgentSumologicConfigArgs']] sumologic_config: [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#sumo-logic-agent)
        :param pulumi.Input[pulumi.InputType['AgentThousandeyesConfigArgs']] thousandeyes_config: [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#thousandeyes-agent)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AgentState.__new__(_AgentState)

        __props__.__dict__["agent_type"] = agent_type
        __props__.__dict__["amazon_prometheus_config"] = amazon_prometheus_config
        __props__.__dict__["appdynamics_config"] = appdynamics_config
        __props__.__dict__["bigquery_config"] = bigquery_config
        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["client_secret"] = client_secret
        __props__.__dict__["cloudwatch_config"] = cloudwatch_config
        __props__.__dict__["datadog_config"] = datadog_config
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["dynatrace_config"] = dynatrace_config
        __props__.__dict__["elasticsearch_config"] = elasticsearch_config
        __props__.__dict__["gcm_config"] = gcm_config
        __props__.__dict__["grafana_loki_config"] = grafana_loki_config
        __props__.__dict__["graphite_config"] = graphite_config
        __props__.__dict__["influxdb_config"] = influxdb_config
        __props__.__dict__["instana_config"] = instana_config
        __props__.__dict__["lightstep_config"] = lightstep_config
        __props__.__dict__["name"] = name
        __props__.__dict__["newrelic_config"] = newrelic_config
        __props__.__dict__["opentsdb_config"] = opentsdb_config
        __props__.__dict__["pingdom_config"] = pingdom_config
        __props__.__dict__["project"] = project
        __props__.__dict__["prometheus_config"] = prometheus_config
        __props__.__dict__["query_delay"] = query_delay
        __props__.__dict__["redshift_config"] = redshift_config
        __props__.__dict__["source_ofs"] = source_ofs
        __props__.__dict__["splunk_config"] = splunk_config
        __props__.__dict__["splunk_observability_config"] = splunk_observability_config
        __props__.__dict__["status"] = status
        __props__.__dict__["sumologic_config"] = sumologic_config
        __props__.__dict__["thousandeyes_config"] = thousandeyes_config
        return Agent(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="agentType")
    def agent_type(self) -> pulumi.Output[str]:
        """
        The type of the Agent. Check [Supported Agent types | Nobl9 Documentation](https://docs.nobl9.com/Sources/)
        """
        return pulumi.get(self, "agent_type")

    @property
    @pulumi.getter(name="amazonPrometheusConfig")
    def amazon_prometheus_config(self) -> pulumi.Output[Optional['outputs.AgentAmazonPrometheusConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#ams-prometheus-agent)
        """
        return pulumi.get(self, "amazon_prometheus_config")

    @property
    @pulumi.getter(name="appdynamicsConfig")
    def appdynamics_config(self) -> pulumi.Output[Optional['outputs.AgentAppdynamicsConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#appdynamics-agent)
        """
        return pulumi.get(self, "appdynamics_config")

    @property
    @pulumi.getter(name="bigqueryConfig")
    def bigquery_config(self) -> pulumi.Output[Optional['outputs.AgentBigqueryConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#bigquery-agent)
        """
        return pulumi.get(self, "bigquery_config")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        """
        client_id of created agent.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[str]:
        """
        client_secret of created agent.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="cloudwatchConfig")
    def cloudwatch_config(self) -> pulumi.Output[Optional['outputs.AgentCloudwatchConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#cloudwatch-agent)
        """
        return pulumi.get(self, "cloudwatch_config")

    @property
    @pulumi.getter(name="datadogConfig")
    def datadog_config(self) -> pulumi.Output[Optional['outputs.AgentDatadogConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/datadog#datadog-agent)
        """
        return pulumi.get(self, "datadog_config")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dynatraceConfig")
    def dynatrace_config(self) -> pulumi.Output[Optional['outputs.AgentDynatraceConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#dynatrace-agent)
        """
        return pulumi.get(self, "dynatrace_config")

    @property
    @pulumi.getter(name="elasticsearchConfig")
    def elasticsearch_config(self) -> pulumi.Output[Optional['outputs.AgentElasticsearchConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#elasticsearch-agent)
        """
        return pulumi.get(self, "elasticsearch_config")

    @property
    @pulumi.getter(name="gcmConfig")
    def gcm_config(self) -> pulumi.Output[Optional['outputs.AgentGcmConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#google-cloud-monitoring-agent)
        """
        return pulumi.get(self, "gcm_config")

    @property
    @pulumi.getter(name="grafanaLokiConfig")
    def grafana_loki_config(self) -> pulumi.Output[Optional['outputs.AgentGrafanaLokiConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#grafana-loki-agent)
        """
        return pulumi.get(self, "grafana_loki_config")

    @property
    @pulumi.getter(name="graphiteConfig")
    def graphite_config(self) -> pulumi.Output[Optional['outputs.AgentGraphiteConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/graphite#graphite-agent)
        """
        return pulumi.get(self, "graphite_config")

    @property
    @pulumi.getter(name="influxdbConfig")
    def influxdb_config(self) -> pulumi.Output[Optional['outputs.AgentInfluxdbConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#influxdb-agent)
        """
        return pulumi.get(self, "influxdb_config")

    @property
    @pulumi.getter(name="instanaConfig")
    def instana_config(self) -> pulumi.Output[Optional['outputs.AgentInstanaConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/instana#instana-agent)
        """
        return pulumi.get(self, "instana_config")

    @property
    @pulumi.getter(name="lightstepConfig")
    def lightstep_config(self) -> pulumi.Output[Optional['outputs.AgentLightstepConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#lightstep-agent)
        """
        return pulumi.get(self, "lightstep_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newrelicConfig")
    def newrelic_config(self) -> pulumi.Output[Optional['outputs.AgentNewrelicConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#new-relic-agent)
        """
        return pulumi.get(self, "newrelic_config")

    @property
    @pulumi.getter(name="opentsdbConfig")
    def opentsdb_config(self) -> pulumi.Output[Optional['outputs.AgentOpentsdbConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#opentsdb-agent)
        """
        return pulumi.get(self, "opentsdb_config")

    @property
    @pulumi.getter(name="pingdomConfig")
    def pingdom_config(self) -> pulumi.Output[Optional['outputs.AgentPingdomConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#pingdom-agent)
        """
        return pulumi.get(self, "pingdom_config")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="prometheusConfig")
    def prometheus_config(self) -> pulumi.Output[Optional['outputs.AgentPrometheusConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#prometheus-agent)
        """
        return pulumi.get(self, "prometheus_config")

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> pulumi.Output[Optional['outputs.AgentQueryDelay']]:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @property
    @pulumi.getter(name="redshiftConfig")
    def redshift_config(self) -> pulumi.Output[Optional['outputs.AgentRedshiftConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/?_highlight=redshift#amazon-redshift-agent)
        """
        return pulumi.get(self, "redshift_config")

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> pulumi.Output[Sequence[str]]:
        """
        Source of Metrics and/or Services.
        """
        return pulumi.get(self, "source_ofs")

    @property
    @pulumi.getter(name="splunkConfig")
    def splunk_config(self) -> pulumi.Output[Optional['outputs.AgentSplunkConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk#splunk-agent)
        """
        return pulumi.get(self, "splunk_config")

    @property
    @pulumi.getter(name="splunkObservabilityConfig")
    def splunk_observability_config(self) -> pulumi.Output[Optional['outputs.AgentSplunkObservabilityConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk-observability/#splunk-observability-agent)
        """
        return pulumi.get(self, "splunk_observability_config")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Status of the created agent.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="sumologicConfig")
    def sumologic_config(self) -> pulumi.Output[Optional['outputs.AgentSumologicConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#sumo-logic-agent)
        """
        return pulumi.get(self, "sumologic_config")

    @property
    @pulumi.getter(name="thousandeyesConfig")
    def thousandeyes_config(self) -> pulumi.Output[Optional['outputs.AgentThousandeyesConfig']]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#thousandeyes-agent)
        """
        return pulumi.get(self, "thousandeyes_config")

