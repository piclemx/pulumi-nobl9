# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DirectCloudwatchArgs', 'DirectCloudwatch']

@pulumi.input_type
class DirectCloudwatchArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 historical_data_retrieval: Optional[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalArgs']] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input['DirectCloudwatchQueryDelayArgs']] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DirectCloudwatch resource.
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input['DirectCloudwatchHistoricalDataRetrievalArgs'] historical_data_retrieval: [Replay configuration documentation](https://docs.nobl9.com/replay)
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input['DirectCloudwatchQueryDelayArgs'] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[str] role_arn: [required] | ARN of the AWS IAM Role to assume.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        pulumi.set(__self__, "project", project)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if historical_data_retrieval is not None:
            pulumi.set(__self__, "historical_data_retrieval", historical_data_retrieval)
        if log_collection_enabled is not None:
            pulumi.set(__self__, "log_collection_enabled", log_collection_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_delay is not None:
            pulumi.set(__self__, "query_delay", query_delay)
        if release_channel is not None:
            pulumi.set(__self__, "release_channel", release_channel)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if source_ofs is not None:
            warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
            pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")
        if source_ofs is not None:
            pulumi.set(__self__, "source_ofs", source_ofs)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="historicalDataRetrieval")
    def historical_data_retrieval(self) -> Optional[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalArgs']]:
        """
        [Replay configuration documentation](https://docs.nobl9.com/replay)
        """
        return pulumi.get(self, "historical_data_retrieval")

    @historical_data_retrieval.setter
    def historical_data_retrieval(self, value: Optional[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalArgs']]):
        pulumi.set(self, "historical_data_retrieval", value)

    @property
    @pulumi.getter(name="logCollectionEnabled")
    def log_collection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        """
        return pulumi.get(self, "log_collection_enabled")

    @log_collection_enabled.setter
    def log_collection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_collection_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> Optional[pulumi.Input['DirectCloudwatchQueryDelayArgs']]:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @query_delay.setter
    def query_delay(self, value: Optional[pulumi.Input['DirectCloudwatchQueryDelayArgs']]):
        pulumi.set(self, "query_delay", value)

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Release channel of the created datasource [stable/beta]
        """
        return pulumi.get(self, "release_channel")

    @release_channel.setter
    def release_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_channel", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        [required] | ARN of the AWS IAM Role to assume.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
        pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")

        return pulumi.get(self, "source_ofs")

    @source_ofs.setter
    def source_ofs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ofs", value)


@pulumi.input_type
class _DirectCloudwatchState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 historical_data_retrieval: Optional[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalArgs']] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input['DirectCloudwatchQueryDelayArgs']] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DirectCloudwatch resources.
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input['DirectCloudwatchHistoricalDataRetrievalArgs'] historical_data_retrieval: [Replay configuration documentation](https://docs.nobl9.com/replay)
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input['DirectCloudwatchQueryDelayArgs'] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[str] role_arn: [required] | ARN of the AWS IAM Role to assume.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        :param pulumi.Input[str] status: The status of the created direct.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if historical_data_retrieval is not None:
            pulumi.set(__self__, "historical_data_retrieval", historical_data_retrieval)
        if log_collection_enabled is not None:
            pulumi.set(__self__, "log_collection_enabled", log_collection_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if query_delay is not None:
            pulumi.set(__self__, "query_delay", query_delay)
        if release_channel is not None:
            pulumi.set(__self__, "release_channel", release_channel)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if source_ofs is not None:
            warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
            pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")
        if source_ofs is not None:
            pulumi.set(__self__, "source_ofs", source_ofs)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="historicalDataRetrieval")
    def historical_data_retrieval(self) -> Optional[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalArgs']]:
        """
        [Replay configuration documentation](https://docs.nobl9.com/replay)
        """
        return pulumi.get(self, "historical_data_retrieval")

    @historical_data_retrieval.setter
    def historical_data_retrieval(self, value: Optional[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalArgs']]):
        pulumi.set(self, "historical_data_retrieval", value)

    @property
    @pulumi.getter(name="logCollectionEnabled")
    def log_collection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        """
        return pulumi.get(self, "log_collection_enabled")

    @log_collection_enabled.setter
    def log_collection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_collection_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> Optional[pulumi.Input['DirectCloudwatchQueryDelayArgs']]:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @query_delay.setter
    def query_delay(self, value: Optional[pulumi.Input['DirectCloudwatchQueryDelayArgs']]):
        pulumi.set(self, "query_delay", value)

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Release channel of the created datasource [stable/beta]
        """
        return pulumi.get(self, "release_channel")

    @release_channel.setter
    def release_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_channel", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        [required] | ARN of the AWS IAM Role to assume.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
        pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")

        return pulumi.get(self, "source_ofs")

    @source_ofs.setter
    def source_ofs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ofs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the created direct.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class DirectCloudwatch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 historical_data_retrieval: Optional[pulumi.Input[pulumi.InputType['DirectCloudwatchHistoricalDataRetrievalArgs']]] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input[pulumi.InputType['DirectCloudwatchQueryDelayArgs']]] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Amazon CloudWatch is a monitoring and observability service and a repository that aggregates data from more than 70 AWS data sources. CloudWatch also allows users to publish custom metrics from their services. Creating SLOs using this data is a powerful tool to monitor large portfolios of products. Nobl9 connects to Amazon CloudWatch for SLI measurement collection and comparison with SLO targets.

        For more information, refer to [Amazon CloudWatch Direct | Nobl9 Documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#cloudwatch-direct)

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_nobl9 as nobl9

        test_cloudwatch = nobl9.DirectCloudwatch("test-cloudwatch",
            description="desc",
            historical_data_retrieval=nobl9.DirectCloudwatchHistoricalDataRetrievalArgs(
                default_durations=[nobl9.DirectCloudwatchHistoricalDataRetrievalDefaultDurationArgs(
                    unit="Day",
                    value=0,
                )],
                max_durations=[nobl9.DirectCloudwatchHistoricalDataRetrievalMaxDurationArgs(
                    unit="Day",
                    value=15,
                )],
            ),
            log_collection_enabled=True,
            project="terraform",
            role_arn="secret")
        ```
        ## Nobl9 Official Documentation

        https://docs.nobl9.com/

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[pulumi.InputType['DirectCloudwatchHistoricalDataRetrievalArgs']] historical_data_retrieval: [Replay configuration documentation](https://docs.nobl9.com/replay)
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[pulumi.InputType['DirectCloudwatchQueryDelayArgs']] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[str] role_arn: [required] | ARN of the AWS IAM Role to assume.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DirectCloudwatchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Amazon CloudWatch is a monitoring and observability service and a repository that aggregates data from more than 70 AWS data sources. CloudWatch also allows users to publish custom metrics from their services. Creating SLOs using this data is a powerful tool to monitor large portfolios of products. Nobl9 connects to Amazon CloudWatch for SLI measurement collection and comparison with SLO targets.

        For more information, refer to [Amazon CloudWatch Direct | Nobl9 Documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#cloudwatch-direct)

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_nobl9 as nobl9

        test_cloudwatch = nobl9.DirectCloudwatch("test-cloudwatch",
            description="desc",
            historical_data_retrieval=nobl9.DirectCloudwatchHistoricalDataRetrievalArgs(
                default_durations=[nobl9.DirectCloudwatchHistoricalDataRetrievalDefaultDurationArgs(
                    unit="Day",
                    value=0,
                )],
                max_durations=[nobl9.DirectCloudwatchHistoricalDataRetrievalMaxDurationArgs(
                    unit="Day",
                    value=15,
                )],
            ),
            log_collection_enabled=True,
            project="terraform",
            role_arn="secret")
        ```
        ## Nobl9 Official Documentation

        https://docs.nobl9.com/

        :param str resource_name: The name of the resource.
        :param DirectCloudwatchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DirectCloudwatchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 historical_data_retrieval: Optional[pulumi.Input[pulumi.InputType['DirectCloudwatchHistoricalDataRetrievalArgs']]] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input[pulumi.InputType['DirectCloudwatchQueryDelayArgs']]] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DirectCloudwatchArgs.__new__(DirectCloudwatchArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["historical_data_retrieval"] = historical_data_retrieval
            __props__.__dict__["log_collection_enabled"] = log_collection_enabled
            __props__.__dict__["name"] = name
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["query_delay"] = query_delay
            __props__.__dict__["release_channel"] = release_channel
            __props__.__dict__["role_arn"] = None if role_arn is None else pulumi.Output.secret(role_arn)
            __props__.__dict__["source_ofs"] = source_ofs
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["roleArn"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(DirectCloudwatch, __self__).__init__(
            'nobl9:index/directCloudwatch:DirectCloudwatch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            historical_data_retrieval: Optional[pulumi.Input[pulumi.InputType['DirectCloudwatchHistoricalDataRetrievalArgs']]] = None,
            log_collection_enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            query_delay: Optional[pulumi.Input[pulumi.InputType['DirectCloudwatchQueryDelayArgs']]] = None,
            release_channel: Optional[pulumi.Input[str]] = None,
            role_arn: Optional[pulumi.Input[str]] = None,
            source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'DirectCloudwatch':
        """
        Get an existing DirectCloudwatch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[pulumi.InputType['DirectCloudwatchHistoricalDataRetrievalArgs']] historical_data_retrieval: [Replay configuration documentation](https://docs.nobl9.com/replay)
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[pulumi.InputType['DirectCloudwatchQueryDelayArgs']] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[str] role_arn: [required] | ARN of the AWS IAM Role to assume.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        :param pulumi.Input[str] status: The status of the created direct.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DirectCloudwatchState.__new__(_DirectCloudwatchState)

        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["historical_data_retrieval"] = historical_data_retrieval
        __props__.__dict__["log_collection_enabled"] = log_collection_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["query_delay"] = query_delay
        __props__.__dict__["release_channel"] = release_channel
        __props__.__dict__["role_arn"] = role_arn
        __props__.__dict__["source_ofs"] = source_ofs
        __props__.__dict__["status"] = status
        return DirectCloudwatch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="historicalDataRetrieval")
    def historical_data_retrieval(self) -> pulumi.Output['outputs.DirectCloudwatchHistoricalDataRetrieval']:
        """
        [Replay configuration documentation](https://docs.nobl9.com/replay)
        """
        return pulumi.get(self, "historical_data_retrieval")

    @property
    @pulumi.getter(name="logCollectionEnabled")
    def log_collection_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        """
        return pulumi.get(self, "log_collection_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> pulumi.Output['outputs.DirectCloudwatchQueryDelay']:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> pulumi.Output[str]:
        """
        Release channel of the created datasource [stable/beta]
        """
        return pulumi.get(self, "release_channel")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Output[str]:
        """
        [required] | ARN of the AWS IAM Role to assume.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
        pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")

        return pulumi.get(self, "source_ofs")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the created direct.
        """
        return pulumi.get(self, "status")

