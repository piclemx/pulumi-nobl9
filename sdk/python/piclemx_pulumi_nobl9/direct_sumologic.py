# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DirectSumologicArgs', 'DirectSumologic']

@pulumi.input_type
class DirectSumologicArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[str],
                 url: pulumi.Input[str],
                 access_id: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input['DirectSumologicQueryDelayArgs']] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DirectSumologic resource.
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] url: Sumo Logic API URL.
        :param pulumi.Input[str] access_id: [required] | Sumo Logic API Access ID.
        :param pulumi.Input[str] access_key: [required] | Sumo Logic API Access Key.
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input['DirectSumologicQueryDelayArgs'] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "url", url)
        if access_id is not None:
            pulumi.set(__self__, "access_id", access_id)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if log_collection_enabled is not None:
            pulumi.set(__self__, "log_collection_enabled", log_collection_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_delay is not None:
            pulumi.set(__self__, "query_delay", query_delay)
        if release_channel is not None:
            pulumi.set(__self__, "release_channel", release_channel)
        if source_ofs is not None:
            warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
            pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")
        if source_ofs is not None:
            pulumi.set(__self__, "source_ofs", source_ofs)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Sumo Logic API URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="accessId")
    def access_id(self) -> Optional[pulumi.Input[str]]:
        """
        [required] | Sumo Logic API Access ID.
        """
        return pulumi.get(self, "access_id")

    @access_id.setter
    def access_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_id", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        [required] | Sumo Logic API Access Key.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="logCollectionEnabled")
    def log_collection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        """
        return pulumi.get(self, "log_collection_enabled")

    @log_collection_enabled.setter
    def log_collection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_collection_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> Optional[pulumi.Input['DirectSumologicQueryDelayArgs']]:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @query_delay.setter
    def query_delay(self, value: Optional[pulumi.Input['DirectSumologicQueryDelayArgs']]):
        pulumi.set(self, "query_delay", value)

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Release channel of the created datasource [stable/beta]
        """
        return pulumi.get(self, "release_channel")

    @release_channel.setter
    def release_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_channel", value)

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
        pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")

        return pulumi.get(self, "source_ofs")

    @source_ofs.setter
    def source_ofs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ofs", value)


@pulumi.input_type
class _DirectSumologicState:
    def __init__(__self__, *,
                 access_id: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input['DirectSumologicQueryDelayArgs']] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DirectSumologic resources.
        :param pulumi.Input[str] access_id: [required] | Sumo Logic API Access ID.
        :param pulumi.Input[str] access_key: [required] | Sumo Logic API Access Key.
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input['DirectSumologicQueryDelayArgs'] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        :param pulumi.Input[str] status: The status of the created direct.
        :param pulumi.Input[str] url: Sumo Logic API URL.
        """
        if access_id is not None:
            pulumi.set(__self__, "access_id", access_id)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if log_collection_enabled is not None:
            pulumi.set(__self__, "log_collection_enabled", log_collection_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if query_delay is not None:
            pulumi.set(__self__, "query_delay", query_delay)
        if release_channel is not None:
            pulumi.set(__self__, "release_channel", release_channel)
        if source_ofs is not None:
            warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
            pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")
        if source_ofs is not None:
            pulumi.set(__self__, "source_ofs", source_ofs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accessId")
    def access_id(self) -> Optional[pulumi.Input[str]]:
        """
        [required] | Sumo Logic API Access ID.
        """
        return pulumi.get(self, "access_id")

    @access_id.setter
    def access_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_id", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        [required] | Sumo Logic API Access Key.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="logCollectionEnabled")
    def log_collection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        """
        return pulumi.get(self, "log_collection_enabled")

    @log_collection_enabled.setter
    def log_collection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_collection_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> Optional[pulumi.Input['DirectSumologicQueryDelayArgs']]:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @query_delay.setter
    def query_delay(self, value: Optional[pulumi.Input['DirectSumologicQueryDelayArgs']]):
        pulumi.set(self, "query_delay", value)

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Release channel of the created datasource [stable/beta]
        """
        return pulumi.get(self, "release_channel")

    @release_channel.setter
    def release_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_channel", value)

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
        pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")

        return pulumi.get(self, "source_ofs")

    @source_ofs.setter
    def source_ofs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ofs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the created direct.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Sumo Logic API URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class DirectSumologic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_id: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input[pulumi.InputType['DirectSumologicQueryDelayArgs']]] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Sumo Logic is an observability platform that provides visibility into AWS, Azure, and GCP cloud applications and infrastructure. Nobl9 connects to Sumo Logic for SLI measurement collection and comparison with SLO targets.

        For more information, refer to [Sumo Logic Direct | Nobl9 Documentation](https://docs.nobl9.com/Sources/sumo-logic#sumo-logic-direct).

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_nobl9 as nobl9

        test_sumologic = nobl9.DirectSumologic("test-sumologic",
            access_id="secret",
            access_key="secret",
            description="desc",
            log_collection_enabled=True,
            project="terraform",
            url="http://web.net")
        ```
        ## Nobl9 Official Documentation

        https://docs.nobl9.com/

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_id: [required] | Sumo Logic API Access ID.
        :param pulumi.Input[str] access_key: [required] | Sumo Logic API Access Key.
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[pulumi.InputType['DirectSumologicQueryDelayArgs']] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        :param pulumi.Input[str] url: Sumo Logic API URL.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DirectSumologicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Sumo Logic is an observability platform that provides visibility into AWS, Azure, and GCP cloud applications and infrastructure. Nobl9 connects to Sumo Logic for SLI measurement collection and comparison with SLO targets.

        For more information, refer to [Sumo Logic Direct | Nobl9 Documentation](https://docs.nobl9.com/Sources/sumo-logic#sumo-logic-direct).

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_nobl9 as nobl9

        test_sumologic = nobl9.DirectSumologic("test-sumologic",
            access_id="secret",
            access_key="secret",
            description="desc",
            log_collection_enabled=True,
            project="terraform",
            url="http://web.net")
        ```
        ## Nobl9 Official Documentation

        https://docs.nobl9.com/

        :param str resource_name: The name of the resource.
        :param DirectSumologicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DirectSumologicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_id: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input[pulumi.InputType['DirectSumologicQueryDelayArgs']]] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DirectSumologicArgs.__new__(DirectSumologicArgs)

            __props__.__dict__["access_id"] = None if access_id is None else pulumi.Output.secret(access_id)
            __props__.__dict__["access_key"] = None if access_key is None else pulumi.Output.secret(access_key)
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["log_collection_enabled"] = log_collection_enabled
            __props__.__dict__["name"] = name
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["query_delay"] = query_delay
            __props__.__dict__["release_channel"] = release_channel
            __props__.__dict__["source_ofs"] = source_ofs
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessId", "accessKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(DirectSumologic, __self__).__init__(
            'nobl9:index/directSumologic:DirectSumologic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_id: Optional[pulumi.Input[str]] = None,
            access_key: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            log_collection_enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            query_delay: Optional[pulumi.Input[pulumi.InputType['DirectSumologicQueryDelayArgs']]] = None,
            release_channel: Optional[pulumi.Input[str]] = None,
            source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'DirectSumologic':
        """
        Get an existing DirectSumologic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_id: [required] | Sumo Logic API Access ID.
        :param pulumi.Input[str] access_key: [required] | Sumo Logic API Access Key.
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[pulumi.InputType['DirectSumologicQueryDelayArgs']] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        :param pulumi.Input[str] status: The status of the created direct.
        :param pulumi.Input[str] url: Sumo Logic API URL.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DirectSumologicState.__new__(_DirectSumologicState)

        __props__.__dict__["access_id"] = access_id
        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["log_collection_enabled"] = log_collection_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["query_delay"] = query_delay
        __props__.__dict__["release_channel"] = release_channel
        __props__.__dict__["source_ofs"] = source_ofs
        __props__.__dict__["status"] = status
        __props__.__dict__["url"] = url
        return DirectSumologic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessId")
    def access_id(self) -> pulumi.Output[str]:
        """
        [required] | Sumo Logic API Access ID.
        """
        return pulumi.get(self, "access_id")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[str]:
        """
        [required] | Sumo Logic API Access Key.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="logCollectionEnabled")
    def log_collection_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        """
        return pulumi.get(self, "log_collection_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> pulumi.Output['outputs.DirectSumologicQueryDelay']:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> pulumi.Output[str]:
        """
        Release channel of the created datasource [stable/beta]
        """
        return pulumi.get(self, "release_channel")

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
        pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")

        return pulumi.get(self, "source_ofs")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the created direct.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Sumo Logic API URL.
        """
        return pulumi.get(self, "url")

