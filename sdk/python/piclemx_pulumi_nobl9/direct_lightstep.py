# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DirectLightstepArgs', 'DirectLightstep']

@pulumi.input_type
class DirectLightstepArgs:
    def __init__(__self__, *,
                 lightstep_organization: pulumi.Input[str],
                 lightstep_project: pulumi.Input[str],
                 project: pulumi.Input[str],
                 app_token: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 historical_data_retrieval: Optional[pulumi.Input['DirectLightstepHistoricalDataRetrievalArgs']] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input['DirectLightstepQueryDelayArgs']] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DirectLightstep resource.
        :param pulumi.Input[str] lightstep_organization: Organization name registered in Lightstep.
        :param pulumi.Input[str] lightstep_project: Name of the Lightstep project.
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] app_token: [required] | Lightstep App Token.
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input['DirectLightstepHistoricalDataRetrievalArgs'] historical_data_retrieval: [Replay configuration documentation](https://docs.nobl9.com/replay)
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input['DirectLightstepQueryDelayArgs'] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        :param pulumi.Input[str] url: Lightstep API URL. Nobl9 will use https://api.lightstep.com if empty.
        """
        pulumi.set(__self__, "lightstep_organization", lightstep_organization)
        pulumi.set(__self__, "lightstep_project", lightstep_project)
        pulumi.set(__self__, "project", project)
        if app_token is not None:
            pulumi.set(__self__, "app_token", app_token)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if historical_data_retrieval is not None:
            pulumi.set(__self__, "historical_data_retrieval", historical_data_retrieval)
        if log_collection_enabled is not None:
            pulumi.set(__self__, "log_collection_enabled", log_collection_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_delay is not None:
            pulumi.set(__self__, "query_delay", query_delay)
        if release_channel is not None:
            pulumi.set(__self__, "release_channel", release_channel)
        if source_ofs is not None:
            warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
            pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")
        if source_ofs is not None:
            pulumi.set(__self__, "source_ofs", source_ofs)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="lightstepOrganization")
    def lightstep_organization(self) -> pulumi.Input[str]:
        """
        Organization name registered in Lightstep.
        """
        return pulumi.get(self, "lightstep_organization")

    @lightstep_organization.setter
    def lightstep_organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "lightstep_organization", value)

    @property
    @pulumi.getter(name="lightstepProject")
    def lightstep_project(self) -> pulumi.Input[str]:
        """
        Name of the Lightstep project.
        """
        return pulumi.get(self, "lightstep_project")

    @lightstep_project.setter
    def lightstep_project(self, value: pulumi.Input[str]):
        pulumi.set(self, "lightstep_project", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="appToken")
    def app_token(self) -> Optional[pulumi.Input[str]]:
        """
        [required] | Lightstep App Token.
        """
        return pulumi.get(self, "app_token")

    @app_token.setter
    def app_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_token", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="historicalDataRetrieval")
    def historical_data_retrieval(self) -> Optional[pulumi.Input['DirectLightstepHistoricalDataRetrievalArgs']]:
        """
        [Replay configuration documentation](https://docs.nobl9.com/replay)
        """
        return pulumi.get(self, "historical_data_retrieval")

    @historical_data_retrieval.setter
    def historical_data_retrieval(self, value: Optional[pulumi.Input['DirectLightstepHistoricalDataRetrievalArgs']]):
        pulumi.set(self, "historical_data_retrieval", value)

    @property
    @pulumi.getter(name="logCollectionEnabled")
    def log_collection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        """
        return pulumi.get(self, "log_collection_enabled")

    @log_collection_enabled.setter
    def log_collection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_collection_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> Optional[pulumi.Input['DirectLightstepQueryDelayArgs']]:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @query_delay.setter
    def query_delay(self, value: Optional[pulumi.Input['DirectLightstepQueryDelayArgs']]):
        pulumi.set(self, "query_delay", value)

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Release channel of the created datasource [stable/beta]
        """
        return pulumi.get(self, "release_channel")

    @release_channel.setter
    def release_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_channel", value)

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
        pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")

        return pulumi.get(self, "source_ofs")

    @source_ofs.setter
    def source_ofs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ofs", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Lightstep API URL. Nobl9 will use https://api.lightstep.com if empty.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class _DirectLightstepState:
    def __init__(__self__, *,
                 app_token: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 historical_data_retrieval: Optional[pulumi.Input['DirectLightstepHistoricalDataRetrievalArgs']] = None,
                 lightstep_organization: Optional[pulumi.Input[str]] = None,
                 lightstep_project: Optional[pulumi.Input[str]] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input['DirectLightstepQueryDelayArgs']] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DirectLightstep resources.
        :param pulumi.Input[str] app_token: [required] | Lightstep App Token.
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input['DirectLightstepHistoricalDataRetrievalArgs'] historical_data_retrieval: [Replay configuration documentation](https://docs.nobl9.com/replay)
        :param pulumi.Input[str] lightstep_organization: Organization name registered in Lightstep.
        :param pulumi.Input[str] lightstep_project: Name of the Lightstep project.
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input['DirectLightstepQueryDelayArgs'] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        :param pulumi.Input[str] status: The status of the created direct.
        :param pulumi.Input[str] url: Lightstep API URL. Nobl9 will use https://api.lightstep.com if empty.
        """
        if app_token is not None:
            pulumi.set(__self__, "app_token", app_token)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if historical_data_retrieval is not None:
            pulumi.set(__self__, "historical_data_retrieval", historical_data_retrieval)
        if lightstep_organization is not None:
            pulumi.set(__self__, "lightstep_organization", lightstep_organization)
        if lightstep_project is not None:
            pulumi.set(__self__, "lightstep_project", lightstep_project)
        if log_collection_enabled is not None:
            pulumi.set(__self__, "log_collection_enabled", log_collection_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if query_delay is not None:
            pulumi.set(__self__, "query_delay", query_delay)
        if release_channel is not None:
            pulumi.set(__self__, "release_channel", release_channel)
        if source_ofs is not None:
            warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
            pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")
        if source_ofs is not None:
            pulumi.set(__self__, "source_ofs", source_ofs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="appToken")
    def app_token(self) -> Optional[pulumi.Input[str]]:
        """
        [required] | Lightstep App Token.
        """
        return pulumi.get(self, "app_token")

    @app_token.setter
    def app_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_token", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="historicalDataRetrieval")
    def historical_data_retrieval(self) -> Optional[pulumi.Input['DirectLightstepHistoricalDataRetrievalArgs']]:
        """
        [Replay configuration documentation](https://docs.nobl9.com/replay)
        """
        return pulumi.get(self, "historical_data_retrieval")

    @historical_data_retrieval.setter
    def historical_data_retrieval(self, value: Optional[pulumi.Input['DirectLightstepHistoricalDataRetrievalArgs']]):
        pulumi.set(self, "historical_data_retrieval", value)

    @property
    @pulumi.getter(name="lightstepOrganization")
    def lightstep_organization(self) -> Optional[pulumi.Input[str]]:
        """
        Organization name registered in Lightstep.
        """
        return pulumi.get(self, "lightstep_organization")

    @lightstep_organization.setter
    def lightstep_organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lightstep_organization", value)

    @property
    @pulumi.getter(name="lightstepProject")
    def lightstep_project(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Lightstep project.
        """
        return pulumi.get(self, "lightstep_project")

    @lightstep_project.setter
    def lightstep_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lightstep_project", value)

    @property
    @pulumi.getter(name="logCollectionEnabled")
    def log_collection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        """
        return pulumi.get(self, "log_collection_enabled")

    @log_collection_enabled.setter
    def log_collection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_collection_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> Optional[pulumi.Input['DirectLightstepQueryDelayArgs']]:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @query_delay.setter
    def query_delay(self, value: Optional[pulumi.Input['DirectLightstepQueryDelayArgs']]):
        pulumi.set(self, "query_delay", value)

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Release channel of the created datasource [stable/beta]
        """
        return pulumi.get(self, "release_channel")

    @release_channel.setter
    def release_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_channel", value)

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
        pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")

        return pulumi.get(self, "source_ofs")

    @source_ofs.setter
    def source_ofs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ofs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the created direct.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Lightstep API URL. Nobl9 will use https://api.lightstep.com if empty.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class DirectLightstep(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_token: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 historical_data_retrieval: Optional[pulumi.Input[pulumi.InputType['DirectLightstepHistoricalDataRetrievalArgs']]] = None,
                 lightstep_organization: Optional[pulumi.Input[str]] = None,
                 lightstep_project: Optional[pulumi.Input[str]] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input[pulumi.InputType['DirectLightstepQueryDelayArgs']]] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Lightstep is an observability platform that enables distributed tracing, that can be used to rapidly pinpoint the causes of failures and poor performance across the deeply complex dependencies among services, teams, and workloads in modern production systems. Nobl9 integration with Lightstep enables organizations to establish service level objectives from performance data captured through distributed traces in the Lightstep platform. Nobl9 connects to Lightstep for SLI measurement collection and comparison with SLO targets.

        For more information, refer to [Lightstep Direct | Nobl9 Documentation](https://docs.nobl9.com/Sources/lightstep#lightstep-direct).

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_nobl9 as nobl9

        test_lightstep = nobl9.DirectLightstep("test-lightstep",
            app_token="secret",
            description="desc",
            historical_data_retrieval=nobl9.DirectLightstepHistoricalDataRetrievalArgs(
                default_durations=[nobl9.DirectLightstepHistoricalDataRetrievalDefaultDurationArgs(
                    unit="Day",
                    value=0,
                )],
                max_durations=[nobl9.DirectLightstepHistoricalDataRetrievalMaxDurationArgs(
                    unit="Day",
                    value=30,
                )],
            ),
            lightstep_organization="acme",
            lightstep_project="project1",
            log_collection_enabled=True,
            project="terraform")
        ```
        ## Nobl9 Official Documentation

        https://docs.nobl9.com/

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_token: [required] | Lightstep App Token.
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[pulumi.InputType['DirectLightstepHistoricalDataRetrievalArgs']] historical_data_retrieval: [Replay configuration documentation](https://docs.nobl9.com/replay)
        :param pulumi.Input[str] lightstep_organization: Organization name registered in Lightstep.
        :param pulumi.Input[str] lightstep_project: Name of the Lightstep project.
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[pulumi.InputType['DirectLightstepQueryDelayArgs']] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        :param pulumi.Input[str] url: Lightstep API URL. Nobl9 will use https://api.lightstep.com if empty.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DirectLightstepArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Lightstep is an observability platform that enables distributed tracing, that can be used to rapidly pinpoint the causes of failures and poor performance across the deeply complex dependencies among services, teams, and workloads in modern production systems. Nobl9 integration with Lightstep enables organizations to establish service level objectives from performance data captured through distributed traces in the Lightstep platform. Nobl9 connects to Lightstep for SLI measurement collection and comparison with SLO targets.

        For more information, refer to [Lightstep Direct | Nobl9 Documentation](https://docs.nobl9.com/Sources/lightstep#lightstep-direct).

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_nobl9 as nobl9

        test_lightstep = nobl9.DirectLightstep("test-lightstep",
            app_token="secret",
            description="desc",
            historical_data_retrieval=nobl9.DirectLightstepHistoricalDataRetrievalArgs(
                default_durations=[nobl9.DirectLightstepHistoricalDataRetrievalDefaultDurationArgs(
                    unit="Day",
                    value=0,
                )],
                max_durations=[nobl9.DirectLightstepHistoricalDataRetrievalMaxDurationArgs(
                    unit="Day",
                    value=30,
                )],
            ),
            lightstep_organization="acme",
            lightstep_project="project1",
            log_collection_enabled=True,
            project="terraform")
        ```
        ## Nobl9 Official Documentation

        https://docs.nobl9.com/

        :param str resource_name: The name of the resource.
        :param DirectLightstepArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DirectLightstepArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_token: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 historical_data_retrieval: Optional[pulumi.Input[pulumi.InputType['DirectLightstepHistoricalDataRetrievalArgs']]] = None,
                 lightstep_organization: Optional[pulumi.Input[str]] = None,
                 lightstep_project: Optional[pulumi.Input[str]] = None,
                 log_collection_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_delay: Optional[pulumi.Input[pulumi.InputType['DirectLightstepQueryDelayArgs']]] = None,
                 release_channel: Optional[pulumi.Input[str]] = None,
                 source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DirectLightstepArgs.__new__(DirectLightstepArgs)

            __props__.__dict__["app_token"] = None if app_token is None else pulumi.Output.secret(app_token)
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["historical_data_retrieval"] = historical_data_retrieval
            if lightstep_organization is None and not opts.urn:
                raise TypeError("Missing required property 'lightstep_organization'")
            __props__.__dict__["lightstep_organization"] = lightstep_organization
            if lightstep_project is None and not opts.urn:
                raise TypeError("Missing required property 'lightstep_project'")
            __props__.__dict__["lightstep_project"] = lightstep_project
            __props__.__dict__["log_collection_enabled"] = log_collection_enabled
            __props__.__dict__["name"] = name
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["query_delay"] = query_delay
            __props__.__dict__["release_channel"] = release_channel
            __props__.__dict__["source_ofs"] = source_ofs
            __props__.__dict__["url"] = url
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["appToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(DirectLightstep, __self__).__init__(
            'nobl9:index/directLightstep:DirectLightstep',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_token: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            historical_data_retrieval: Optional[pulumi.Input[pulumi.InputType['DirectLightstepHistoricalDataRetrievalArgs']]] = None,
            lightstep_organization: Optional[pulumi.Input[str]] = None,
            lightstep_project: Optional[pulumi.Input[str]] = None,
            log_collection_enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            query_delay: Optional[pulumi.Input[pulumi.InputType['DirectLightstepQueryDelayArgs']]] = None,
            release_channel: Optional[pulumi.Input[str]] = None,
            source_ofs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'DirectLightstep':
        """
        Get an existing DirectLightstep resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_token: [required] | Lightstep App Token.
        :param pulumi.Input[str] description: Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[pulumi.InputType['DirectLightstepHistoricalDataRetrievalArgs']] historical_data_retrieval: [Replay configuration documentation](https://docs.nobl9.com/replay)
        :param pulumi.Input[str] lightstep_organization: Organization name registered in Lightstep.
        :param pulumi.Input[str] lightstep_project: Name of the Lightstep project.
        :param pulumi.Input[bool] log_collection_enabled: [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        :param pulumi.Input[str] name: Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project: Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[pulumi.InputType['DirectLightstepQueryDelayArgs']] query_delay: [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        :param pulumi.Input[str] release_channel: Release channel of the created datasource [stable/beta]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_ofs: This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        :param pulumi.Input[str] status: The status of the created direct.
        :param pulumi.Input[str] url: Lightstep API URL. Nobl9 will use https://api.lightstep.com if empty.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DirectLightstepState.__new__(_DirectLightstepState)

        __props__.__dict__["app_token"] = app_token
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["historical_data_retrieval"] = historical_data_retrieval
        __props__.__dict__["lightstep_organization"] = lightstep_organization
        __props__.__dict__["lightstep_project"] = lightstep_project
        __props__.__dict__["log_collection_enabled"] = log_collection_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["query_delay"] = query_delay
        __props__.__dict__["release_channel"] = release_channel
        __props__.__dict__["source_ofs"] = source_ofs
        __props__.__dict__["status"] = status
        __props__.__dict__["url"] = url
        return DirectLightstep(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appToken")
    def app_token(self) -> pulumi.Output[str]:
        """
        [required] | Lightstep App Token.
        """
        return pulumi.get(self, "app_token")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="historicalDataRetrieval")
    def historical_data_retrieval(self) -> pulumi.Output['outputs.DirectLightstepHistoricalDataRetrieval']:
        """
        [Replay configuration documentation](https://docs.nobl9.com/replay)
        """
        return pulumi.get(self, "historical_data_retrieval")

    @property
    @pulumi.getter(name="lightstepOrganization")
    def lightstep_organization(self) -> pulumi.Output[str]:
        """
        Organization name registered in Lightstep.
        """
        return pulumi.get(self, "lightstep_organization")

    @property
    @pulumi.getter(name="lightstepProject")
    def lightstep_project(self) -> pulumi.Output[str]:
        """
        Name of the Lightstep project.
        """
        return pulumi.get(self, "lightstep_project")

    @property
    @pulumi.getter(name="logCollectionEnabled")
    def log_collection_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        [Logs documentation](https://docs.nobl9.com/Features/SLO_troubleshooting/event-logs)
        """
        return pulumi.get(self, "log_collection_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="queryDelay")
    def query_delay(self) -> pulumi.Output['outputs.DirectLightstepQueryDelay']:
        """
        [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
        """
        return pulumi.get(self, "query_delay")

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> pulumi.Output[str]:
        """
        Release channel of the created datasource [stable/beta]
        """
        return pulumi.get(self, "release_channel")

    @property
    @pulumi.getter(name="sourceOfs")
    def source_ofs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        This value indicated whether the field was a source of metrics and/or services. 'source_of' is deprecated and not used anywhere; however, it's kept for backward compatibility.
        """
        warnings.warn("""'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""", DeprecationWarning)
        pulumi.log.warn("""source_ofs is deprecated: 'source_of' is deprecated and not used anywhere. You can safely remove it from your configuration file.""")

        return pulumi.get(self, "source_ofs")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the created direct.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[Optional[str]]:
        """
        Lightstep API URL. Nobl9 will use https://api.lightstep.com if empty.
        """
        return pulumi.get(self, "url")

