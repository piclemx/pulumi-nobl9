# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AgentAmazonPrometheusConfigArgs',
    'AgentAppdynamicsConfigArgs',
    'AgentAzureMonitorConfigArgs',
    'AgentBigqueryConfigArgs',
    'AgentCloudwatchConfigArgs',
    'AgentDatadogConfigArgs',
    'AgentDynatraceConfigArgs',
    'AgentElasticsearchConfigArgs',
    'AgentGcmConfigArgs',
    'AgentGrafanaLokiConfigArgs',
    'AgentGraphiteConfigArgs',
    'AgentHistoricalDataRetrievalArgs',
    'AgentHistoricalDataRetrievalDefaultDurationArgs',
    'AgentHistoricalDataRetrievalMaxDurationArgs',
    'AgentHoneycombConfigArgs',
    'AgentInfluxdbConfigArgs',
    'AgentInstanaConfigArgs',
    'AgentLightstepConfigArgs',
    'AgentNewrelicConfigArgs',
    'AgentOpentsdbConfigArgs',
    'AgentPingdomConfigArgs',
    'AgentPrometheusConfigArgs',
    'AgentQueryDelayArgs',
    'AgentRedshiftConfigArgs',
    'AgentSplunkConfigArgs',
    'AgentSplunkObservabilityConfigArgs',
    'AgentSumologicConfigArgs',
    'AgentThousandeyesConfigArgs',
    'AlertMethodPagerdutySendResolutionArgs',
    'AlertPolicyAlertMethodArgs',
    'AlertPolicyConditionArgs',
    'DirectAppdynamicsHistoricalDataRetrievalArgs',
    'DirectAppdynamicsHistoricalDataRetrievalDefaultDurationArgs',
    'DirectAppdynamicsHistoricalDataRetrievalMaxDurationArgs',
    'DirectAppdynamicsQueryDelayArgs',
    'DirectAzureMonitorHistoricalDataRetrievalArgs',
    'DirectAzureMonitorHistoricalDataRetrievalDefaultDurationArgs',
    'DirectAzureMonitorHistoricalDataRetrievalMaxDurationArgs',
    'DirectAzureMonitorQueryDelayArgs',
    'DirectBigqueryQueryDelayArgs',
    'DirectCloudwatchHistoricalDataRetrievalArgs',
    'DirectCloudwatchHistoricalDataRetrievalDefaultDurationArgs',
    'DirectCloudwatchHistoricalDataRetrievalMaxDurationArgs',
    'DirectCloudwatchQueryDelayArgs',
    'DirectDatadogHistoricalDataRetrievalArgs',
    'DirectDatadogHistoricalDataRetrievalDefaultDurationArgs',
    'DirectDatadogHistoricalDataRetrievalMaxDurationArgs',
    'DirectDatadogQueryDelayArgs',
    'DirectDynatraceHistoricalDataRetrievalArgs',
    'DirectDynatraceHistoricalDataRetrievalDefaultDurationArgs',
    'DirectDynatraceHistoricalDataRetrievalMaxDurationArgs',
    'DirectDynatraceQueryDelayArgs',
    'DirectGcmQueryDelayArgs',
    'DirectHoneycombHistoricalDataRetrievalArgs',
    'DirectHoneycombHistoricalDataRetrievalDefaultDurationArgs',
    'DirectHoneycombHistoricalDataRetrievalMaxDurationArgs',
    'DirectHoneycombQueryDelayArgs',
    'DirectInfluxdbQueryDelayArgs',
    'DirectInstanaQueryDelayArgs',
    'DirectLightstepHistoricalDataRetrievalArgs',
    'DirectLightstepHistoricalDataRetrievalDefaultDurationArgs',
    'DirectLightstepHistoricalDataRetrievalMaxDurationArgs',
    'DirectLightstepQueryDelayArgs',
    'DirectNewrelicHistoricalDataRetrievalArgs',
    'DirectNewrelicHistoricalDataRetrievalDefaultDurationArgs',
    'DirectNewrelicHistoricalDataRetrievalMaxDurationArgs',
    'DirectNewrelicQueryDelayArgs',
    'DirectPingdomQueryDelayArgs',
    'DirectRedshiftQueryDelayArgs',
    'DirectSplunkHistoricalDataRetrievalArgs',
    'DirectSplunkHistoricalDataRetrievalDefaultDurationArgs',
    'DirectSplunkHistoricalDataRetrievalMaxDurationArgs',
    'DirectSplunkObservabilityQueryDelayArgs',
    'DirectSplunkQueryDelayArgs',
    'DirectSumologicQueryDelayArgs',
    'DirectThousandeyesQueryDelayArgs',
    'ProjectLabelArgs',
    'ServiceLabelArgs',
    'SloAnomalyConfigArgs',
    'SloAnomalyConfigNoDataArgs',
    'SloAnomalyConfigNoDataAlertMethodArgs',
    'SloAttachmentArgs',
    'SloCompositeArgs',
    'SloCompositeBurnRateConditionArgs',
    'SloIndicatorArgs',
    'SloLabelArgs',
    'SloObjectiveArgs',
    'SloObjectiveCountMetricArgs',
    'SloObjectiveCountMetricBadArgs',
    'SloObjectiveCountMetricBadAmazonPrometheusArgs',
    'SloObjectiveCountMetricBadAppdynamicArgs',
    'SloObjectiveCountMetricBadAzureMonitorArgs',
    'SloObjectiveCountMetricBadAzureMonitorDimensionArgs',
    'SloObjectiveCountMetricBadAzureMonitorWorkspaceArgs',
    'SloObjectiveCountMetricBadBigqueryArgs',
    'SloObjectiveCountMetricBadCloudwatchArgs',
    'SloObjectiveCountMetricBadCloudwatchDimensionArgs',
    'SloObjectiveCountMetricBadDatadogArgs',
    'SloObjectiveCountMetricBadDynatraceArgs',
    'SloObjectiveCountMetricBadElasticsearchArgs',
    'SloObjectiveCountMetricBadGcmArgs',
    'SloObjectiveCountMetricBadGrafanaLokiArgs',
    'SloObjectiveCountMetricBadGraphiteArgs',
    'SloObjectiveCountMetricBadHoneycombArgs',
    'SloObjectiveCountMetricBadInfluxdbArgs',
    'SloObjectiveCountMetricBadInstanaArgs',
    'SloObjectiveCountMetricBadInstanaApplicationArgs',
    'SloObjectiveCountMetricBadInstanaApplicationGroupByArgs',
    'SloObjectiveCountMetricBadInstanaInfrastructureArgs',
    'SloObjectiveCountMetricBadLightstepArgs',
    'SloObjectiveCountMetricBadNewrelicArgs',
    'SloObjectiveCountMetricBadOpentsdbArgs',
    'SloObjectiveCountMetricBadPingdomArgs',
    'SloObjectiveCountMetricBadPrometheusArgs',
    'SloObjectiveCountMetricBadRedshiftArgs',
    'SloObjectiveCountMetricBadSplunkArgs',
    'SloObjectiveCountMetricBadSplunkObservabilityArgs',
    'SloObjectiveCountMetricBadSumologicArgs',
    'SloObjectiveCountMetricBadThousandeyeArgs',
    'SloObjectiveCountMetricGoodArgs',
    'SloObjectiveCountMetricGoodAmazonPrometheusArgs',
    'SloObjectiveCountMetricGoodAppdynamicArgs',
    'SloObjectiveCountMetricGoodAzureMonitorArgs',
    'SloObjectiveCountMetricGoodAzureMonitorDimensionArgs',
    'SloObjectiveCountMetricGoodAzureMonitorWorkspaceArgs',
    'SloObjectiveCountMetricGoodBigqueryArgs',
    'SloObjectiveCountMetricGoodCloudwatchArgs',
    'SloObjectiveCountMetricGoodCloudwatchDimensionArgs',
    'SloObjectiveCountMetricGoodDatadogArgs',
    'SloObjectiveCountMetricGoodDynatraceArgs',
    'SloObjectiveCountMetricGoodElasticsearchArgs',
    'SloObjectiveCountMetricGoodGcmArgs',
    'SloObjectiveCountMetricGoodGrafanaLokiArgs',
    'SloObjectiveCountMetricGoodGraphiteArgs',
    'SloObjectiveCountMetricGoodHoneycombArgs',
    'SloObjectiveCountMetricGoodInfluxdbArgs',
    'SloObjectiveCountMetricGoodInstanaArgs',
    'SloObjectiveCountMetricGoodInstanaApplicationArgs',
    'SloObjectiveCountMetricGoodInstanaApplicationGroupByArgs',
    'SloObjectiveCountMetricGoodInstanaInfrastructureArgs',
    'SloObjectiveCountMetricGoodLightstepArgs',
    'SloObjectiveCountMetricGoodNewrelicArgs',
    'SloObjectiveCountMetricGoodOpentsdbArgs',
    'SloObjectiveCountMetricGoodPingdomArgs',
    'SloObjectiveCountMetricGoodPrometheusArgs',
    'SloObjectiveCountMetricGoodRedshiftArgs',
    'SloObjectiveCountMetricGoodSplunkArgs',
    'SloObjectiveCountMetricGoodSplunkObservabilityArgs',
    'SloObjectiveCountMetricGoodSumologicArgs',
    'SloObjectiveCountMetricGoodThousandeyeArgs',
    'SloObjectiveCountMetricTotalArgs',
    'SloObjectiveCountMetricTotalAmazonPrometheusArgs',
    'SloObjectiveCountMetricTotalAppdynamicArgs',
    'SloObjectiveCountMetricTotalAzureMonitorArgs',
    'SloObjectiveCountMetricTotalAzureMonitorDimensionArgs',
    'SloObjectiveCountMetricTotalAzureMonitorWorkspaceArgs',
    'SloObjectiveCountMetricTotalBigqueryArgs',
    'SloObjectiveCountMetricTotalCloudwatchArgs',
    'SloObjectiveCountMetricTotalCloudwatchDimensionArgs',
    'SloObjectiveCountMetricTotalDatadogArgs',
    'SloObjectiveCountMetricTotalDynatraceArgs',
    'SloObjectiveCountMetricTotalElasticsearchArgs',
    'SloObjectiveCountMetricTotalGcmArgs',
    'SloObjectiveCountMetricTotalGrafanaLokiArgs',
    'SloObjectiveCountMetricTotalGraphiteArgs',
    'SloObjectiveCountMetricTotalHoneycombArgs',
    'SloObjectiveCountMetricTotalInfluxdbArgs',
    'SloObjectiveCountMetricTotalInstanaArgs',
    'SloObjectiveCountMetricTotalInstanaApplicationArgs',
    'SloObjectiveCountMetricTotalInstanaApplicationGroupByArgs',
    'SloObjectiveCountMetricTotalInstanaInfrastructureArgs',
    'SloObjectiveCountMetricTotalLightstepArgs',
    'SloObjectiveCountMetricTotalNewrelicArgs',
    'SloObjectiveCountMetricTotalOpentsdbArgs',
    'SloObjectiveCountMetricTotalPingdomArgs',
    'SloObjectiveCountMetricTotalPrometheusArgs',
    'SloObjectiveCountMetricTotalRedshiftArgs',
    'SloObjectiveCountMetricTotalSplunkArgs',
    'SloObjectiveCountMetricTotalSplunkObservabilityArgs',
    'SloObjectiveCountMetricTotalSumologicArgs',
    'SloObjectiveCountMetricTotalThousandeyeArgs',
    'SloObjectiveRawMetricArgs',
    'SloObjectiveRawMetricQueryArgs',
    'SloObjectiveRawMetricQueryAmazonPrometheusArgs',
    'SloObjectiveRawMetricQueryAppdynamicArgs',
    'SloObjectiveRawMetricQueryAzureMonitorArgs',
    'SloObjectiveRawMetricQueryAzureMonitorDimensionArgs',
    'SloObjectiveRawMetricQueryAzureMonitorWorkspaceArgs',
    'SloObjectiveRawMetricQueryBigqueryArgs',
    'SloObjectiveRawMetricQueryCloudwatchArgs',
    'SloObjectiveRawMetricQueryCloudwatchDimensionArgs',
    'SloObjectiveRawMetricQueryDatadogArgs',
    'SloObjectiveRawMetricQueryDynatraceArgs',
    'SloObjectiveRawMetricQueryElasticsearchArgs',
    'SloObjectiveRawMetricQueryGcmArgs',
    'SloObjectiveRawMetricQueryGrafanaLokiArgs',
    'SloObjectiveRawMetricQueryGraphiteArgs',
    'SloObjectiveRawMetricQueryHoneycombArgs',
    'SloObjectiveRawMetricQueryInfluxdbArgs',
    'SloObjectiveRawMetricQueryInstanaArgs',
    'SloObjectiveRawMetricQueryInstanaApplicationArgs',
    'SloObjectiveRawMetricQueryInstanaApplicationGroupByArgs',
    'SloObjectiveRawMetricQueryInstanaInfrastructureArgs',
    'SloObjectiveRawMetricQueryLightstepArgs',
    'SloObjectiveRawMetricQueryNewrelicArgs',
    'SloObjectiveRawMetricQueryOpentsdbArgs',
    'SloObjectiveRawMetricQueryPingdomArgs',
    'SloObjectiveRawMetricQueryPrometheusArgs',
    'SloObjectiveRawMetricQueryRedshiftArgs',
    'SloObjectiveRawMetricQuerySplunkArgs',
    'SloObjectiveRawMetricQuerySplunkObservabilityArgs',
    'SloObjectiveRawMetricQuerySumologicArgs',
    'SloObjectiveRawMetricQueryThousandeyeArgs',
    'SloTimeWindowArgs',
    'SloTimeWindowCalendarArgs',
]

@pulumi.input_type
class AgentAmazonPrometheusConfigArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] region: AWS region e.g., eu-central-1
        :param pulumi.Input[str] url: Base URL to Amazon Prometheus server.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        AWS region e.g., eu-central-1
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Base URL to Amazon Prometheus server.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentAppdynamicsConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: Base URL to the AppDynamics Controller.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Base URL to the AppDynamics Controller.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentAzureMonitorConfigArgs:
    def __init__(__self__, *,
                 tenant_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] tenant_id: Azure Tenant Id.
        """
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        Azure Tenant Id.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class AgentBigqueryConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class AgentCloudwatchConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class AgentDatadogConfigArgs:
    def __init__(__self__, *,
                 site: pulumi.Input[str]):
        """
        :param pulumi.Input[str] site: `com` or `eu`, Datadog SaaS instance, which corresponds to one of Datadog's two locations (https://www.datadoghq.com/ in the U.S. or https://datadoghq.eu/ in the European Union)
        """
        pulumi.set(__self__, "site", site)

    @property
    @pulumi.getter
    def site(self) -> pulumi.Input[str]:
        """
        `com` or `eu`, Datadog SaaS instance, which corresponds to one of Datadog's two locations (https://www.datadoghq.com/ in the U.S. or https://datadoghq.eu/ in the European Union)
        """
        return pulumi.get(self, "site")

    @site.setter
    def site(self, value: pulumi.Input[str]):
        pulumi.set(self, "site", value)


@pulumi.input_type
class AgentDynatraceConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: Dynatrace API URL.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Dynatrace API URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentElasticsearchConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: API URL endpoint to the Elasticsearch's instance.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        API URL endpoint to the Elasticsearch's instance.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentGcmConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class AgentGrafanaLokiConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: API URL endpoint to the Grafana Loki instance.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        API URL endpoint to the Grafana Loki instance.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentGraphiteConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: API URL endpoint to the Graphite's instance.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        API URL endpoint to the Graphite's instance.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentHistoricalDataRetrievalArgs:
    def __init__(__self__, *,
                 default_durations: pulumi.Input[Sequence[pulumi.Input['AgentHistoricalDataRetrievalDefaultDurationArgs']]],
                 max_durations: pulumi.Input[Sequence[pulumi.Input['AgentHistoricalDataRetrievalMaxDurationArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AgentHistoricalDataRetrievalDefaultDurationArgs']]] default_durations: Used by default for any SLOs connected to this data source.
        :param pulumi.Input[Sequence[pulumi.Input['AgentHistoricalDataRetrievalMaxDurationArgs']]] max_durations: Defines the maximum period for which data can be retrieved.
        """
        pulumi.set(__self__, "default_durations", default_durations)
        pulumi.set(__self__, "max_durations", max_durations)

    @property
    @pulumi.getter(name="defaultDurations")
    def default_durations(self) -> pulumi.Input[Sequence[pulumi.Input['AgentHistoricalDataRetrievalDefaultDurationArgs']]]:
        """
        Used by default for any SLOs connected to this data source.
        """
        return pulumi.get(self, "default_durations")

    @default_durations.setter
    def default_durations(self, value: pulumi.Input[Sequence[pulumi.Input['AgentHistoricalDataRetrievalDefaultDurationArgs']]]):
        pulumi.set(self, "default_durations", value)

    @property
    @pulumi.getter(name="maxDurations")
    def max_durations(self) -> pulumi.Input[Sequence[pulumi.Input['AgentHistoricalDataRetrievalMaxDurationArgs']]]:
        """
        Defines the maximum period for which data can be retrieved.
        """
        return pulumi.get(self, "max_durations")

    @max_durations.setter
    def max_durations(self, value: pulumi.Input[Sequence[pulumi.Input['AgentHistoricalDataRetrievalMaxDurationArgs']]]):
        pulumi.set(self, "max_durations", value)


@pulumi.input_type
class AgentHistoricalDataRetrievalDefaultDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AgentHistoricalDataRetrievalMaxDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AgentHoneycombConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class AgentInfluxdbConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: API URL endpoint to the InfluxDB's instance.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        API URL endpoint to the InfluxDB's instance.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentInstanaConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: API URL endpoint to the InfluxDB's instance.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        API URL endpoint to the InfluxDB's instance.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentLightstepConfigArgs:
    def __init__(__self__, *,
                 organization: pulumi.Input[str],
                 project: pulumi.Input[str],
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] organization: Organization name registered in Lightstep.
        :param pulumi.Input[str] project: Name of the Lightstep project.
        :param pulumi.Input[str] url: Lightstep API URL. Nobl9 will use https://api.lightstep.com if empty.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "project", project)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        Organization name registered in Lightstep.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        Name of the Lightstep project.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Lightstep API URL. Nobl9 will use https://api.lightstep.com if empty.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentNewrelicConfigArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] account_id: ID number assigned to the New Relic user account.
        """
        pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        ID number assigned to the New Relic user account.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)


@pulumi.input_type
class AgentOpentsdbConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: OpenTSDB cluster URL.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        OpenTSDB cluster URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentPingdomConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class AgentPrometheusConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: Base URL to Prometheus server.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Base URL to Prometheus server.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AgentRedshiftConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class AgentSplunkConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: Base API URL to the Splunk Search app.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Base API URL to the Splunk Search app.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentSplunkObservabilityConfigArgs:
    def __init__(__self__, *,
                 realm: pulumi.Input[str]):
        """
        :param pulumi.Input[str] realm: SplunkObservability Realm.
        """
        pulumi.set(__self__, "realm", realm)

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Input[str]:
        """
        SplunkObservability Realm.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm", value)


@pulumi.input_type
class AgentSumologicConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: Sumo Logic API URL.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Sumo Logic API URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AgentThousandeyesConfigArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class AlertMethodPagerdutySendResolutionArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] message: A message that will be attached to your 'all clear' notification.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A message that will be attached to your 'all clear' notification.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class AlertPolicyAlertMethodArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 project: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the previously defined alert method.
        :param pulumi.Input[str] project: Project name the Alert Method is in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). If not defined, Nobl9 returns a default value for this field.
        """
        pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the previously defined alert method.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Project name the Alert Method is in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). If not defined, Nobl9 returns a default value for this field.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class AlertPolicyConditionArgs:
    def __init__(__self__, *,
                 measurement: pulumi.Input[str],
                 alerting_window: Optional[pulumi.Input[str]] = None,
                 lasts_for: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None,
                 value_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] measurement: One of `timeToBurnBudget` | `timeToBurnEntireBudget` | `burnRate` | `burnedBudget`.
        :param pulumi.Input[str] alerting_window: Duration over which the burn rate is evaluated.
        :param pulumi.Input[str] lasts_for: Indicates how long a given condition needs to be valid to mark the condition as true.
        :param pulumi.Input[float] value: For `averageBurnRate`, it indicates how fast the error budget is burning. For `burnedBudget`, it tells how much error budget is already burned.
        :param pulumi.Input[str] value_string: Used with `timeToBurnBudget` or `timeToBurnEntireBudget`, indicates when the budget would be exhausted. The expected value is a string in time duration string format.
        """
        pulumi.set(__self__, "measurement", measurement)
        if alerting_window is not None:
            pulumi.set(__self__, "alerting_window", alerting_window)
        if lasts_for is not None:
            pulumi.set(__self__, "lasts_for", lasts_for)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter
    def measurement(self) -> pulumi.Input[str]:
        """
        One of `timeToBurnBudget` | `timeToBurnEntireBudget` | `burnRate` | `burnedBudget`.
        """
        return pulumi.get(self, "measurement")

    @measurement.setter
    def measurement(self, value: pulumi.Input[str]):
        pulumi.set(self, "measurement", value)

    @property
    @pulumi.getter(name="alertingWindow")
    def alerting_window(self) -> Optional[pulumi.Input[str]]:
        """
        Duration over which the burn rate is evaluated.
        """
        return pulumi.get(self, "alerting_window")

    @alerting_window.setter
    def alerting_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alerting_window", value)

    @property
    @pulumi.getter(name="lastsFor")
    def lasts_for(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates how long a given condition needs to be valid to mark the condition as true.
        """
        return pulumi.get(self, "lasts_for")

    @lasts_for.setter
    def lasts_for(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lasts_for", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        """
        For `averageBurnRate`, it indicates how fast the error budget is burning. For `burnedBudget`, it tells how much error budget is already burned.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[pulumi.Input[str]]:
        """
        Used with `timeToBurnBudget` or `timeToBurnEntireBudget`, indicates when the budget would be exhausted. The expected value is a string in time duration string format.
        """
        return pulumi.get(self, "value_string")

    @value_string.setter
    def value_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_string", value)


@pulumi.input_type
class DirectAppdynamicsHistoricalDataRetrievalArgs:
    def __init__(__self__, *,
                 default_durations: pulumi.Input[Sequence[pulumi.Input['DirectAppdynamicsHistoricalDataRetrievalDefaultDurationArgs']]],
                 max_durations: pulumi.Input[Sequence[pulumi.Input['DirectAppdynamicsHistoricalDataRetrievalMaxDurationArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DirectAppdynamicsHistoricalDataRetrievalDefaultDurationArgs']]] default_durations: Used by default for any SLOs connected to this data source.
        :param pulumi.Input[Sequence[pulumi.Input['DirectAppdynamicsHistoricalDataRetrievalMaxDurationArgs']]] max_durations: Defines the maximum period for which data can be retrieved.
        """
        pulumi.set(__self__, "default_durations", default_durations)
        pulumi.set(__self__, "max_durations", max_durations)

    @property
    @pulumi.getter(name="defaultDurations")
    def default_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectAppdynamicsHistoricalDataRetrievalDefaultDurationArgs']]]:
        """
        Used by default for any SLOs connected to this data source.
        """
        return pulumi.get(self, "default_durations")

    @default_durations.setter
    def default_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectAppdynamicsHistoricalDataRetrievalDefaultDurationArgs']]]):
        pulumi.set(self, "default_durations", value)

    @property
    @pulumi.getter(name="maxDurations")
    def max_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectAppdynamicsHistoricalDataRetrievalMaxDurationArgs']]]:
        """
        Defines the maximum period for which data can be retrieved.
        """
        return pulumi.get(self, "max_durations")

    @max_durations.setter
    def max_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectAppdynamicsHistoricalDataRetrievalMaxDurationArgs']]]):
        pulumi.set(self, "max_durations", value)


@pulumi.input_type
class DirectAppdynamicsHistoricalDataRetrievalDefaultDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectAppdynamicsHistoricalDataRetrievalMaxDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectAppdynamicsQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectAzureMonitorHistoricalDataRetrievalArgs:
    def __init__(__self__, *,
                 default_durations: pulumi.Input[Sequence[pulumi.Input['DirectAzureMonitorHistoricalDataRetrievalDefaultDurationArgs']]],
                 max_durations: pulumi.Input[Sequence[pulumi.Input['DirectAzureMonitorHistoricalDataRetrievalMaxDurationArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DirectAzureMonitorHistoricalDataRetrievalDefaultDurationArgs']]] default_durations: Used by default for any SLOs connected to this data source.
        :param pulumi.Input[Sequence[pulumi.Input['DirectAzureMonitorHistoricalDataRetrievalMaxDurationArgs']]] max_durations: Defines the maximum period for which data can be retrieved.
        """
        pulumi.set(__self__, "default_durations", default_durations)
        pulumi.set(__self__, "max_durations", max_durations)

    @property
    @pulumi.getter(name="defaultDurations")
    def default_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectAzureMonitorHistoricalDataRetrievalDefaultDurationArgs']]]:
        """
        Used by default for any SLOs connected to this data source.
        """
        return pulumi.get(self, "default_durations")

    @default_durations.setter
    def default_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectAzureMonitorHistoricalDataRetrievalDefaultDurationArgs']]]):
        pulumi.set(self, "default_durations", value)

    @property
    @pulumi.getter(name="maxDurations")
    def max_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectAzureMonitorHistoricalDataRetrievalMaxDurationArgs']]]:
        """
        Defines the maximum period for which data can be retrieved.
        """
        return pulumi.get(self, "max_durations")

    @max_durations.setter
    def max_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectAzureMonitorHistoricalDataRetrievalMaxDurationArgs']]]):
        pulumi.set(self, "max_durations", value)


@pulumi.input_type
class DirectAzureMonitorHistoricalDataRetrievalDefaultDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectAzureMonitorHistoricalDataRetrievalMaxDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectAzureMonitorQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectBigqueryQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectCloudwatchHistoricalDataRetrievalArgs:
    def __init__(__self__, *,
                 default_durations: pulumi.Input[Sequence[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalDefaultDurationArgs']]],
                 max_durations: pulumi.Input[Sequence[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalMaxDurationArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalDefaultDurationArgs']]] default_durations: Used by default for any SLOs connected to this data source.
        :param pulumi.Input[Sequence[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalMaxDurationArgs']]] max_durations: Defines the maximum period for which data can be retrieved.
        """
        pulumi.set(__self__, "default_durations", default_durations)
        pulumi.set(__self__, "max_durations", max_durations)

    @property
    @pulumi.getter(name="defaultDurations")
    def default_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalDefaultDurationArgs']]]:
        """
        Used by default for any SLOs connected to this data source.
        """
        return pulumi.get(self, "default_durations")

    @default_durations.setter
    def default_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalDefaultDurationArgs']]]):
        pulumi.set(self, "default_durations", value)

    @property
    @pulumi.getter(name="maxDurations")
    def max_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalMaxDurationArgs']]]:
        """
        Defines the maximum period for which data can be retrieved.
        """
        return pulumi.get(self, "max_durations")

    @max_durations.setter
    def max_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectCloudwatchHistoricalDataRetrievalMaxDurationArgs']]]):
        pulumi.set(self, "max_durations", value)


@pulumi.input_type
class DirectCloudwatchHistoricalDataRetrievalDefaultDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectCloudwatchHistoricalDataRetrievalMaxDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectCloudwatchQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectDatadogHistoricalDataRetrievalArgs:
    def __init__(__self__, *,
                 default_durations: pulumi.Input[Sequence[pulumi.Input['DirectDatadogHistoricalDataRetrievalDefaultDurationArgs']]],
                 max_durations: pulumi.Input[Sequence[pulumi.Input['DirectDatadogHistoricalDataRetrievalMaxDurationArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DirectDatadogHistoricalDataRetrievalDefaultDurationArgs']]] default_durations: Used by default for any SLOs connected to this data source.
        :param pulumi.Input[Sequence[pulumi.Input['DirectDatadogHistoricalDataRetrievalMaxDurationArgs']]] max_durations: Defines the maximum period for which data can be retrieved.
        """
        pulumi.set(__self__, "default_durations", default_durations)
        pulumi.set(__self__, "max_durations", max_durations)

    @property
    @pulumi.getter(name="defaultDurations")
    def default_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectDatadogHistoricalDataRetrievalDefaultDurationArgs']]]:
        """
        Used by default for any SLOs connected to this data source.
        """
        return pulumi.get(self, "default_durations")

    @default_durations.setter
    def default_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectDatadogHistoricalDataRetrievalDefaultDurationArgs']]]):
        pulumi.set(self, "default_durations", value)

    @property
    @pulumi.getter(name="maxDurations")
    def max_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectDatadogHistoricalDataRetrievalMaxDurationArgs']]]:
        """
        Defines the maximum period for which data can be retrieved.
        """
        return pulumi.get(self, "max_durations")

    @max_durations.setter
    def max_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectDatadogHistoricalDataRetrievalMaxDurationArgs']]]):
        pulumi.set(self, "max_durations", value)


@pulumi.input_type
class DirectDatadogHistoricalDataRetrievalDefaultDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectDatadogHistoricalDataRetrievalMaxDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectDatadogQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectDynatraceHistoricalDataRetrievalArgs:
    def __init__(__self__, *,
                 default_durations: pulumi.Input[Sequence[pulumi.Input['DirectDynatraceHistoricalDataRetrievalDefaultDurationArgs']]],
                 max_durations: pulumi.Input[Sequence[pulumi.Input['DirectDynatraceHistoricalDataRetrievalMaxDurationArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DirectDynatraceHistoricalDataRetrievalDefaultDurationArgs']]] default_durations: Used by default for any SLOs connected to this data source.
        :param pulumi.Input[Sequence[pulumi.Input['DirectDynatraceHistoricalDataRetrievalMaxDurationArgs']]] max_durations: Defines the maximum period for which data can be retrieved.
        """
        pulumi.set(__self__, "default_durations", default_durations)
        pulumi.set(__self__, "max_durations", max_durations)

    @property
    @pulumi.getter(name="defaultDurations")
    def default_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectDynatraceHistoricalDataRetrievalDefaultDurationArgs']]]:
        """
        Used by default for any SLOs connected to this data source.
        """
        return pulumi.get(self, "default_durations")

    @default_durations.setter
    def default_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectDynatraceHistoricalDataRetrievalDefaultDurationArgs']]]):
        pulumi.set(self, "default_durations", value)

    @property
    @pulumi.getter(name="maxDurations")
    def max_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectDynatraceHistoricalDataRetrievalMaxDurationArgs']]]:
        """
        Defines the maximum period for which data can be retrieved.
        """
        return pulumi.get(self, "max_durations")

    @max_durations.setter
    def max_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectDynatraceHistoricalDataRetrievalMaxDurationArgs']]]):
        pulumi.set(self, "max_durations", value)


@pulumi.input_type
class DirectDynatraceHistoricalDataRetrievalDefaultDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectDynatraceHistoricalDataRetrievalMaxDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectDynatraceQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectGcmQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectHoneycombHistoricalDataRetrievalArgs:
    def __init__(__self__, *,
                 default_durations: pulumi.Input[Sequence[pulumi.Input['DirectHoneycombHistoricalDataRetrievalDefaultDurationArgs']]],
                 max_durations: pulumi.Input[Sequence[pulumi.Input['DirectHoneycombHistoricalDataRetrievalMaxDurationArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DirectHoneycombHistoricalDataRetrievalDefaultDurationArgs']]] default_durations: Used by default for any SLOs connected to this data source.
        :param pulumi.Input[Sequence[pulumi.Input['DirectHoneycombHistoricalDataRetrievalMaxDurationArgs']]] max_durations: Defines the maximum period for which data can be retrieved.
        """
        pulumi.set(__self__, "default_durations", default_durations)
        pulumi.set(__self__, "max_durations", max_durations)

    @property
    @pulumi.getter(name="defaultDurations")
    def default_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectHoneycombHistoricalDataRetrievalDefaultDurationArgs']]]:
        """
        Used by default for any SLOs connected to this data source.
        """
        return pulumi.get(self, "default_durations")

    @default_durations.setter
    def default_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectHoneycombHistoricalDataRetrievalDefaultDurationArgs']]]):
        pulumi.set(self, "default_durations", value)

    @property
    @pulumi.getter(name="maxDurations")
    def max_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectHoneycombHistoricalDataRetrievalMaxDurationArgs']]]:
        """
        Defines the maximum period for which data can be retrieved.
        """
        return pulumi.get(self, "max_durations")

    @max_durations.setter
    def max_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectHoneycombHistoricalDataRetrievalMaxDurationArgs']]]):
        pulumi.set(self, "max_durations", value)


@pulumi.input_type
class DirectHoneycombHistoricalDataRetrievalDefaultDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectHoneycombHistoricalDataRetrievalMaxDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectHoneycombQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectInfluxdbQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectInstanaQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectLightstepHistoricalDataRetrievalArgs:
    def __init__(__self__, *,
                 default_durations: pulumi.Input[Sequence[pulumi.Input['DirectLightstepHistoricalDataRetrievalDefaultDurationArgs']]],
                 max_durations: pulumi.Input[Sequence[pulumi.Input['DirectLightstepHistoricalDataRetrievalMaxDurationArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DirectLightstepHistoricalDataRetrievalDefaultDurationArgs']]] default_durations: Used by default for any SLOs connected to this data source.
        :param pulumi.Input[Sequence[pulumi.Input['DirectLightstepHistoricalDataRetrievalMaxDurationArgs']]] max_durations: Defines the maximum period for which data can be retrieved.
        """
        pulumi.set(__self__, "default_durations", default_durations)
        pulumi.set(__self__, "max_durations", max_durations)

    @property
    @pulumi.getter(name="defaultDurations")
    def default_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectLightstepHistoricalDataRetrievalDefaultDurationArgs']]]:
        """
        Used by default for any SLOs connected to this data source.
        """
        return pulumi.get(self, "default_durations")

    @default_durations.setter
    def default_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectLightstepHistoricalDataRetrievalDefaultDurationArgs']]]):
        pulumi.set(self, "default_durations", value)

    @property
    @pulumi.getter(name="maxDurations")
    def max_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectLightstepHistoricalDataRetrievalMaxDurationArgs']]]:
        """
        Defines the maximum period for which data can be retrieved.
        """
        return pulumi.get(self, "max_durations")

    @max_durations.setter
    def max_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectLightstepHistoricalDataRetrievalMaxDurationArgs']]]):
        pulumi.set(self, "max_durations", value)


@pulumi.input_type
class DirectLightstepHistoricalDataRetrievalDefaultDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectLightstepHistoricalDataRetrievalMaxDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectLightstepQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectNewrelicHistoricalDataRetrievalArgs:
    def __init__(__self__, *,
                 default_durations: pulumi.Input[Sequence[pulumi.Input['DirectNewrelicHistoricalDataRetrievalDefaultDurationArgs']]],
                 max_durations: pulumi.Input[Sequence[pulumi.Input['DirectNewrelicHistoricalDataRetrievalMaxDurationArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DirectNewrelicHistoricalDataRetrievalDefaultDurationArgs']]] default_durations: Used by default for any SLOs connected to this data source.
        :param pulumi.Input[Sequence[pulumi.Input['DirectNewrelicHistoricalDataRetrievalMaxDurationArgs']]] max_durations: Defines the maximum period for which data can be retrieved.
        """
        pulumi.set(__self__, "default_durations", default_durations)
        pulumi.set(__self__, "max_durations", max_durations)

    @property
    @pulumi.getter(name="defaultDurations")
    def default_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectNewrelicHistoricalDataRetrievalDefaultDurationArgs']]]:
        """
        Used by default for any SLOs connected to this data source.
        """
        return pulumi.get(self, "default_durations")

    @default_durations.setter
    def default_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectNewrelicHistoricalDataRetrievalDefaultDurationArgs']]]):
        pulumi.set(self, "default_durations", value)

    @property
    @pulumi.getter(name="maxDurations")
    def max_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectNewrelicHistoricalDataRetrievalMaxDurationArgs']]]:
        """
        Defines the maximum period for which data can be retrieved.
        """
        return pulumi.get(self, "max_durations")

    @max_durations.setter
    def max_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectNewrelicHistoricalDataRetrievalMaxDurationArgs']]]):
        pulumi.set(self, "max_durations", value)


@pulumi.input_type
class DirectNewrelicHistoricalDataRetrievalDefaultDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectNewrelicHistoricalDataRetrievalMaxDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectNewrelicQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectPingdomQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectRedshiftQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectSplunkHistoricalDataRetrievalArgs:
    def __init__(__self__, *,
                 default_durations: pulumi.Input[Sequence[pulumi.Input['DirectSplunkHistoricalDataRetrievalDefaultDurationArgs']]],
                 max_durations: pulumi.Input[Sequence[pulumi.Input['DirectSplunkHistoricalDataRetrievalMaxDurationArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DirectSplunkHistoricalDataRetrievalDefaultDurationArgs']]] default_durations: Used by default for any SLOs connected to this data source.
        :param pulumi.Input[Sequence[pulumi.Input['DirectSplunkHistoricalDataRetrievalMaxDurationArgs']]] max_durations: Defines the maximum period for which data can be retrieved.
        """
        pulumi.set(__self__, "default_durations", default_durations)
        pulumi.set(__self__, "max_durations", max_durations)

    @property
    @pulumi.getter(name="defaultDurations")
    def default_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectSplunkHistoricalDataRetrievalDefaultDurationArgs']]]:
        """
        Used by default for any SLOs connected to this data source.
        """
        return pulumi.get(self, "default_durations")

    @default_durations.setter
    def default_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectSplunkHistoricalDataRetrievalDefaultDurationArgs']]]):
        pulumi.set(self, "default_durations", value)

    @property
    @pulumi.getter(name="maxDurations")
    def max_durations(self) -> pulumi.Input[Sequence[pulumi.Input['DirectSplunkHistoricalDataRetrievalMaxDurationArgs']]]:
        """
        Defines the maximum period for which data can be retrieved.
        """
        return pulumi.get(self, "max_durations")

    @max_durations.setter
    def max_durations(self, value: pulumi.Input[Sequence[pulumi.Input['DirectSplunkHistoricalDataRetrievalMaxDurationArgs']]]):
        pulumi.set(self, "max_durations", value)


@pulumi.input_type
class DirectSplunkHistoricalDataRetrievalDefaultDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectSplunkHistoricalDataRetrievalMaxDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute, Hour, or Day.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute, Hour, or Day.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectSplunkObservabilityQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectSplunkQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectSumologicQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DirectThousandeyesQueryDelayArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: Must be one of Minute or Second.
        :param pulumi.Input[int] value: Must be an integer greater than or equal to 0.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Must be one of Minute or Second.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Must be an integer greater than or equal to 0.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProjectLabelArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] key: A key for the label, unique within the associated resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: A list of unique values for a single key.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        A key for the label, unique within the associated resource.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of unique values for a single key.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceLabelArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] key: A key for the label, unique within the associated resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: A list of unique values for a single key.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        A key for the label, unique within the associated resource.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of unique values for a single key.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class SloAnomalyConfigArgs:
    def __init__(__self__, *,
                 no_data: pulumi.Input['SloAnomalyConfigNoDataArgs']):
        """
        :param pulumi.Input['SloAnomalyConfigNoDataArgs'] no_data: Alert Policies attached to SLO
        """
        pulumi.set(__self__, "no_data", no_data)

    @property
    @pulumi.getter(name="noData")
    def no_data(self) -> pulumi.Input['SloAnomalyConfigNoDataArgs']:
        """
        Alert Policies attached to SLO
        """
        return pulumi.get(self, "no_data")

    @no_data.setter
    def no_data(self, value: pulumi.Input['SloAnomalyConfigNoDataArgs']):
        pulumi.set(self, "no_data", value)


@pulumi.input_type
class SloAnomalyConfigNoDataArgs:
    def __init__(__self__, *,
                 alert_methods: pulumi.Input[Sequence[pulumi.Input['SloAnomalyConfigNoDataAlertMethodArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SloAnomalyConfigNoDataAlertMethodArgs']]] alert_methods: Alert methods attached to Anomaly Config
        """
        pulumi.set(__self__, "alert_methods", alert_methods)

    @property
    @pulumi.getter(name="alertMethods")
    def alert_methods(self) -> pulumi.Input[Sequence[pulumi.Input['SloAnomalyConfigNoDataAlertMethodArgs']]]:
        """
        Alert methods attached to Anomaly Config
        """
        return pulumi.get(self, "alert_methods")

    @alert_methods.setter
    def alert_methods(self, value: pulumi.Input[Sequence[pulumi.Input['SloAnomalyConfigNoDataAlertMethodArgs']]]):
        pulumi.set(self, "alert_methods", value)


@pulumi.input_type
class SloAnomalyConfigNoDataAlertMethodArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 project: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the previously defined alert method.
        :param pulumi.Input[str] project: Project name the Alert Method is in,  must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). If not defined, Nobl9 returns a default value for this field.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the previously defined alert method.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        Project name the Alert Method is in,  must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). If not defined, Nobl9 returns a default value for this field.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class SloAttachmentArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: URL to the attachment
        :param pulumi.Input[str] display_name: Name displayed for the attachment. Max. length: 63 characters.
        """
        pulumi.set(__self__, "url", url)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        URL to the attachment
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name displayed for the attachment. Max. length: 63 characters.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class SloCompositeArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[float],
                 burn_rate_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['SloCompositeBurnRateConditionArgs']]]] = None):
        """
        :param pulumi.Input[float] target: Designated value
        :param pulumi.Input[Sequence[pulumi.Input['SloCompositeBurnRateConditionArgs']]] burn_rate_conditions: Condition when the Composite SLO’s error budget is burning.
        """
        pulumi.set(__self__, "target", target)
        if burn_rate_conditions is not None:
            pulumi.set(__self__, "burn_rate_conditions", burn_rate_conditions)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[float]:
        """
        Designated value
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[float]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="burnRateConditions")
    def burn_rate_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloCompositeBurnRateConditionArgs']]]]:
        """
        Condition when the Composite SLO’s error budget is burning.
        """
        return pulumi.get(self, "burn_rate_conditions")

    @burn_rate_conditions.setter
    def burn_rate_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloCompositeBurnRateConditionArgs']]]]):
        pulumi.set(self, "burn_rate_conditions", value)


@pulumi.input_type
class SloCompositeBurnRateConditionArgs:
    def __init__(__self__, *,
                 op: pulumi.Input[str],
                 value: pulumi.Input[float]):
        """
        :param pulumi.Input[str] op: Type of logical operation
        :param pulumi.Input[float] value: Burn rate value.
        """
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> pulumi.Input[str]:
        """
        Type of logical operation
        """
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: pulumi.Input[str]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        Burn rate value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SloIndicatorArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the metric source (agent).
        :param pulumi.Input[str] kind: Kind of the metric source. One of {Agent, Direct}.
        :param pulumi.Input[str] project: Name of the metric source project.
        """
        pulumi.set(__self__, "name", name)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the metric source (agent).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the metric source. One of {Agent, Direct}.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the metric source project.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class SloLabelArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] key: A key for the label, unique within the associated resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: A list of unique values for a single key.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        A key for the label, unique within the associated resource.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of unique values for a single key.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class SloObjectiveArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 target: pulumi.Input[float],
                 value: pulumi.Input[float],
                 count_metrics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 op: Optional[pulumi.Input[str]] = None,
                 raw_metrics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricArgs']]]] = None,
                 time_slice_target: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] display_name: Name to be displayed
        :param pulumi.Input[float] target: Designated value
        :param pulumi.Input[float] value: Value
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricArgs']]] count_metrics: Compares two time series, calculating the ratio of either good or bad values to the total number of values. Fill either the 'good' or 'bad' series, but not both.
        :param pulumi.Input[str] name: Objective's name. This field is computed if not provided.
        :param pulumi.Input[str] op: Type of logical operation
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricArgs']]] raw_metrics: Raw data is used to compare objective values.
        :param pulumi.Input[float] time_slice_target: Designated value for slice
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "value", value)
        if count_metrics is not None:
            pulumi.set(__self__, "count_metrics", count_metrics)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if op is not None:
            pulumi.set(__self__, "op", op)
        if raw_metrics is not None:
            pulumi.set(__self__, "raw_metrics", raw_metrics)
        if time_slice_target is not None:
            pulumi.set(__self__, "time_slice_target", time_slice_target)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        Name to be displayed
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[float]:
        """
        Designated value
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[float]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        Value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="countMetrics")
    def count_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricArgs']]]]:
        """
        Compares two time series, calculating the ratio of either good or bad values to the total number of values. Fill either the 'good' or 'bad' series, but not both.
        """
        return pulumi.get(self, "count_metrics")

    @count_metrics.setter
    def count_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricArgs']]]]):
        pulumi.set(self, "count_metrics", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Objective's name. This field is computed if not provided.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def op(self) -> Optional[pulumi.Input[str]]:
        """
        Type of logical operation
        """
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter(name="rawMetrics")
    def raw_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricArgs']]]]:
        """
        Raw data is used to compare objective values.
        """
        return pulumi.get(self, "raw_metrics")

    @raw_metrics.setter
    def raw_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricArgs']]]]):
        pulumi.set(self, "raw_metrics", value)

    @property
    @pulumi.getter(name="timeSliceTarget")
    def time_slice_target(self) -> Optional[pulumi.Input[float]]:
        """
        Designated value for slice
        """
        return pulumi.get(self, "time_slice_target")

    @time_slice_target.setter
    def time_slice_target(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "time_slice_target", value)


@pulumi.input_type
class SloObjectiveCountMetricArgs:
    def __init__(__self__, *,
                 incremental: pulumi.Input[bool],
                 totals: pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalArgs']]],
                 bads: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadArgs']]]] = None,
                 goods: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodArgs']]]] = None):
        """
        :param pulumi.Input[bool] incremental: Should the metrics be incrementing or not
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalArgs']]] totals: Configuration for metric source
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadArgs']]] bads: Configuration for bad time series metrics.
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodArgs']]] goods: Configuration for good time series metrics.
        """
        pulumi.set(__self__, "incremental", incremental)
        pulumi.set(__self__, "totals", totals)
        if bads is not None:
            pulumi.set(__self__, "bads", bads)
        if goods is not None:
            pulumi.set(__self__, "goods", goods)

    @property
    @pulumi.getter
    def incremental(self) -> pulumi.Input[bool]:
        """
        Should the metrics be incrementing or not
        """
        return pulumi.get(self, "incremental")

    @incremental.setter
    def incremental(self, value: pulumi.Input[bool]):
        pulumi.set(self, "incremental", value)

    @property
    @pulumi.getter
    def totals(self) -> pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalArgs']]]:
        """
        Configuration for metric source
        """
        return pulumi.get(self, "totals")

    @totals.setter
    def totals(self, value: pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalArgs']]]):
        pulumi.set(self, "totals", value)

    @property
    @pulumi.getter
    def bads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadArgs']]]]:
        """
        Configuration for bad time series metrics.
        """
        return pulumi.get(self, "bads")

    @bads.setter
    def bads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadArgs']]]]):
        pulumi.set(self, "bads", value)

    @property
    @pulumi.getter
    def goods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodArgs']]]]:
        """
        Configuration for good time series metrics.
        """
        return pulumi.get(self, "goods")

    @goods.setter
    def goods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodArgs']]]]):
        pulumi.set(self, "goods", value)


@pulumi.input_type
class SloObjectiveCountMetricBadArgs:
    def __init__(__self__, *,
                 amazon_prometheuses: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAmazonPrometheusArgs']]]] = None,
                 appdynamics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAppdynamicArgs']]]] = None,
                 azure_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorArgs']]]] = None,
                 bigqueries: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadBigqueryArgs']]]] = None,
                 cloudwatches: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadCloudwatchArgs']]]] = None,
                 datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadDatadogArgs']]]] = None,
                 dynatraces: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadDynatraceArgs']]]] = None,
                 elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadElasticsearchArgs']]]] = None,
                 gcms: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGcmArgs']]]] = None,
                 grafana_lokis: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGrafanaLokiArgs']]]] = None,
                 graphites: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGraphiteArgs']]]] = None,
                 honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadHoneycombArgs']]]] = None,
                 influxdbs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInfluxdbArgs']]]] = None,
                 instanas: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaArgs']]]] = None,
                 lightsteps: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadLightstepArgs']]]] = None,
                 newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadNewrelicArgs']]]] = None,
                 opentsdbs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadOpentsdbArgs']]]] = None,
                 pingdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadPingdomArgs']]]] = None,
                 prometheuses: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadPrometheusArgs']]]] = None,
                 redshifts: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadRedshiftArgs']]]] = None,
                 splunk_observabilities: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSplunkObservabilityArgs']]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSplunkArgs']]]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSumologicArgs']]]] = None,
                 thousandeyes: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadThousandeyeArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAmazonPrometheusArgs']]] amazon_prometheuses: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#creating-slos-with-ams-prometheus)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAppdynamicArgs']]] appdynamics: [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#creating-slos-with-appdynamics)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorArgs']]] azure_monitors: [Configuration documentation](https://docs.nobl9.com/Sources/azure-monitor#creating-slos-with-azure-monitor)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadBigqueryArgs']]] bigqueries: [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#creating-slos-with-bigquery)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadCloudwatchArgs']]] cloudwatches: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#creating-slos-with-cloudwatch)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadDatadogArgs']]] datadogs: [Configuration documentation](https://docs.nobl9.com/Sources/datadog#creating-slos-with-datadog)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadDynatraceArgs']]] dynatraces: [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#creating-slos-with-dynatrace)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadElasticsearchArgs']]] elasticsearches: [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#creating-slos-with-elasticsearch)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGcmArgs']]] gcms: [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#creating-slos-with-google-cloud-monitoring)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGrafanaLokiArgs']]] grafana_lokis: [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#creating-slos-with-grafana-loki)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGraphiteArgs']]] graphites: [Configuration documentation](https://docs.nobl9.com/Sources/graphite#creating-slos-with-graphite)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadHoneycombArgs']]] honeycombs: [Configuration documentation](https://docs.nobl9.com/Sources/honeycomb#creating-slos-with-honeycomb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInfluxdbArgs']]] influxdbs: [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#creating-slos-with-influxdb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaArgs']]] instanas: [Configuration documentation](https://docs.nobl9.com/Sources/instana#creating-slos-with-instana)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadLightstepArgs']]] lightsteps: [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#creating-slos-with-lightstep)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadNewrelicArgs']]] newrelics: [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#creating-slos-with-new-relic)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadOpentsdbArgs']]] opentsdbs: [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#creating-slos-with-opentsdb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadPingdomArgs']]] pingdoms: [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#creating-slos-with-pingdom)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadPrometheusArgs']]] prometheuses: [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#creating-slos-with-prometheus)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadRedshiftArgs']]] redshifts: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/#creating-slos-with-amazon-redshift)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSplunkObservabilityArgs']]] splunk_observabilities: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk-observability)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSplunkArgs']]] splunks: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSumologicArgs']]] sumologics: [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#creating-slos-with-sumo-logic)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadThousandeyeArgs']]] thousandeyes: [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#creating-slos-with-thousandeyes)
        """
        if amazon_prometheuses is not None:
            pulumi.set(__self__, "amazon_prometheuses", amazon_prometheuses)
        if appdynamics is not None:
            pulumi.set(__self__, "appdynamics", appdynamics)
        if azure_monitors is not None:
            pulumi.set(__self__, "azure_monitors", azure_monitors)
        if bigqueries is not None:
            pulumi.set(__self__, "bigqueries", bigqueries)
        if cloudwatches is not None:
            pulumi.set(__self__, "cloudwatches", cloudwatches)
        if datadogs is not None:
            pulumi.set(__self__, "datadogs", datadogs)
        if dynatraces is not None:
            pulumi.set(__self__, "dynatraces", dynatraces)
        if elasticsearches is not None:
            pulumi.set(__self__, "elasticsearches", elasticsearches)
        if gcms is not None:
            pulumi.set(__self__, "gcms", gcms)
        if grafana_lokis is not None:
            pulumi.set(__self__, "grafana_lokis", grafana_lokis)
        if graphites is not None:
            pulumi.set(__self__, "graphites", graphites)
        if honeycombs is not None:
            pulumi.set(__self__, "honeycombs", honeycombs)
        if influxdbs is not None:
            pulumi.set(__self__, "influxdbs", influxdbs)
        if instanas is not None:
            pulumi.set(__self__, "instanas", instanas)
        if lightsteps is not None:
            pulumi.set(__self__, "lightsteps", lightsteps)
        if newrelics is not None:
            pulumi.set(__self__, "newrelics", newrelics)
        if opentsdbs is not None:
            pulumi.set(__self__, "opentsdbs", opentsdbs)
        if pingdoms is not None:
            pulumi.set(__self__, "pingdoms", pingdoms)
        if prometheuses is not None:
            pulumi.set(__self__, "prometheuses", prometheuses)
        if redshifts is not None:
            pulumi.set(__self__, "redshifts", redshifts)
        if splunk_observabilities is not None:
            pulumi.set(__self__, "splunk_observabilities", splunk_observabilities)
        if splunks is not None:
            pulumi.set(__self__, "splunks", splunks)
        if sumologics is not None:
            pulumi.set(__self__, "sumologics", sumologics)
        if thousandeyes is not None:
            pulumi.set(__self__, "thousandeyes", thousandeyes)

    @property
    @pulumi.getter(name="amazonPrometheuses")
    def amazon_prometheuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAmazonPrometheusArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#creating-slos-with-ams-prometheus)
        """
        return pulumi.get(self, "amazon_prometheuses")

    @amazon_prometheuses.setter
    def amazon_prometheuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAmazonPrometheusArgs']]]]):
        pulumi.set(self, "amazon_prometheuses", value)

    @property
    @pulumi.getter
    def appdynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAppdynamicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#creating-slos-with-appdynamics)
        """
        return pulumi.get(self, "appdynamics")

    @appdynamics.setter
    def appdynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAppdynamicArgs']]]]):
        pulumi.set(self, "appdynamics", value)

    @property
    @pulumi.getter(name="azureMonitors")
    def azure_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/azure-monitor#creating-slos-with-azure-monitor)
        """
        return pulumi.get(self, "azure_monitors")

    @azure_monitors.setter
    def azure_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorArgs']]]]):
        pulumi.set(self, "azure_monitors", value)

    @property
    @pulumi.getter
    def bigqueries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadBigqueryArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#creating-slos-with-bigquery)
        """
        return pulumi.get(self, "bigqueries")

    @bigqueries.setter
    def bigqueries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadBigqueryArgs']]]]):
        pulumi.set(self, "bigqueries", value)

    @property
    @pulumi.getter
    def cloudwatches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadCloudwatchArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#creating-slos-with-cloudwatch)
        """
        return pulumi.get(self, "cloudwatches")

    @cloudwatches.setter
    def cloudwatches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadCloudwatchArgs']]]]):
        pulumi.set(self, "cloudwatches", value)

    @property
    @pulumi.getter
    def datadogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadDatadogArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/datadog#creating-slos-with-datadog)
        """
        return pulumi.get(self, "datadogs")

    @datadogs.setter
    def datadogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadDatadogArgs']]]]):
        pulumi.set(self, "datadogs", value)

    @property
    @pulumi.getter
    def dynatraces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadDynatraceArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#creating-slos-with-dynatrace)
        """
        return pulumi.get(self, "dynatraces")

    @dynatraces.setter
    def dynatraces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadDynatraceArgs']]]]):
        pulumi.set(self, "dynatraces", value)

    @property
    @pulumi.getter
    def elasticsearches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadElasticsearchArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#creating-slos-with-elasticsearch)
        """
        return pulumi.get(self, "elasticsearches")

    @elasticsearches.setter
    def elasticsearches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadElasticsearchArgs']]]]):
        pulumi.set(self, "elasticsearches", value)

    @property
    @pulumi.getter
    def gcms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGcmArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#creating-slos-with-google-cloud-monitoring)
        """
        return pulumi.get(self, "gcms")

    @gcms.setter
    def gcms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGcmArgs']]]]):
        pulumi.set(self, "gcms", value)

    @property
    @pulumi.getter(name="grafanaLokis")
    def grafana_lokis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGrafanaLokiArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#creating-slos-with-grafana-loki)
        """
        return pulumi.get(self, "grafana_lokis")

    @grafana_lokis.setter
    def grafana_lokis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGrafanaLokiArgs']]]]):
        pulumi.set(self, "grafana_lokis", value)

    @property
    @pulumi.getter
    def graphites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGraphiteArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/graphite#creating-slos-with-graphite)
        """
        return pulumi.get(self, "graphites")

    @graphites.setter
    def graphites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadGraphiteArgs']]]]):
        pulumi.set(self, "graphites", value)

    @property
    @pulumi.getter
    def honeycombs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadHoneycombArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/honeycomb#creating-slos-with-honeycomb)
        """
        return pulumi.get(self, "honeycombs")

    @honeycombs.setter
    def honeycombs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadHoneycombArgs']]]]):
        pulumi.set(self, "honeycombs", value)

    @property
    @pulumi.getter
    def influxdbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInfluxdbArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#creating-slos-with-influxdb)
        """
        return pulumi.get(self, "influxdbs")

    @influxdbs.setter
    def influxdbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInfluxdbArgs']]]]):
        pulumi.set(self, "influxdbs", value)

    @property
    @pulumi.getter
    def instanas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/instana#creating-slos-with-instana)
        """
        return pulumi.get(self, "instanas")

    @instanas.setter
    def instanas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaArgs']]]]):
        pulumi.set(self, "instanas", value)

    @property
    @pulumi.getter
    def lightsteps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadLightstepArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#creating-slos-with-lightstep)
        """
        return pulumi.get(self, "lightsteps")

    @lightsteps.setter
    def lightsteps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadLightstepArgs']]]]):
        pulumi.set(self, "lightsteps", value)

    @property
    @pulumi.getter
    def newrelics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadNewrelicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#creating-slos-with-new-relic)
        """
        return pulumi.get(self, "newrelics")

    @newrelics.setter
    def newrelics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadNewrelicArgs']]]]):
        pulumi.set(self, "newrelics", value)

    @property
    @pulumi.getter
    def opentsdbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadOpentsdbArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#creating-slos-with-opentsdb)
        """
        return pulumi.get(self, "opentsdbs")

    @opentsdbs.setter
    def opentsdbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadOpentsdbArgs']]]]):
        pulumi.set(self, "opentsdbs", value)

    @property
    @pulumi.getter
    def pingdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadPingdomArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#creating-slos-with-pingdom)
        """
        return pulumi.get(self, "pingdoms")

    @pingdoms.setter
    def pingdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadPingdomArgs']]]]):
        pulumi.set(self, "pingdoms", value)

    @property
    @pulumi.getter
    def prometheuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadPrometheusArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#creating-slos-with-prometheus)
        """
        return pulumi.get(self, "prometheuses")

    @prometheuses.setter
    def prometheuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadPrometheusArgs']]]]):
        pulumi.set(self, "prometheuses", value)

    @property
    @pulumi.getter
    def redshifts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadRedshiftArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/#creating-slos-with-amazon-redshift)
        """
        return pulumi.get(self, "redshifts")

    @redshifts.setter
    def redshifts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadRedshiftArgs']]]]):
        pulumi.set(self, "redshifts", value)

    @property
    @pulumi.getter(name="splunkObservabilities")
    def splunk_observabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSplunkObservabilityArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk-observability)
        """
        return pulumi.get(self, "splunk_observabilities")

    @splunk_observabilities.setter
    def splunk_observabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSplunkObservabilityArgs']]]]):
        pulumi.set(self, "splunk_observabilities", value)

    @property
    @pulumi.getter
    def splunks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSplunkArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk)
        """
        return pulumi.get(self, "splunks")

    @splunks.setter
    def splunks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSplunkArgs']]]]):
        pulumi.set(self, "splunks", value)

    @property
    @pulumi.getter
    def sumologics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSumologicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#creating-slos-with-sumo-logic)
        """
        return pulumi.get(self, "sumologics")

    @sumologics.setter
    def sumologics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadSumologicArgs']]]]):
        pulumi.set(self, "sumologics", value)

    @property
    @pulumi.getter
    def thousandeyes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadThousandeyeArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#creating-slos-with-thousandeyes)
        """
        return pulumi.get(self, "thousandeyes")

    @thousandeyes.setter
    def thousandeyes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadThousandeyeArgs']]]]):
        pulumi.set(self, "thousandeyes", value)


@pulumi.input_type
class SloObjectiveCountMetricBadAmazonPrometheusArgs:
    def __init__(__self__, *,
                 promql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] promql: Query for the metrics
        """
        pulumi.set(__self__, "promql", promql)

    @property
    @pulumi.getter
    def promql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "promql")

    @promql.setter
    def promql(self, value: pulumi.Input[str]):
        pulumi.set(self, "promql", value)


@pulumi.input_type
class SloObjectiveCountMetricBadAppdynamicArgs:
    def __init__(__self__, *,
                 application_name: pulumi.Input[str],
                 metric_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] application_name: Name of the added application
        :param pulumi.Input[str] metric_path: Path to the metrics
        """
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "metric_path", metric_path)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Input[str]:
        """
        Name of the added application
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="metricPath")
    def metric_path(self) -> pulumi.Input[str]:
        """
        Path to the metrics
        """
        return pulumi.get(self, "metric_path")

    @metric_path.setter
    def metric_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_path", value)


@pulumi.input_type
class SloObjectiveCountMetricBadAzureMonitorArgs:
    def __init__(__self__, *,
                 data_type: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorDimensionArgs']]]] = None,
                 kql_query: Optional[pulumi.Input[str]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 metric_namespace: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 workspaces: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorWorkspaceArgs']]]] = None):
        """
        :param pulumi.Input[str] data_type: Specifies source: 'metrics' or 'logs'
        :param pulumi.Input[str] aggregation: Aggregation type [Required for metrics]
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorDimensionArgs']]] dimensions: Dimensions of the metric [Optional for metrics]
        :param pulumi.Input[str] kql_query: Logs query in Kusto Query Language [Required for logs]
        :param pulumi.Input[str] metric_name: Name of the metric [Required for metrics]
        :param pulumi.Input[str] metric_namespace: Namespace of the metric [Optional for metrics]
        :param pulumi.Input[str] resource_id: Identifier of the Azure Cloud resource [Required for metrics]
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorWorkspaceArgs']]] workspaces: Log analytics workspace [Required for logs]
        """
        pulumi.set(__self__, "data_type", data_type)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if kql_query is not None:
            pulumi.set(__self__, "kql_query", kql_query)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if metric_namespace is not None:
            pulumi.set(__self__, "metric_namespace", metric_namespace)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if workspaces is not None:
            pulumi.set(__self__, "workspaces", workspaces)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Input[str]:
        """
        Specifies source: 'metrics' or 'logs'
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregation type [Required for metrics]
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorDimensionArgs']]]]:
        """
        Dimensions of the metric [Optional for metrics]
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter(name="kqlQuery")
    def kql_query(self) -> Optional[pulumi.Input[str]]:
        """
        Logs query in Kusto Query Language [Required for logs]
        """
        return pulumi.get(self, "kql_query")

    @kql_query.setter
    def kql_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kql_query", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the metric [Required for metrics]
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the metric [Optional for metrics]
        """
        return pulumi.get(self, "metric_namespace")

    @metric_namespace.setter
    def metric_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_namespace", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the Azure Cloud resource [Required for metrics]
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def workspaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorWorkspaceArgs']]]]:
        """
        Log analytics workspace [Required for logs]
        """
        return pulumi.get(self, "workspaces")

    @workspaces.setter
    def workspaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadAzureMonitorWorkspaceArgs']]]]):
        pulumi.set(self, "workspaces", value)


@pulumi.input_type
class SloObjectiveCountMetricBadAzureMonitorDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the previously defined alert method.
        :param pulumi.Input[str] value: Burn rate value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the previously defined alert method.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Burn rate value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SloObjectiveCountMetricBadAzureMonitorWorkspaceArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 workspace_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] resource_group: Resource group of the workspace
        :param pulumi.Input[str] subscription_id: Subscription ID of the workspace
        :param pulumi.Input[str] workspace_id: ID of the workspace
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        Resource group of the workspace
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        Subscription ID of the workspace
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        ID of the workspace
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class SloObjectiveCountMetricBadBigqueryArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] location: Location of you BigQuery
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Location of you BigQuery
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricBadCloudwatchArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadCloudwatchDimensionArgs']]]] = None,
                 json: Optional[pulumi.Input[str]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 sql: Optional[pulumi.Input[str]] = None,
                 stat: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region: Region of the CloudWatch instance
        :param pulumi.Input[str] account_id: AccountID used with cross-account observability feature
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadCloudwatchDimensionArgs']]] dimensions: Dimensions of the metric [Optional for metrics]
        :param pulumi.Input[str] json: JSON query
        :param pulumi.Input[str] metric_name: Name of the metric [Required for metrics]
        :param pulumi.Input[str] namespace: Namespace of the metric
        :param pulumi.Input[str] sql: SQL query
        :param pulumi.Input[str] stat: Metric data aggregations
        """
        pulumi.set(__self__, "region", region)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if stat is not None:
            pulumi.set(__self__, "stat", stat)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of the CloudWatch instance
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        AccountID used with cross-account observability feature
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadCloudwatchDimensionArgs']]]]:
        """
        Dimensions of the metric [Optional for metrics]
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadCloudwatchDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON query
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the metric [Required for metrics]
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the metric
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def sql(self) -> Optional[pulumi.Input[str]]:
        """
        SQL query
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter
    def stat(self) -> Optional[pulumi.Input[str]]:
        """
        Metric data aggregations
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stat", value)


@pulumi.input_type
class SloObjectiveCountMetricBadCloudwatchDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the previously defined alert method.
        :param pulumi.Input[str] value: Burn rate value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the previously defined alert method.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Burn rate value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SloObjectiveCountMetricBadDatadogArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricBadDynatraceArgs:
    def __init__(__self__, *,
                 metric_selector: pulumi.Input[str]):
        """
        :param pulumi.Input[str] metric_selector: Selector for the metrics
        """
        pulumi.set(__self__, "metric_selector", metric_selector)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> pulumi.Input[str]:
        """
        Selector for the metrics
        """
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_selector", value)


@pulumi.input_type
class SloObjectiveCountMetricBadElasticsearchArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] index: Index of metrics we want to query
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        Index of metrics we want to query
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricBadGcmArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricBadGrafanaLokiArgs:
    def __init__(__self__, *,
                 logql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] logql: Query for the logs
        """
        pulumi.set(__self__, "logql", logql)

    @property
    @pulumi.getter
    def logql(self) -> pulumi.Input[str]:
        """
        Query for the logs
        """
        return pulumi.get(self, "logql")

    @logql.setter
    def logql(self, value: pulumi.Input[str]):
        pulumi.set(self, "logql", value)


@pulumi.input_type
class SloObjectiveCountMetricBadGraphiteArgs:
    def __init__(__self__, *,
                 metric_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] metric_path: Path to the metrics
        """
        pulumi.set(__self__, "metric_path", metric_path)

    @property
    @pulumi.getter(name="metricPath")
    def metric_path(self) -> pulumi.Input[str]:
        """
        Path to the metrics
        """
        return pulumi.get(self, "metric_path")

    @metric_path.setter
    def metric_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_path", value)


@pulumi.input_type
class SloObjectiveCountMetricBadHoneycombArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input[str],
                 attribute: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] calculation: Calculation type
        :param pulumi.Input[str] attribute: Column name - required for all calculation types besides 'CONCURRENCY' and 'COUNT'
        """
        pulumi.set(__self__, "calculation", calculation)
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input[str]:
        """
        Calculation type
        """
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input[str]):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Column name - required for all calculation types besides 'CONCURRENCY' and 'COUNT'
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)


@pulumi.input_type
class SloObjectiveCountMetricBadInfluxdbArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricBadInstanaArgs:
    def __init__(__self__, *,
                 metric_type: pulumi.Input[str],
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaApplicationArgs']]]] = None,
                 infrastructures: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaInfrastructureArgs']]]] = None):
        """
        :param pulumi.Input[str] metric_type: Instana metric type 'application' or 'infrastructure'
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaApplicationArgs']]] applications: Infrastructure metric type
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaInfrastructureArgs']]] infrastructures: Infrastructure metric type
        """
        pulumi.set(__self__, "metric_type", metric_type)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> pulumi.Input[str]:
        """
        Instana metric type 'application' or 'infrastructure'
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaApplicationArgs']]]]:
        """
        Infrastructure metric type
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaInfrastructureArgs']]]]:
        """
        Infrastructure metric type
        """
        return pulumi.get(self, "infrastructures")

    @infrastructures.setter
    def infrastructures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaInfrastructureArgs']]]]):
        pulumi.set(self, "infrastructures", value)


@pulumi.input_type
class SloObjectiveCountMetricBadInstanaApplicationArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 api_query: pulumi.Input[str],
                 group_bies: pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaApplicationGroupByArgs']]],
                 metric_id: pulumi.Input[str],
                 include_internal: Optional[pulumi.Input[bool]] = None,
                 include_synthetic: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] aggregation: Aggregation type [Required for metrics]
        :param pulumi.Input[str] api_query: API query user passes in a JSON format
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaApplicationGroupByArgs']]] group_bies: Group by method
        :param pulumi.Input[str] metric_id: Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        :param pulumi.Input[bool] include_internal: Include internal
        :param pulumi.Input[bool] include_synthetic: Include synthetic
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "api_query", api_query)
        pulumi.set(__self__, "group_bies", group_bies)
        pulumi.set(__self__, "metric_id", metric_id)
        if include_internal is not None:
            pulumi.set(__self__, "include_internal", include_internal)
        if include_synthetic is not None:
            pulumi.set(__self__, "include_synthetic", include_synthetic)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        Aggregation type [Required for metrics]
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="apiQuery")
    def api_query(self) -> pulumi.Input[str]:
        """
        API query user passes in a JSON format
        """
        return pulumi.get(self, "api_query")

    @api_query.setter
    def api_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaApplicationGroupByArgs']]]:
        """
        Group by method
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricBadInstanaApplicationGroupByArgs']]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Input[str]:
        """
        Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="includeInternal")
    def include_internal(self) -> Optional[pulumi.Input[bool]]:
        """
        Include internal
        """
        return pulumi.get(self, "include_internal")

    @include_internal.setter
    def include_internal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_internal", value)

    @property
    @pulumi.getter(name="includeSynthetic")
    def include_synthetic(self) -> Optional[pulumi.Input[bool]]:
        """
        Include synthetic
        """
        return pulumi.get(self, "include_synthetic")

    @include_synthetic.setter
    def include_synthetic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_synthetic", value)


@pulumi.input_type
class SloObjectiveCountMetricBadInstanaApplicationGroupByArgs:
    def __init__(__self__, *,
                 tag: pulumi.Input[str],
                 tag_entity: pulumi.Input[str],
                 tag_second_level_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tag: Group by tag
        :param pulumi.Input[str] tag_entity: Tag entity - one of 'DESTINATION', 'SOURCE', 'NOT_APPLICABLE'
        """
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "tag_entity", tag_entity)
        if tag_second_level_key is not None:
            pulumi.set(__self__, "tag_second_level_key", tag_second_level_key)

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Input[str]:
        """
        Group by tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="tagEntity")
    def tag_entity(self) -> pulumi.Input[str]:
        """
        Tag entity - one of 'DESTINATION', 'SOURCE', 'NOT_APPLICABLE'
        """
        return pulumi.get(self, "tag_entity")

    @tag_entity.setter
    def tag_entity(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_entity", value)

    @property
    @pulumi.getter(name="tagSecondLevelKey")
    def tag_second_level_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_second_level_key")

    @tag_second_level_key.setter
    def tag_second_level_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_second_level_key", value)


@pulumi.input_type
class SloObjectiveCountMetricBadInstanaInfrastructureArgs:
    def __init__(__self__, *,
                 metric_id: pulumi.Input[str],
                 metric_retrieval_method: pulumi.Input[str],
                 plugin_id: pulumi.Input[str],
                 query: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric_id: Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        :param pulumi.Input[str] metric_retrieval_method: Metric retrieval method 'query' or 'snapshot'
        :param pulumi.Input[str] plugin_id: Plugin ID
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] snapshot_id: Snapshot ID
        """
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_retrieval_method", metric_retrieval_method)
        pulumi.set(__self__, "plugin_id", plugin_id)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Input[str]:
        """
        Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="metricRetrievalMethod")
    def metric_retrieval_method(self) -> pulumi.Input[str]:
        """
        Metric retrieval method 'query' or 'snapshot'
        """
        return pulumi.get(self, "metric_retrieval_method")

    @metric_retrieval_method.setter
    def metric_retrieval_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_retrieval_method", value)

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> pulumi.Input[str]:
        """
        Plugin ID
        """
        return pulumi.get(self, "plugin_id")

    @plugin_id.setter
    def plugin_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_id", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Snapshot ID
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class SloObjectiveCountMetricBadLightstepArgs:
    def __init__(__self__, *,
                 type_of_data: pulumi.Input[str],
                 percentile: Optional[pulumi.Input[float]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 uql: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type_of_data: Type of data to filter by
        :param pulumi.Input[float] percentile: Optional value to filter by percentiles
        :param pulumi.Input[str] stream_id: ID of the metrics stream
        :param pulumi.Input[str] uql: UQL query
        """
        pulumi.set(__self__, "type_of_data", type_of_data)
        if percentile is not None:
            pulumi.set(__self__, "percentile", percentile)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if uql is not None:
            pulumi.set(__self__, "uql", uql)

    @property
    @pulumi.getter(name="typeOfData")
    def type_of_data(self) -> pulumi.Input[str]:
        """
        Type of data to filter by
        """
        return pulumi.get(self, "type_of_data")

    @type_of_data.setter
    def type_of_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_of_data", value)

    @property
    @pulumi.getter
    def percentile(self) -> Optional[pulumi.Input[float]]:
        """
        Optional value to filter by percentiles
        """
        return pulumi.get(self, "percentile")

    @percentile.setter
    def percentile(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percentile", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the metrics stream
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter
    def uql(self) -> Optional[pulumi.Input[str]]:
        """
        UQL query
        """
        return pulumi.get(self, "uql")

    @uql.setter
    def uql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uql", value)


@pulumi.input_type
class SloObjectiveCountMetricBadNewrelicArgs:
    def __init__(__self__, *,
                 nrql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] nrql: Query for the metrics
        """
        pulumi.set(__self__, "nrql", nrql)

    @property
    @pulumi.getter
    def nrql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "nrql")

    @nrql.setter
    def nrql(self, value: pulumi.Input[str]):
        pulumi.set(self, "nrql", value)


@pulumi.input_type
class SloObjectiveCountMetricBadOpentsdbArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricBadPingdomArgs:
    def __init__(__self__, *,
                 check_id: pulumi.Input[str],
                 check_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] check_id: Pingdom uptime or transaction check's ID
        :param pulumi.Input[str] check_type: Pingdom check type - uptime or transaction
        :param pulumi.Input[str] status: Optional for the Uptime checks. Use it to filter the Pingdom check results by status
        """
        pulumi.set(__self__, "check_id", check_id)
        if check_type is not None:
            pulumi.set(__self__, "check_type", check_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="checkId")
    def check_id(self) -> pulumi.Input[str]:
        """
        Pingdom uptime or transaction check's ID
        """
        return pulumi.get(self, "check_id")

    @check_id.setter
    def check_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "check_id", value)

    @property
    @pulumi.getter(name="checkType")
    def check_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pingdom check type - uptime or transaction
        """
        return pulumi.get(self, "check_type")

    @check_type.setter
    def check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Optional for the Uptime checks. Use it to filter the Pingdom check results by status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SloObjectiveCountMetricBadPrometheusArgs:
    def __init__(__self__, *,
                 promql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] promql: Query for the metrics
        """
        pulumi.set(__self__, "promql", promql)

    @property
    @pulumi.getter
    def promql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "promql")

    @promql.setter
    def promql(self, value: pulumi.Input[str]):
        pulumi.set(self, "promql", value)


@pulumi.input_type
class SloObjectiveCountMetricBadRedshiftArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 region: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cluster_id: Redshift custer ID
        :param pulumi.Input[str] database_name: Database name
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] region: Region of the CloudWatch instance
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Redshift custer ID
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        Database name
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of the CloudWatch instance
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class SloObjectiveCountMetricBadSplunkArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricBadSplunkObservabilityArgs:
    def __init__(__self__, *,
                 program: pulumi.Input[str]):
        """
        :param pulumi.Input[str] program: Query for the metrics
        """
        pulumi.set(__self__, "program", program)

    @property
    @pulumi.getter
    def program(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "program")

    @program.setter
    def program(self, value: pulumi.Input[str]):
        pulumi.set(self, "program", value)


@pulumi.input_type
class SloObjectiveCountMetricBadSumologicArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 type: pulumi.Input[str],
                 quantization: Optional[pulumi.Input[str]] = None,
                 rollup: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] type: Sumologic source - metrics or logs
        :param pulumi.Input[str] quantization: Period of data aggregation
        :param pulumi.Input[str] rollup: Aggregation function - avg, sum, min, max, count, none
        """
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "type", type)
        if quantization is not None:
            pulumi.set(__self__, "quantization", quantization)
        if rollup is not None:
            pulumi.set(__self__, "rollup", rollup)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Sumologic source - metrics or logs
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def quantization(self) -> Optional[pulumi.Input[str]]:
        """
        Period of data aggregation
        """
        return pulumi.get(self, "quantization")

    @quantization.setter
    def quantization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quantization", value)

    @property
    @pulumi.getter
    def rollup(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregation function - avg, sum, min, max, count, none
        """
        return pulumi.get(self, "rollup")

    @rollup.setter
    def rollup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rollup", value)


@pulumi.input_type
class SloObjectiveCountMetricBadThousandeyeArgs:
    def __init__(__self__, *,
                 test_id: pulumi.Input[int]):
        """
        :param pulumi.Input[int] test_id: ID of the test
        """
        pulumi.set(__self__, "test_id", test_id)

    @property
    @pulumi.getter(name="testId")
    def test_id(self) -> pulumi.Input[int]:
        """
        ID of the test
        """
        return pulumi.get(self, "test_id")

    @test_id.setter
    def test_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "test_id", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodArgs:
    def __init__(__self__, *,
                 amazon_prometheuses: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAmazonPrometheusArgs']]]] = None,
                 appdynamics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAppdynamicArgs']]]] = None,
                 azure_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorArgs']]]] = None,
                 bigqueries: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodBigqueryArgs']]]] = None,
                 cloudwatches: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodCloudwatchArgs']]]] = None,
                 datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodDatadogArgs']]]] = None,
                 dynatraces: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodDynatraceArgs']]]] = None,
                 elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodElasticsearchArgs']]]] = None,
                 gcms: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGcmArgs']]]] = None,
                 grafana_lokis: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGrafanaLokiArgs']]]] = None,
                 graphites: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGraphiteArgs']]]] = None,
                 honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodHoneycombArgs']]]] = None,
                 influxdbs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInfluxdbArgs']]]] = None,
                 instanas: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaArgs']]]] = None,
                 lightsteps: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodLightstepArgs']]]] = None,
                 newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodNewrelicArgs']]]] = None,
                 opentsdbs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodOpentsdbArgs']]]] = None,
                 pingdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodPingdomArgs']]]] = None,
                 prometheuses: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodPrometheusArgs']]]] = None,
                 redshifts: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodRedshiftArgs']]]] = None,
                 splunk_observabilities: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSplunkObservabilityArgs']]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSplunkArgs']]]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSumologicArgs']]]] = None,
                 thousandeyes: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodThousandeyeArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAmazonPrometheusArgs']]] amazon_prometheuses: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#creating-slos-with-ams-prometheus)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAppdynamicArgs']]] appdynamics: [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#creating-slos-with-appdynamics)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorArgs']]] azure_monitors: [Configuration documentation](https://docs.nobl9.com/Sources/azure-monitor#creating-slos-with-azure-monitor)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodBigqueryArgs']]] bigqueries: [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#creating-slos-with-bigquery)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodCloudwatchArgs']]] cloudwatches: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#creating-slos-with-cloudwatch)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodDatadogArgs']]] datadogs: [Configuration documentation](https://docs.nobl9.com/Sources/datadog#creating-slos-with-datadog)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodDynatraceArgs']]] dynatraces: [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#creating-slos-with-dynatrace)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodElasticsearchArgs']]] elasticsearches: [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#creating-slos-with-elasticsearch)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGcmArgs']]] gcms: [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#creating-slos-with-google-cloud-monitoring)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGrafanaLokiArgs']]] grafana_lokis: [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#creating-slos-with-grafana-loki)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGraphiteArgs']]] graphites: [Configuration documentation](https://docs.nobl9.com/Sources/graphite#creating-slos-with-graphite)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodHoneycombArgs']]] honeycombs: [Configuration documentation](https://docs.nobl9.com/Sources/honeycomb#creating-slos-with-honeycomb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInfluxdbArgs']]] influxdbs: [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#creating-slos-with-influxdb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaArgs']]] instanas: [Configuration documentation](https://docs.nobl9.com/Sources/instana#creating-slos-with-instana)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodLightstepArgs']]] lightsteps: [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#creating-slos-with-lightstep)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodNewrelicArgs']]] newrelics: [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#creating-slos-with-new-relic)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodOpentsdbArgs']]] opentsdbs: [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#creating-slos-with-opentsdb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodPingdomArgs']]] pingdoms: [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#creating-slos-with-pingdom)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodPrometheusArgs']]] prometheuses: [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#creating-slos-with-prometheus)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodRedshiftArgs']]] redshifts: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/#creating-slos-with-amazon-redshift)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSplunkObservabilityArgs']]] splunk_observabilities: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk-observability)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSplunkArgs']]] splunks: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSumologicArgs']]] sumologics: [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#creating-slos-with-sumo-logic)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodThousandeyeArgs']]] thousandeyes: [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#creating-slos-with-thousandeyes)
        """
        if amazon_prometheuses is not None:
            pulumi.set(__self__, "amazon_prometheuses", amazon_prometheuses)
        if appdynamics is not None:
            pulumi.set(__self__, "appdynamics", appdynamics)
        if azure_monitors is not None:
            pulumi.set(__self__, "azure_monitors", azure_monitors)
        if bigqueries is not None:
            pulumi.set(__self__, "bigqueries", bigqueries)
        if cloudwatches is not None:
            pulumi.set(__self__, "cloudwatches", cloudwatches)
        if datadogs is not None:
            pulumi.set(__self__, "datadogs", datadogs)
        if dynatraces is not None:
            pulumi.set(__self__, "dynatraces", dynatraces)
        if elasticsearches is not None:
            pulumi.set(__self__, "elasticsearches", elasticsearches)
        if gcms is not None:
            pulumi.set(__self__, "gcms", gcms)
        if grafana_lokis is not None:
            pulumi.set(__self__, "grafana_lokis", grafana_lokis)
        if graphites is not None:
            pulumi.set(__self__, "graphites", graphites)
        if honeycombs is not None:
            pulumi.set(__self__, "honeycombs", honeycombs)
        if influxdbs is not None:
            pulumi.set(__self__, "influxdbs", influxdbs)
        if instanas is not None:
            pulumi.set(__self__, "instanas", instanas)
        if lightsteps is not None:
            pulumi.set(__self__, "lightsteps", lightsteps)
        if newrelics is not None:
            pulumi.set(__self__, "newrelics", newrelics)
        if opentsdbs is not None:
            pulumi.set(__self__, "opentsdbs", opentsdbs)
        if pingdoms is not None:
            pulumi.set(__self__, "pingdoms", pingdoms)
        if prometheuses is not None:
            pulumi.set(__self__, "prometheuses", prometheuses)
        if redshifts is not None:
            pulumi.set(__self__, "redshifts", redshifts)
        if splunk_observabilities is not None:
            pulumi.set(__self__, "splunk_observabilities", splunk_observabilities)
        if splunks is not None:
            pulumi.set(__self__, "splunks", splunks)
        if sumologics is not None:
            pulumi.set(__self__, "sumologics", sumologics)
        if thousandeyes is not None:
            pulumi.set(__self__, "thousandeyes", thousandeyes)

    @property
    @pulumi.getter(name="amazonPrometheuses")
    def amazon_prometheuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAmazonPrometheusArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#creating-slos-with-ams-prometheus)
        """
        return pulumi.get(self, "amazon_prometheuses")

    @amazon_prometheuses.setter
    def amazon_prometheuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAmazonPrometheusArgs']]]]):
        pulumi.set(self, "amazon_prometheuses", value)

    @property
    @pulumi.getter
    def appdynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAppdynamicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#creating-slos-with-appdynamics)
        """
        return pulumi.get(self, "appdynamics")

    @appdynamics.setter
    def appdynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAppdynamicArgs']]]]):
        pulumi.set(self, "appdynamics", value)

    @property
    @pulumi.getter(name="azureMonitors")
    def azure_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/azure-monitor#creating-slos-with-azure-monitor)
        """
        return pulumi.get(self, "azure_monitors")

    @azure_monitors.setter
    def azure_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorArgs']]]]):
        pulumi.set(self, "azure_monitors", value)

    @property
    @pulumi.getter
    def bigqueries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodBigqueryArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#creating-slos-with-bigquery)
        """
        return pulumi.get(self, "bigqueries")

    @bigqueries.setter
    def bigqueries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodBigqueryArgs']]]]):
        pulumi.set(self, "bigqueries", value)

    @property
    @pulumi.getter
    def cloudwatches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodCloudwatchArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#creating-slos-with-cloudwatch)
        """
        return pulumi.get(self, "cloudwatches")

    @cloudwatches.setter
    def cloudwatches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodCloudwatchArgs']]]]):
        pulumi.set(self, "cloudwatches", value)

    @property
    @pulumi.getter
    def datadogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodDatadogArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/datadog#creating-slos-with-datadog)
        """
        return pulumi.get(self, "datadogs")

    @datadogs.setter
    def datadogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodDatadogArgs']]]]):
        pulumi.set(self, "datadogs", value)

    @property
    @pulumi.getter
    def dynatraces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodDynatraceArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#creating-slos-with-dynatrace)
        """
        return pulumi.get(self, "dynatraces")

    @dynatraces.setter
    def dynatraces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodDynatraceArgs']]]]):
        pulumi.set(self, "dynatraces", value)

    @property
    @pulumi.getter
    def elasticsearches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodElasticsearchArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#creating-slos-with-elasticsearch)
        """
        return pulumi.get(self, "elasticsearches")

    @elasticsearches.setter
    def elasticsearches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodElasticsearchArgs']]]]):
        pulumi.set(self, "elasticsearches", value)

    @property
    @pulumi.getter
    def gcms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGcmArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#creating-slos-with-google-cloud-monitoring)
        """
        return pulumi.get(self, "gcms")

    @gcms.setter
    def gcms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGcmArgs']]]]):
        pulumi.set(self, "gcms", value)

    @property
    @pulumi.getter(name="grafanaLokis")
    def grafana_lokis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGrafanaLokiArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#creating-slos-with-grafana-loki)
        """
        return pulumi.get(self, "grafana_lokis")

    @grafana_lokis.setter
    def grafana_lokis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGrafanaLokiArgs']]]]):
        pulumi.set(self, "grafana_lokis", value)

    @property
    @pulumi.getter
    def graphites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGraphiteArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/graphite#creating-slos-with-graphite)
        """
        return pulumi.get(self, "graphites")

    @graphites.setter
    def graphites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodGraphiteArgs']]]]):
        pulumi.set(self, "graphites", value)

    @property
    @pulumi.getter
    def honeycombs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodHoneycombArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/honeycomb#creating-slos-with-honeycomb)
        """
        return pulumi.get(self, "honeycombs")

    @honeycombs.setter
    def honeycombs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodHoneycombArgs']]]]):
        pulumi.set(self, "honeycombs", value)

    @property
    @pulumi.getter
    def influxdbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInfluxdbArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#creating-slos-with-influxdb)
        """
        return pulumi.get(self, "influxdbs")

    @influxdbs.setter
    def influxdbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInfluxdbArgs']]]]):
        pulumi.set(self, "influxdbs", value)

    @property
    @pulumi.getter
    def instanas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/instana#creating-slos-with-instana)
        """
        return pulumi.get(self, "instanas")

    @instanas.setter
    def instanas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaArgs']]]]):
        pulumi.set(self, "instanas", value)

    @property
    @pulumi.getter
    def lightsteps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodLightstepArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#creating-slos-with-lightstep)
        """
        return pulumi.get(self, "lightsteps")

    @lightsteps.setter
    def lightsteps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodLightstepArgs']]]]):
        pulumi.set(self, "lightsteps", value)

    @property
    @pulumi.getter
    def newrelics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodNewrelicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#creating-slos-with-new-relic)
        """
        return pulumi.get(self, "newrelics")

    @newrelics.setter
    def newrelics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodNewrelicArgs']]]]):
        pulumi.set(self, "newrelics", value)

    @property
    @pulumi.getter
    def opentsdbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodOpentsdbArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#creating-slos-with-opentsdb)
        """
        return pulumi.get(self, "opentsdbs")

    @opentsdbs.setter
    def opentsdbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodOpentsdbArgs']]]]):
        pulumi.set(self, "opentsdbs", value)

    @property
    @pulumi.getter
    def pingdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodPingdomArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#creating-slos-with-pingdom)
        """
        return pulumi.get(self, "pingdoms")

    @pingdoms.setter
    def pingdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodPingdomArgs']]]]):
        pulumi.set(self, "pingdoms", value)

    @property
    @pulumi.getter
    def prometheuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodPrometheusArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#creating-slos-with-prometheus)
        """
        return pulumi.get(self, "prometheuses")

    @prometheuses.setter
    def prometheuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodPrometheusArgs']]]]):
        pulumi.set(self, "prometheuses", value)

    @property
    @pulumi.getter
    def redshifts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodRedshiftArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/#creating-slos-with-amazon-redshift)
        """
        return pulumi.get(self, "redshifts")

    @redshifts.setter
    def redshifts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodRedshiftArgs']]]]):
        pulumi.set(self, "redshifts", value)

    @property
    @pulumi.getter(name="splunkObservabilities")
    def splunk_observabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSplunkObservabilityArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk-observability)
        """
        return pulumi.get(self, "splunk_observabilities")

    @splunk_observabilities.setter
    def splunk_observabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSplunkObservabilityArgs']]]]):
        pulumi.set(self, "splunk_observabilities", value)

    @property
    @pulumi.getter
    def splunks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSplunkArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk)
        """
        return pulumi.get(self, "splunks")

    @splunks.setter
    def splunks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSplunkArgs']]]]):
        pulumi.set(self, "splunks", value)

    @property
    @pulumi.getter
    def sumologics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSumologicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#creating-slos-with-sumo-logic)
        """
        return pulumi.get(self, "sumologics")

    @sumologics.setter
    def sumologics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodSumologicArgs']]]]):
        pulumi.set(self, "sumologics", value)

    @property
    @pulumi.getter
    def thousandeyes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodThousandeyeArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#creating-slos-with-thousandeyes)
        """
        return pulumi.get(self, "thousandeyes")

    @thousandeyes.setter
    def thousandeyes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodThousandeyeArgs']]]]):
        pulumi.set(self, "thousandeyes", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodAmazonPrometheusArgs:
    def __init__(__self__, *,
                 promql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] promql: Query for the metrics
        """
        pulumi.set(__self__, "promql", promql)

    @property
    @pulumi.getter
    def promql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "promql")

    @promql.setter
    def promql(self, value: pulumi.Input[str]):
        pulumi.set(self, "promql", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodAppdynamicArgs:
    def __init__(__self__, *,
                 application_name: pulumi.Input[str],
                 metric_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] application_name: Name of the added application
        :param pulumi.Input[str] metric_path: Path to the metrics
        """
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "metric_path", metric_path)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Input[str]:
        """
        Name of the added application
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="metricPath")
    def metric_path(self) -> pulumi.Input[str]:
        """
        Path to the metrics
        """
        return pulumi.get(self, "metric_path")

    @metric_path.setter
    def metric_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_path", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodAzureMonitorArgs:
    def __init__(__self__, *,
                 data_type: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorDimensionArgs']]]] = None,
                 kql_query: Optional[pulumi.Input[str]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 metric_namespace: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 workspaces: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorWorkspaceArgs']]]] = None):
        """
        :param pulumi.Input[str] data_type: Specifies source: 'metrics' or 'logs'
        :param pulumi.Input[str] aggregation: Aggregation type [Required for metrics]
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorDimensionArgs']]] dimensions: Dimensions of the metric [Optional for metrics]
        :param pulumi.Input[str] kql_query: Logs query in Kusto Query Language [Required for logs]
        :param pulumi.Input[str] metric_name: Name of the metric [Required for metrics]
        :param pulumi.Input[str] metric_namespace: Namespace of the metric [Optional for metrics]
        :param pulumi.Input[str] resource_id: Identifier of the Azure Cloud resource [Required for metrics]
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorWorkspaceArgs']]] workspaces: Log analytics workspace [Required for logs]
        """
        pulumi.set(__self__, "data_type", data_type)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if kql_query is not None:
            pulumi.set(__self__, "kql_query", kql_query)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if metric_namespace is not None:
            pulumi.set(__self__, "metric_namespace", metric_namespace)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if workspaces is not None:
            pulumi.set(__self__, "workspaces", workspaces)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Input[str]:
        """
        Specifies source: 'metrics' or 'logs'
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregation type [Required for metrics]
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorDimensionArgs']]]]:
        """
        Dimensions of the metric [Optional for metrics]
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter(name="kqlQuery")
    def kql_query(self) -> Optional[pulumi.Input[str]]:
        """
        Logs query in Kusto Query Language [Required for logs]
        """
        return pulumi.get(self, "kql_query")

    @kql_query.setter
    def kql_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kql_query", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the metric [Required for metrics]
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the metric [Optional for metrics]
        """
        return pulumi.get(self, "metric_namespace")

    @metric_namespace.setter
    def metric_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_namespace", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the Azure Cloud resource [Required for metrics]
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def workspaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorWorkspaceArgs']]]]:
        """
        Log analytics workspace [Required for logs]
        """
        return pulumi.get(self, "workspaces")

    @workspaces.setter
    def workspaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodAzureMonitorWorkspaceArgs']]]]):
        pulumi.set(self, "workspaces", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodAzureMonitorDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the previously defined alert method.
        :param pulumi.Input[str] value: Burn rate value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the previously defined alert method.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Burn rate value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodAzureMonitorWorkspaceArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 workspace_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] resource_group: Resource group of the workspace
        :param pulumi.Input[str] subscription_id: Subscription ID of the workspace
        :param pulumi.Input[str] workspace_id: ID of the workspace
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        Resource group of the workspace
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        Subscription ID of the workspace
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        ID of the workspace
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodBigqueryArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] location: Location of you BigQuery
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Location of you BigQuery
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodCloudwatchArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodCloudwatchDimensionArgs']]]] = None,
                 json: Optional[pulumi.Input[str]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 sql: Optional[pulumi.Input[str]] = None,
                 stat: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region: Region of the CloudWatch instance
        :param pulumi.Input[str] account_id: AccountID used with cross-account observability feature
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodCloudwatchDimensionArgs']]] dimensions: Dimensions of the metric [Optional for metrics]
        :param pulumi.Input[str] json: JSON query
        :param pulumi.Input[str] metric_name: Name of the metric [Required for metrics]
        :param pulumi.Input[str] namespace: Namespace of the metric
        :param pulumi.Input[str] sql: SQL query
        :param pulumi.Input[str] stat: Metric data aggregations
        """
        pulumi.set(__self__, "region", region)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if stat is not None:
            pulumi.set(__self__, "stat", stat)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of the CloudWatch instance
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        AccountID used with cross-account observability feature
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodCloudwatchDimensionArgs']]]]:
        """
        Dimensions of the metric [Optional for metrics]
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodCloudwatchDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON query
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the metric [Required for metrics]
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the metric
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def sql(self) -> Optional[pulumi.Input[str]]:
        """
        SQL query
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter
    def stat(self) -> Optional[pulumi.Input[str]]:
        """
        Metric data aggregations
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stat", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodCloudwatchDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the previously defined alert method.
        :param pulumi.Input[str] value: Burn rate value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the previously defined alert method.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Burn rate value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodDatadogArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodDynatraceArgs:
    def __init__(__self__, *,
                 metric_selector: pulumi.Input[str]):
        """
        :param pulumi.Input[str] metric_selector: Selector for the metrics
        """
        pulumi.set(__self__, "metric_selector", metric_selector)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> pulumi.Input[str]:
        """
        Selector for the metrics
        """
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_selector", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodElasticsearchArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] index: Index of metrics we want to query
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        Index of metrics we want to query
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodGcmArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodGrafanaLokiArgs:
    def __init__(__self__, *,
                 logql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] logql: Query for the logs
        """
        pulumi.set(__self__, "logql", logql)

    @property
    @pulumi.getter
    def logql(self) -> pulumi.Input[str]:
        """
        Query for the logs
        """
        return pulumi.get(self, "logql")

    @logql.setter
    def logql(self, value: pulumi.Input[str]):
        pulumi.set(self, "logql", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodGraphiteArgs:
    def __init__(__self__, *,
                 metric_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] metric_path: Path to the metrics
        """
        pulumi.set(__self__, "metric_path", metric_path)

    @property
    @pulumi.getter(name="metricPath")
    def metric_path(self) -> pulumi.Input[str]:
        """
        Path to the metrics
        """
        return pulumi.get(self, "metric_path")

    @metric_path.setter
    def metric_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_path", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodHoneycombArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input[str],
                 attribute: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] calculation: Calculation type
        :param pulumi.Input[str] attribute: Column name - required for all calculation types besides 'CONCURRENCY' and 'COUNT'
        """
        pulumi.set(__self__, "calculation", calculation)
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input[str]:
        """
        Calculation type
        """
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input[str]):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Column name - required for all calculation types besides 'CONCURRENCY' and 'COUNT'
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodInfluxdbArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodInstanaArgs:
    def __init__(__self__, *,
                 metric_type: pulumi.Input[str],
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaApplicationArgs']]]] = None,
                 infrastructures: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaInfrastructureArgs']]]] = None):
        """
        :param pulumi.Input[str] metric_type: Instana metric type 'application' or 'infrastructure'
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaApplicationArgs']]] applications: Infrastructure metric type
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaInfrastructureArgs']]] infrastructures: Infrastructure metric type
        """
        pulumi.set(__self__, "metric_type", metric_type)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> pulumi.Input[str]:
        """
        Instana metric type 'application' or 'infrastructure'
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaApplicationArgs']]]]:
        """
        Infrastructure metric type
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaInfrastructureArgs']]]]:
        """
        Infrastructure metric type
        """
        return pulumi.get(self, "infrastructures")

    @infrastructures.setter
    def infrastructures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaInfrastructureArgs']]]]):
        pulumi.set(self, "infrastructures", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodInstanaApplicationArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 api_query: pulumi.Input[str],
                 group_bies: pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaApplicationGroupByArgs']]],
                 metric_id: pulumi.Input[str],
                 include_internal: Optional[pulumi.Input[bool]] = None,
                 include_synthetic: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] aggregation: Aggregation type [Required for metrics]
        :param pulumi.Input[str] api_query: API query user passes in a JSON format
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaApplicationGroupByArgs']]] group_bies: Group by method
        :param pulumi.Input[str] metric_id: Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        :param pulumi.Input[bool] include_internal: Include internal
        :param pulumi.Input[bool] include_synthetic: Include synthetic
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "api_query", api_query)
        pulumi.set(__self__, "group_bies", group_bies)
        pulumi.set(__self__, "metric_id", metric_id)
        if include_internal is not None:
            pulumi.set(__self__, "include_internal", include_internal)
        if include_synthetic is not None:
            pulumi.set(__self__, "include_synthetic", include_synthetic)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        Aggregation type [Required for metrics]
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="apiQuery")
    def api_query(self) -> pulumi.Input[str]:
        """
        API query user passes in a JSON format
        """
        return pulumi.get(self, "api_query")

    @api_query.setter
    def api_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaApplicationGroupByArgs']]]:
        """
        Group by method
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricGoodInstanaApplicationGroupByArgs']]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Input[str]:
        """
        Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="includeInternal")
    def include_internal(self) -> Optional[pulumi.Input[bool]]:
        """
        Include internal
        """
        return pulumi.get(self, "include_internal")

    @include_internal.setter
    def include_internal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_internal", value)

    @property
    @pulumi.getter(name="includeSynthetic")
    def include_synthetic(self) -> Optional[pulumi.Input[bool]]:
        """
        Include synthetic
        """
        return pulumi.get(self, "include_synthetic")

    @include_synthetic.setter
    def include_synthetic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_synthetic", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodInstanaApplicationGroupByArgs:
    def __init__(__self__, *,
                 tag: pulumi.Input[str],
                 tag_entity: pulumi.Input[str],
                 tag_second_level_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tag: Group by tag
        :param pulumi.Input[str] tag_entity: Tag entity - one of 'DESTINATION', 'SOURCE', 'NOT_APPLICABLE'
        """
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "tag_entity", tag_entity)
        if tag_second_level_key is not None:
            pulumi.set(__self__, "tag_second_level_key", tag_second_level_key)

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Input[str]:
        """
        Group by tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="tagEntity")
    def tag_entity(self) -> pulumi.Input[str]:
        """
        Tag entity - one of 'DESTINATION', 'SOURCE', 'NOT_APPLICABLE'
        """
        return pulumi.get(self, "tag_entity")

    @tag_entity.setter
    def tag_entity(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_entity", value)

    @property
    @pulumi.getter(name="tagSecondLevelKey")
    def tag_second_level_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_second_level_key")

    @tag_second_level_key.setter
    def tag_second_level_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_second_level_key", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodInstanaInfrastructureArgs:
    def __init__(__self__, *,
                 metric_id: pulumi.Input[str],
                 metric_retrieval_method: pulumi.Input[str],
                 plugin_id: pulumi.Input[str],
                 query: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric_id: Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        :param pulumi.Input[str] metric_retrieval_method: Metric retrieval method 'query' or 'snapshot'
        :param pulumi.Input[str] plugin_id: Plugin ID
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] snapshot_id: Snapshot ID
        """
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_retrieval_method", metric_retrieval_method)
        pulumi.set(__self__, "plugin_id", plugin_id)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Input[str]:
        """
        Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="metricRetrievalMethod")
    def metric_retrieval_method(self) -> pulumi.Input[str]:
        """
        Metric retrieval method 'query' or 'snapshot'
        """
        return pulumi.get(self, "metric_retrieval_method")

    @metric_retrieval_method.setter
    def metric_retrieval_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_retrieval_method", value)

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> pulumi.Input[str]:
        """
        Plugin ID
        """
        return pulumi.get(self, "plugin_id")

    @plugin_id.setter
    def plugin_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_id", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Snapshot ID
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodLightstepArgs:
    def __init__(__self__, *,
                 type_of_data: pulumi.Input[str],
                 percentile: Optional[pulumi.Input[float]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 uql: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type_of_data: Type of data to filter by
        :param pulumi.Input[float] percentile: Optional value to filter by percentiles
        :param pulumi.Input[str] stream_id: ID of the metrics stream
        :param pulumi.Input[str] uql: UQL query
        """
        pulumi.set(__self__, "type_of_data", type_of_data)
        if percentile is not None:
            pulumi.set(__self__, "percentile", percentile)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if uql is not None:
            pulumi.set(__self__, "uql", uql)

    @property
    @pulumi.getter(name="typeOfData")
    def type_of_data(self) -> pulumi.Input[str]:
        """
        Type of data to filter by
        """
        return pulumi.get(self, "type_of_data")

    @type_of_data.setter
    def type_of_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_of_data", value)

    @property
    @pulumi.getter
    def percentile(self) -> Optional[pulumi.Input[float]]:
        """
        Optional value to filter by percentiles
        """
        return pulumi.get(self, "percentile")

    @percentile.setter
    def percentile(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percentile", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the metrics stream
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter
    def uql(self) -> Optional[pulumi.Input[str]]:
        """
        UQL query
        """
        return pulumi.get(self, "uql")

    @uql.setter
    def uql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uql", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodNewrelicArgs:
    def __init__(__self__, *,
                 nrql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] nrql: Query for the metrics
        """
        pulumi.set(__self__, "nrql", nrql)

    @property
    @pulumi.getter
    def nrql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "nrql")

    @nrql.setter
    def nrql(self, value: pulumi.Input[str]):
        pulumi.set(self, "nrql", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodOpentsdbArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodPingdomArgs:
    def __init__(__self__, *,
                 check_id: pulumi.Input[str],
                 check_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] check_id: Pingdom uptime or transaction check's ID
        :param pulumi.Input[str] check_type: Pingdom check type - uptime or transaction
        :param pulumi.Input[str] status: Optional for the Uptime checks. Use it to filter the Pingdom check results by status
        """
        pulumi.set(__self__, "check_id", check_id)
        if check_type is not None:
            pulumi.set(__self__, "check_type", check_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="checkId")
    def check_id(self) -> pulumi.Input[str]:
        """
        Pingdom uptime or transaction check's ID
        """
        return pulumi.get(self, "check_id")

    @check_id.setter
    def check_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "check_id", value)

    @property
    @pulumi.getter(name="checkType")
    def check_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pingdom check type - uptime or transaction
        """
        return pulumi.get(self, "check_type")

    @check_type.setter
    def check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Optional for the Uptime checks. Use it to filter the Pingdom check results by status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodPrometheusArgs:
    def __init__(__self__, *,
                 promql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] promql: Query for the metrics
        """
        pulumi.set(__self__, "promql", promql)

    @property
    @pulumi.getter
    def promql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "promql")

    @promql.setter
    def promql(self, value: pulumi.Input[str]):
        pulumi.set(self, "promql", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodRedshiftArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 region: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cluster_id: Redshift custer ID
        :param pulumi.Input[str] database_name: Database name
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] region: Region of the CloudWatch instance
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Redshift custer ID
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        Database name
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of the CloudWatch instance
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodSplunkArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodSplunkObservabilityArgs:
    def __init__(__self__, *,
                 program: pulumi.Input[str]):
        """
        :param pulumi.Input[str] program: Query for the metrics
        """
        pulumi.set(__self__, "program", program)

    @property
    @pulumi.getter
    def program(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "program")

    @program.setter
    def program(self, value: pulumi.Input[str]):
        pulumi.set(self, "program", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodSumologicArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 type: pulumi.Input[str],
                 quantization: Optional[pulumi.Input[str]] = None,
                 rollup: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] type: Sumologic source - metrics or logs
        :param pulumi.Input[str] quantization: Period of data aggregation
        :param pulumi.Input[str] rollup: Aggregation function - avg, sum, min, max, count, none
        """
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "type", type)
        if quantization is not None:
            pulumi.set(__self__, "quantization", quantization)
        if rollup is not None:
            pulumi.set(__self__, "rollup", rollup)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Sumologic source - metrics or logs
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def quantization(self) -> Optional[pulumi.Input[str]]:
        """
        Period of data aggregation
        """
        return pulumi.get(self, "quantization")

    @quantization.setter
    def quantization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quantization", value)

    @property
    @pulumi.getter
    def rollup(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregation function - avg, sum, min, max, count, none
        """
        return pulumi.get(self, "rollup")

    @rollup.setter
    def rollup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rollup", value)


@pulumi.input_type
class SloObjectiveCountMetricGoodThousandeyeArgs:
    def __init__(__self__, *,
                 test_id: pulumi.Input[int]):
        """
        :param pulumi.Input[int] test_id: ID of the test
        """
        pulumi.set(__self__, "test_id", test_id)

    @property
    @pulumi.getter(name="testId")
    def test_id(self) -> pulumi.Input[int]:
        """
        ID of the test
        """
        return pulumi.get(self, "test_id")

    @test_id.setter
    def test_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "test_id", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalArgs:
    def __init__(__self__, *,
                 amazon_prometheuses: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAmazonPrometheusArgs']]]] = None,
                 appdynamics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAppdynamicArgs']]]] = None,
                 azure_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorArgs']]]] = None,
                 bigqueries: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalBigqueryArgs']]]] = None,
                 cloudwatches: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalCloudwatchArgs']]]] = None,
                 datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalDatadogArgs']]]] = None,
                 dynatraces: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalDynatraceArgs']]]] = None,
                 elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalElasticsearchArgs']]]] = None,
                 gcms: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGcmArgs']]]] = None,
                 grafana_lokis: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGrafanaLokiArgs']]]] = None,
                 graphites: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGraphiteArgs']]]] = None,
                 honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalHoneycombArgs']]]] = None,
                 influxdbs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInfluxdbArgs']]]] = None,
                 instanas: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaArgs']]]] = None,
                 lightsteps: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalLightstepArgs']]]] = None,
                 newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalNewrelicArgs']]]] = None,
                 opentsdbs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalOpentsdbArgs']]]] = None,
                 pingdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalPingdomArgs']]]] = None,
                 prometheuses: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalPrometheusArgs']]]] = None,
                 redshifts: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalRedshiftArgs']]]] = None,
                 splunk_observabilities: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSplunkObservabilityArgs']]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSplunkArgs']]]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSumologicArgs']]]] = None,
                 thousandeyes: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalThousandeyeArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAmazonPrometheusArgs']]] amazon_prometheuses: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#creating-slos-with-ams-prometheus)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAppdynamicArgs']]] appdynamics: [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#creating-slos-with-appdynamics)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorArgs']]] azure_monitors: [Configuration documentation](https://docs.nobl9.com/Sources/azure-monitor#creating-slos-with-azure-monitor)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalBigqueryArgs']]] bigqueries: [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#creating-slos-with-bigquery)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalCloudwatchArgs']]] cloudwatches: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#creating-slos-with-cloudwatch)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalDatadogArgs']]] datadogs: [Configuration documentation](https://docs.nobl9.com/Sources/datadog#creating-slos-with-datadog)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalDynatraceArgs']]] dynatraces: [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#creating-slos-with-dynatrace)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalElasticsearchArgs']]] elasticsearches: [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#creating-slos-with-elasticsearch)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGcmArgs']]] gcms: [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#creating-slos-with-google-cloud-monitoring)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGrafanaLokiArgs']]] grafana_lokis: [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#creating-slos-with-grafana-loki)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGraphiteArgs']]] graphites: [Configuration documentation](https://docs.nobl9.com/Sources/graphite#creating-slos-with-graphite)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalHoneycombArgs']]] honeycombs: [Configuration documentation](https://docs.nobl9.com/Sources/honeycomb#creating-slos-with-honeycomb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInfluxdbArgs']]] influxdbs: [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#creating-slos-with-influxdb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaArgs']]] instanas: [Configuration documentation](https://docs.nobl9.com/Sources/instana#creating-slos-with-instana)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalLightstepArgs']]] lightsteps: [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#creating-slos-with-lightstep)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalNewrelicArgs']]] newrelics: [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#creating-slos-with-new-relic)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalOpentsdbArgs']]] opentsdbs: [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#creating-slos-with-opentsdb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalPingdomArgs']]] pingdoms: [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#creating-slos-with-pingdom)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalPrometheusArgs']]] prometheuses: [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#creating-slos-with-prometheus)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalRedshiftArgs']]] redshifts: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/#creating-slos-with-amazon-redshift)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSplunkObservabilityArgs']]] splunk_observabilities: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk-observability)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSplunkArgs']]] splunks: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSumologicArgs']]] sumologics: [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#creating-slos-with-sumo-logic)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalThousandeyeArgs']]] thousandeyes: [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#creating-slos-with-thousandeyes)
        """
        if amazon_prometheuses is not None:
            pulumi.set(__self__, "amazon_prometheuses", amazon_prometheuses)
        if appdynamics is not None:
            pulumi.set(__self__, "appdynamics", appdynamics)
        if azure_monitors is not None:
            pulumi.set(__self__, "azure_monitors", azure_monitors)
        if bigqueries is not None:
            pulumi.set(__self__, "bigqueries", bigqueries)
        if cloudwatches is not None:
            pulumi.set(__self__, "cloudwatches", cloudwatches)
        if datadogs is not None:
            pulumi.set(__self__, "datadogs", datadogs)
        if dynatraces is not None:
            pulumi.set(__self__, "dynatraces", dynatraces)
        if elasticsearches is not None:
            pulumi.set(__self__, "elasticsearches", elasticsearches)
        if gcms is not None:
            pulumi.set(__self__, "gcms", gcms)
        if grafana_lokis is not None:
            pulumi.set(__self__, "grafana_lokis", grafana_lokis)
        if graphites is not None:
            pulumi.set(__self__, "graphites", graphites)
        if honeycombs is not None:
            pulumi.set(__self__, "honeycombs", honeycombs)
        if influxdbs is not None:
            pulumi.set(__self__, "influxdbs", influxdbs)
        if instanas is not None:
            pulumi.set(__self__, "instanas", instanas)
        if lightsteps is not None:
            pulumi.set(__self__, "lightsteps", lightsteps)
        if newrelics is not None:
            pulumi.set(__self__, "newrelics", newrelics)
        if opentsdbs is not None:
            pulumi.set(__self__, "opentsdbs", opentsdbs)
        if pingdoms is not None:
            pulumi.set(__self__, "pingdoms", pingdoms)
        if prometheuses is not None:
            pulumi.set(__self__, "prometheuses", prometheuses)
        if redshifts is not None:
            pulumi.set(__self__, "redshifts", redshifts)
        if splunk_observabilities is not None:
            pulumi.set(__self__, "splunk_observabilities", splunk_observabilities)
        if splunks is not None:
            pulumi.set(__self__, "splunks", splunks)
        if sumologics is not None:
            pulumi.set(__self__, "sumologics", sumologics)
        if thousandeyes is not None:
            pulumi.set(__self__, "thousandeyes", thousandeyes)

    @property
    @pulumi.getter(name="amazonPrometheuses")
    def amazon_prometheuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAmazonPrometheusArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#creating-slos-with-ams-prometheus)
        """
        return pulumi.get(self, "amazon_prometheuses")

    @amazon_prometheuses.setter
    def amazon_prometheuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAmazonPrometheusArgs']]]]):
        pulumi.set(self, "amazon_prometheuses", value)

    @property
    @pulumi.getter
    def appdynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAppdynamicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#creating-slos-with-appdynamics)
        """
        return pulumi.get(self, "appdynamics")

    @appdynamics.setter
    def appdynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAppdynamicArgs']]]]):
        pulumi.set(self, "appdynamics", value)

    @property
    @pulumi.getter(name="azureMonitors")
    def azure_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/azure-monitor#creating-slos-with-azure-monitor)
        """
        return pulumi.get(self, "azure_monitors")

    @azure_monitors.setter
    def azure_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorArgs']]]]):
        pulumi.set(self, "azure_monitors", value)

    @property
    @pulumi.getter
    def bigqueries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalBigqueryArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#creating-slos-with-bigquery)
        """
        return pulumi.get(self, "bigqueries")

    @bigqueries.setter
    def bigqueries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalBigqueryArgs']]]]):
        pulumi.set(self, "bigqueries", value)

    @property
    @pulumi.getter
    def cloudwatches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalCloudwatchArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#creating-slos-with-cloudwatch)
        """
        return pulumi.get(self, "cloudwatches")

    @cloudwatches.setter
    def cloudwatches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalCloudwatchArgs']]]]):
        pulumi.set(self, "cloudwatches", value)

    @property
    @pulumi.getter
    def datadogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalDatadogArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/datadog#creating-slos-with-datadog)
        """
        return pulumi.get(self, "datadogs")

    @datadogs.setter
    def datadogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalDatadogArgs']]]]):
        pulumi.set(self, "datadogs", value)

    @property
    @pulumi.getter
    def dynatraces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalDynatraceArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#creating-slos-with-dynatrace)
        """
        return pulumi.get(self, "dynatraces")

    @dynatraces.setter
    def dynatraces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalDynatraceArgs']]]]):
        pulumi.set(self, "dynatraces", value)

    @property
    @pulumi.getter
    def elasticsearches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalElasticsearchArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#creating-slos-with-elasticsearch)
        """
        return pulumi.get(self, "elasticsearches")

    @elasticsearches.setter
    def elasticsearches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalElasticsearchArgs']]]]):
        pulumi.set(self, "elasticsearches", value)

    @property
    @pulumi.getter
    def gcms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGcmArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#creating-slos-with-google-cloud-monitoring)
        """
        return pulumi.get(self, "gcms")

    @gcms.setter
    def gcms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGcmArgs']]]]):
        pulumi.set(self, "gcms", value)

    @property
    @pulumi.getter(name="grafanaLokis")
    def grafana_lokis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGrafanaLokiArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#creating-slos-with-grafana-loki)
        """
        return pulumi.get(self, "grafana_lokis")

    @grafana_lokis.setter
    def grafana_lokis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGrafanaLokiArgs']]]]):
        pulumi.set(self, "grafana_lokis", value)

    @property
    @pulumi.getter
    def graphites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGraphiteArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/graphite#creating-slos-with-graphite)
        """
        return pulumi.get(self, "graphites")

    @graphites.setter
    def graphites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalGraphiteArgs']]]]):
        pulumi.set(self, "graphites", value)

    @property
    @pulumi.getter
    def honeycombs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalHoneycombArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/honeycomb#creating-slos-with-honeycomb)
        """
        return pulumi.get(self, "honeycombs")

    @honeycombs.setter
    def honeycombs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalHoneycombArgs']]]]):
        pulumi.set(self, "honeycombs", value)

    @property
    @pulumi.getter
    def influxdbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInfluxdbArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#creating-slos-with-influxdb)
        """
        return pulumi.get(self, "influxdbs")

    @influxdbs.setter
    def influxdbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInfluxdbArgs']]]]):
        pulumi.set(self, "influxdbs", value)

    @property
    @pulumi.getter
    def instanas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/instana#creating-slos-with-instana)
        """
        return pulumi.get(self, "instanas")

    @instanas.setter
    def instanas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaArgs']]]]):
        pulumi.set(self, "instanas", value)

    @property
    @pulumi.getter
    def lightsteps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalLightstepArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#creating-slos-with-lightstep)
        """
        return pulumi.get(self, "lightsteps")

    @lightsteps.setter
    def lightsteps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalLightstepArgs']]]]):
        pulumi.set(self, "lightsteps", value)

    @property
    @pulumi.getter
    def newrelics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalNewrelicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#creating-slos-with-new-relic)
        """
        return pulumi.get(self, "newrelics")

    @newrelics.setter
    def newrelics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalNewrelicArgs']]]]):
        pulumi.set(self, "newrelics", value)

    @property
    @pulumi.getter
    def opentsdbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalOpentsdbArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#creating-slos-with-opentsdb)
        """
        return pulumi.get(self, "opentsdbs")

    @opentsdbs.setter
    def opentsdbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalOpentsdbArgs']]]]):
        pulumi.set(self, "opentsdbs", value)

    @property
    @pulumi.getter
    def pingdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalPingdomArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#creating-slos-with-pingdom)
        """
        return pulumi.get(self, "pingdoms")

    @pingdoms.setter
    def pingdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalPingdomArgs']]]]):
        pulumi.set(self, "pingdoms", value)

    @property
    @pulumi.getter
    def prometheuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalPrometheusArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#creating-slos-with-prometheus)
        """
        return pulumi.get(self, "prometheuses")

    @prometheuses.setter
    def prometheuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalPrometheusArgs']]]]):
        pulumi.set(self, "prometheuses", value)

    @property
    @pulumi.getter
    def redshifts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalRedshiftArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/#creating-slos-with-amazon-redshift)
        """
        return pulumi.get(self, "redshifts")

    @redshifts.setter
    def redshifts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalRedshiftArgs']]]]):
        pulumi.set(self, "redshifts", value)

    @property
    @pulumi.getter(name="splunkObservabilities")
    def splunk_observabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSplunkObservabilityArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk-observability)
        """
        return pulumi.get(self, "splunk_observabilities")

    @splunk_observabilities.setter
    def splunk_observabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSplunkObservabilityArgs']]]]):
        pulumi.set(self, "splunk_observabilities", value)

    @property
    @pulumi.getter
    def splunks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSplunkArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk)
        """
        return pulumi.get(self, "splunks")

    @splunks.setter
    def splunks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSplunkArgs']]]]):
        pulumi.set(self, "splunks", value)

    @property
    @pulumi.getter
    def sumologics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSumologicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#creating-slos-with-sumo-logic)
        """
        return pulumi.get(self, "sumologics")

    @sumologics.setter
    def sumologics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalSumologicArgs']]]]):
        pulumi.set(self, "sumologics", value)

    @property
    @pulumi.getter
    def thousandeyes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalThousandeyeArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#creating-slos-with-thousandeyes)
        """
        return pulumi.get(self, "thousandeyes")

    @thousandeyes.setter
    def thousandeyes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalThousandeyeArgs']]]]):
        pulumi.set(self, "thousandeyes", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalAmazonPrometheusArgs:
    def __init__(__self__, *,
                 promql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] promql: Query for the metrics
        """
        pulumi.set(__self__, "promql", promql)

    @property
    @pulumi.getter
    def promql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "promql")

    @promql.setter
    def promql(self, value: pulumi.Input[str]):
        pulumi.set(self, "promql", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalAppdynamicArgs:
    def __init__(__self__, *,
                 application_name: pulumi.Input[str],
                 metric_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] application_name: Name of the added application
        :param pulumi.Input[str] metric_path: Path to the metrics
        """
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "metric_path", metric_path)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Input[str]:
        """
        Name of the added application
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="metricPath")
    def metric_path(self) -> pulumi.Input[str]:
        """
        Path to the metrics
        """
        return pulumi.get(self, "metric_path")

    @metric_path.setter
    def metric_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_path", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalAzureMonitorArgs:
    def __init__(__self__, *,
                 data_type: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorDimensionArgs']]]] = None,
                 kql_query: Optional[pulumi.Input[str]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 metric_namespace: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 workspaces: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorWorkspaceArgs']]]] = None):
        """
        :param pulumi.Input[str] data_type: Specifies source: 'metrics' or 'logs'
        :param pulumi.Input[str] aggregation: Aggregation type [Required for metrics]
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorDimensionArgs']]] dimensions: Dimensions of the metric [Optional for metrics]
        :param pulumi.Input[str] kql_query: Logs query in Kusto Query Language [Required for logs]
        :param pulumi.Input[str] metric_name: Name of the metric [Required for metrics]
        :param pulumi.Input[str] metric_namespace: Namespace of the metric [Optional for metrics]
        :param pulumi.Input[str] resource_id: Identifier of the Azure Cloud resource [Required for metrics]
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorWorkspaceArgs']]] workspaces: Log analytics workspace [Required for logs]
        """
        pulumi.set(__self__, "data_type", data_type)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if kql_query is not None:
            pulumi.set(__self__, "kql_query", kql_query)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if metric_namespace is not None:
            pulumi.set(__self__, "metric_namespace", metric_namespace)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if workspaces is not None:
            pulumi.set(__self__, "workspaces", workspaces)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Input[str]:
        """
        Specifies source: 'metrics' or 'logs'
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregation type [Required for metrics]
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorDimensionArgs']]]]:
        """
        Dimensions of the metric [Optional for metrics]
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter(name="kqlQuery")
    def kql_query(self) -> Optional[pulumi.Input[str]]:
        """
        Logs query in Kusto Query Language [Required for logs]
        """
        return pulumi.get(self, "kql_query")

    @kql_query.setter
    def kql_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kql_query", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the metric [Required for metrics]
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the metric [Optional for metrics]
        """
        return pulumi.get(self, "metric_namespace")

    @metric_namespace.setter
    def metric_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_namespace", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the Azure Cloud resource [Required for metrics]
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def workspaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorWorkspaceArgs']]]]:
        """
        Log analytics workspace [Required for logs]
        """
        return pulumi.get(self, "workspaces")

    @workspaces.setter
    def workspaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalAzureMonitorWorkspaceArgs']]]]):
        pulumi.set(self, "workspaces", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalAzureMonitorDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the previously defined alert method.
        :param pulumi.Input[str] value: Burn rate value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the previously defined alert method.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Burn rate value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalAzureMonitorWorkspaceArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 workspace_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] resource_group: Resource group of the workspace
        :param pulumi.Input[str] subscription_id: Subscription ID of the workspace
        :param pulumi.Input[str] workspace_id: ID of the workspace
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        Resource group of the workspace
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        Subscription ID of the workspace
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        ID of the workspace
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalBigqueryArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] location: Location of you BigQuery
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Location of you BigQuery
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalCloudwatchArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalCloudwatchDimensionArgs']]]] = None,
                 json: Optional[pulumi.Input[str]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 sql: Optional[pulumi.Input[str]] = None,
                 stat: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region: Region of the CloudWatch instance
        :param pulumi.Input[str] account_id: AccountID used with cross-account observability feature
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalCloudwatchDimensionArgs']]] dimensions: Dimensions of the metric [Optional for metrics]
        :param pulumi.Input[str] json: JSON query
        :param pulumi.Input[str] metric_name: Name of the metric [Required for metrics]
        :param pulumi.Input[str] namespace: Namespace of the metric
        :param pulumi.Input[str] sql: SQL query
        :param pulumi.Input[str] stat: Metric data aggregations
        """
        pulumi.set(__self__, "region", region)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if stat is not None:
            pulumi.set(__self__, "stat", stat)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of the CloudWatch instance
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        AccountID used with cross-account observability feature
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalCloudwatchDimensionArgs']]]]:
        """
        Dimensions of the metric [Optional for metrics]
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalCloudwatchDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON query
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the metric [Required for metrics]
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the metric
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def sql(self) -> Optional[pulumi.Input[str]]:
        """
        SQL query
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter
    def stat(self) -> Optional[pulumi.Input[str]]:
        """
        Metric data aggregations
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stat", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalCloudwatchDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the previously defined alert method.
        :param pulumi.Input[str] value: Burn rate value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the previously defined alert method.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Burn rate value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalDatadogArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalDynatraceArgs:
    def __init__(__self__, *,
                 metric_selector: pulumi.Input[str]):
        """
        :param pulumi.Input[str] metric_selector: Selector for the metrics
        """
        pulumi.set(__self__, "metric_selector", metric_selector)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> pulumi.Input[str]:
        """
        Selector for the metrics
        """
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_selector", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalElasticsearchArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] index: Index of metrics we want to query
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        Index of metrics we want to query
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalGcmArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalGrafanaLokiArgs:
    def __init__(__self__, *,
                 logql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] logql: Query for the logs
        """
        pulumi.set(__self__, "logql", logql)

    @property
    @pulumi.getter
    def logql(self) -> pulumi.Input[str]:
        """
        Query for the logs
        """
        return pulumi.get(self, "logql")

    @logql.setter
    def logql(self, value: pulumi.Input[str]):
        pulumi.set(self, "logql", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalGraphiteArgs:
    def __init__(__self__, *,
                 metric_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] metric_path: Path to the metrics
        """
        pulumi.set(__self__, "metric_path", metric_path)

    @property
    @pulumi.getter(name="metricPath")
    def metric_path(self) -> pulumi.Input[str]:
        """
        Path to the metrics
        """
        return pulumi.get(self, "metric_path")

    @metric_path.setter
    def metric_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_path", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalHoneycombArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input[str],
                 attribute: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] calculation: Calculation type
        :param pulumi.Input[str] attribute: Column name - required for all calculation types besides 'CONCURRENCY' and 'COUNT'
        """
        pulumi.set(__self__, "calculation", calculation)
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input[str]:
        """
        Calculation type
        """
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input[str]):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Column name - required for all calculation types besides 'CONCURRENCY' and 'COUNT'
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalInfluxdbArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalInstanaArgs:
    def __init__(__self__, *,
                 metric_type: pulumi.Input[str],
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaApplicationArgs']]]] = None,
                 infrastructures: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaInfrastructureArgs']]]] = None):
        """
        :param pulumi.Input[str] metric_type: Instana metric type 'application' or 'infrastructure'
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaApplicationArgs']]] applications: Infrastructure metric type
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaInfrastructureArgs']]] infrastructures: Infrastructure metric type
        """
        pulumi.set(__self__, "metric_type", metric_type)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> pulumi.Input[str]:
        """
        Instana metric type 'application' or 'infrastructure'
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaApplicationArgs']]]]:
        """
        Infrastructure metric type
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaInfrastructureArgs']]]]:
        """
        Infrastructure metric type
        """
        return pulumi.get(self, "infrastructures")

    @infrastructures.setter
    def infrastructures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaInfrastructureArgs']]]]):
        pulumi.set(self, "infrastructures", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalInstanaApplicationArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 api_query: pulumi.Input[str],
                 group_bies: pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaApplicationGroupByArgs']]],
                 metric_id: pulumi.Input[str],
                 include_internal: Optional[pulumi.Input[bool]] = None,
                 include_synthetic: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] aggregation: Aggregation type [Required for metrics]
        :param pulumi.Input[str] api_query: API query user passes in a JSON format
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaApplicationGroupByArgs']]] group_bies: Group by method
        :param pulumi.Input[str] metric_id: Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        :param pulumi.Input[bool] include_internal: Include internal
        :param pulumi.Input[bool] include_synthetic: Include synthetic
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "api_query", api_query)
        pulumi.set(__self__, "group_bies", group_bies)
        pulumi.set(__self__, "metric_id", metric_id)
        if include_internal is not None:
            pulumi.set(__self__, "include_internal", include_internal)
        if include_synthetic is not None:
            pulumi.set(__self__, "include_synthetic", include_synthetic)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        Aggregation type [Required for metrics]
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="apiQuery")
    def api_query(self) -> pulumi.Input[str]:
        """
        API query user passes in a JSON format
        """
        return pulumi.get(self, "api_query")

    @api_query.setter
    def api_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaApplicationGroupByArgs']]]:
        """
        Group by method
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: pulumi.Input[Sequence[pulumi.Input['SloObjectiveCountMetricTotalInstanaApplicationGroupByArgs']]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Input[str]:
        """
        Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="includeInternal")
    def include_internal(self) -> Optional[pulumi.Input[bool]]:
        """
        Include internal
        """
        return pulumi.get(self, "include_internal")

    @include_internal.setter
    def include_internal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_internal", value)

    @property
    @pulumi.getter(name="includeSynthetic")
    def include_synthetic(self) -> Optional[pulumi.Input[bool]]:
        """
        Include synthetic
        """
        return pulumi.get(self, "include_synthetic")

    @include_synthetic.setter
    def include_synthetic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_synthetic", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalInstanaApplicationGroupByArgs:
    def __init__(__self__, *,
                 tag: pulumi.Input[str],
                 tag_entity: pulumi.Input[str],
                 tag_second_level_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tag: Group by tag
        :param pulumi.Input[str] tag_entity: Tag entity - one of 'DESTINATION', 'SOURCE', 'NOT_APPLICABLE'
        """
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "tag_entity", tag_entity)
        if tag_second_level_key is not None:
            pulumi.set(__self__, "tag_second_level_key", tag_second_level_key)

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Input[str]:
        """
        Group by tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="tagEntity")
    def tag_entity(self) -> pulumi.Input[str]:
        """
        Tag entity - one of 'DESTINATION', 'SOURCE', 'NOT_APPLICABLE'
        """
        return pulumi.get(self, "tag_entity")

    @tag_entity.setter
    def tag_entity(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_entity", value)

    @property
    @pulumi.getter(name="tagSecondLevelKey")
    def tag_second_level_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_second_level_key")

    @tag_second_level_key.setter
    def tag_second_level_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_second_level_key", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalInstanaInfrastructureArgs:
    def __init__(__self__, *,
                 metric_id: pulumi.Input[str],
                 metric_retrieval_method: pulumi.Input[str],
                 plugin_id: pulumi.Input[str],
                 query: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric_id: Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        :param pulumi.Input[str] metric_retrieval_method: Metric retrieval method 'query' or 'snapshot'
        :param pulumi.Input[str] plugin_id: Plugin ID
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] snapshot_id: Snapshot ID
        """
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_retrieval_method", metric_retrieval_method)
        pulumi.set(__self__, "plugin_id", plugin_id)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Input[str]:
        """
        Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="metricRetrievalMethod")
    def metric_retrieval_method(self) -> pulumi.Input[str]:
        """
        Metric retrieval method 'query' or 'snapshot'
        """
        return pulumi.get(self, "metric_retrieval_method")

    @metric_retrieval_method.setter
    def metric_retrieval_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_retrieval_method", value)

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> pulumi.Input[str]:
        """
        Plugin ID
        """
        return pulumi.get(self, "plugin_id")

    @plugin_id.setter
    def plugin_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_id", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Snapshot ID
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalLightstepArgs:
    def __init__(__self__, *,
                 type_of_data: pulumi.Input[str],
                 percentile: Optional[pulumi.Input[float]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 uql: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type_of_data: Type of data to filter by
        :param pulumi.Input[float] percentile: Optional value to filter by percentiles
        :param pulumi.Input[str] stream_id: ID of the metrics stream
        :param pulumi.Input[str] uql: UQL query
        """
        pulumi.set(__self__, "type_of_data", type_of_data)
        if percentile is not None:
            pulumi.set(__self__, "percentile", percentile)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if uql is not None:
            pulumi.set(__self__, "uql", uql)

    @property
    @pulumi.getter(name="typeOfData")
    def type_of_data(self) -> pulumi.Input[str]:
        """
        Type of data to filter by
        """
        return pulumi.get(self, "type_of_data")

    @type_of_data.setter
    def type_of_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_of_data", value)

    @property
    @pulumi.getter
    def percentile(self) -> Optional[pulumi.Input[float]]:
        """
        Optional value to filter by percentiles
        """
        return pulumi.get(self, "percentile")

    @percentile.setter
    def percentile(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percentile", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the metrics stream
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter
    def uql(self) -> Optional[pulumi.Input[str]]:
        """
        UQL query
        """
        return pulumi.get(self, "uql")

    @uql.setter
    def uql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uql", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalNewrelicArgs:
    def __init__(__self__, *,
                 nrql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] nrql: Query for the metrics
        """
        pulumi.set(__self__, "nrql", nrql)

    @property
    @pulumi.getter
    def nrql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "nrql")

    @nrql.setter
    def nrql(self, value: pulumi.Input[str]):
        pulumi.set(self, "nrql", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalOpentsdbArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalPingdomArgs:
    def __init__(__self__, *,
                 check_id: pulumi.Input[str],
                 check_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] check_id: Pingdom uptime or transaction check's ID
        :param pulumi.Input[str] check_type: Pingdom check type - uptime or transaction
        :param pulumi.Input[str] status: Optional for the Uptime checks. Use it to filter the Pingdom check results by status
        """
        pulumi.set(__self__, "check_id", check_id)
        if check_type is not None:
            pulumi.set(__self__, "check_type", check_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="checkId")
    def check_id(self) -> pulumi.Input[str]:
        """
        Pingdom uptime or transaction check's ID
        """
        return pulumi.get(self, "check_id")

    @check_id.setter
    def check_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "check_id", value)

    @property
    @pulumi.getter(name="checkType")
    def check_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pingdom check type - uptime or transaction
        """
        return pulumi.get(self, "check_type")

    @check_type.setter
    def check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Optional for the Uptime checks. Use it to filter the Pingdom check results by status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalPrometheusArgs:
    def __init__(__self__, *,
                 promql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] promql: Query for the metrics
        """
        pulumi.set(__self__, "promql", promql)

    @property
    @pulumi.getter
    def promql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "promql")

    @promql.setter
    def promql(self, value: pulumi.Input[str]):
        pulumi.set(self, "promql", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalRedshiftArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 region: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cluster_id: Redshift custer ID
        :param pulumi.Input[str] database_name: Database name
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] region: Region of the CloudWatch instance
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Redshift custer ID
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        Database name
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of the CloudWatch instance
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalSplunkArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalSplunkObservabilityArgs:
    def __init__(__self__, *,
                 program: pulumi.Input[str]):
        """
        :param pulumi.Input[str] program: Query for the metrics
        """
        pulumi.set(__self__, "program", program)

    @property
    @pulumi.getter
    def program(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "program")

    @program.setter
    def program(self, value: pulumi.Input[str]):
        pulumi.set(self, "program", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalSumologicArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 type: pulumi.Input[str],
                 quantization: Optional[pulumi.Input[str]] = None,
                 rollup: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] type: Sumologic source - metrics or logs
        :param pulumi.Input[str] quantization: Period of data aggregation
        :param pulumi.Input[str] rollup: Aggregation function - avg, sum, min, max, count, none
        """
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "type", type)
        if quantization is not None:
            pulumi.set(__self__, "quantization", quantization)
        if rollup is not None:
            pulumi.set(__self__, "rollup", rollup)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Sumologic source - metrics or logs
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def quantization(self) -> Optional[pulumi.Input[str]]:
        """
        Period of data aggregation
        """
        return pulumi.get(self, "quantization")

    @quantization.setter
    def quantization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quantization", value)

    @property
    @pulumi.getter
    def rollup(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregation function - avg, sum, min, max, count, none
        """
        return pulumi.get(self, "rollup")

    @rollup.setter
    def rollup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rollup", value)


@pulumi.input_type
class SloObjectiveCountMetricTotalThousandeyeArgs:
    def __init__(__self__, *,
                 test_id: pulumi.Input[int]):
        """
        :param pulumi.Input[int] test_id: ID of the test
        """
        pulumi.set(__self__, "test_id", test_id)

    @property
    @pulumi.getter(name="testId")
    def test_id(self) -> pulumi.Input[int]:
        """
        ID of the test
        """
        return pulumi.get(self, "test_id")

    @test_id.setter
    def test_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "test_id", value)


@pulumi.input_type
class SloObjectiveRawMetricArgs:
    def __init__(__self__, *,
                 queries: pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryArgs']]] queries: Query for the metrics
        """
        pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def queries(self) -> pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryArgs']]]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryArgs']]]):
        pulumi.set(self, "queries", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryArgs:
    def __init__(__self__, *,
                 amazon_prometheuses: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAmazonPrometheusArgs']]]] = None,
                 appdynamics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAppdynamicArgs']]]] = None,
                 azure_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorArgs']]]] = None,
                 bigqueries: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryBigqueryArgs']]]] = None,
                 cloudwatches: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryCloudwatchArgs']]]] = None,
                 datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryDatadogArgs']]]] = None,
                 dynatraces: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryDynatraceArgs']]]] = None,
                 elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryElasticsearchArgs']]]] = None,
                 gcms: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGcmArgs']]]] = None,
                 grafana_lokis: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGrafanaLokiArgs']]]] = None,
                 graphites: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGraphiteArgs']]]] = None,
                 honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryHoneycombArgs']]]] = None,
                 influxdbs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInfluxdbArgs']]]] = None,
                 instanas: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaArgs']]]] = None,
                 lightsteps: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryLightstepArgs']]]] = None,
                 newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryNewrelicArgs']]]] = None,
                 opentsdbs: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryOpentsdbArgs']]]] = None,
                 pingdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryPingdomArgs']]]] = None,
                 prometheuses: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryPrometheusArgs']]]] = None,
                 redshifts: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryRedshiftArgs']]]] = None,
                 splunk_observabilities: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySplunkObservabilityArgs']]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySplunkArgs']]]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySumologicArgs']]]] = None,
                 thousandeyes: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryThousandeyeArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAmazonPrometheusArgs']]] amazon_prometheuses: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#creating-slos-with-ams-prometheus)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAppdynamicArgs']]] appdynamics: [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#creating-slos-with-appdynamics)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorArgs']]] azure_monitors: [Configuration documentation](https://docs.nobl9.com/Sources/azure-monitor#creating-slos-with-azure-monitor)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryBigqueryArgs']]] bigqueries: [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#creating-slos-with-bigquery)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryCloudwatchArgs']]] cloudwatches: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#creating-slos-with-cloudwatch)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryDatadogArgs']]] datadogs: [Configuration documentation](https://docs.nobl9.com/Sources/datadog#creating-slos-with-datadog)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryDynatraceArgs']]] dynatraces: [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#creating-slos-with-dynatrace)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryElasticsearchArgs']]] elasticsearches: [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#creating-slos-with-elasticsearch)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGcmArgs']]] gcms: [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#creating-slos-with-google-cloud-monitoring)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGrafanaLokiArgs']]] grafana_lokis: [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#creating-slos-with-grafana-loki)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGraphiteArgs']]] graphites: [Configuration documentation](https://docs.nobl9.com/Sources/graphite#creating-slos-with-graphite)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryHoneycombArgs']]] honeycombs: [Configuration documentation](https://docs.nobl9.com/Sources/honeycomb#creating-slos-with-honeycomb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInfluxdbArgs']]] influxdbs: [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#creating-slos-with-influxdb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaArgs']]] instanas: [Configuration documentation](https://docs.nobl9.com/Sources/instana#creating-slos-with-instana)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryLightstepArgs']]] lightsteps: [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#creating-slos-with-lightstep)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryNewrelicArgs']]] newrelics: [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#creating-slos-with-new-relic)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryOpentsdbArgs']]] opentsdbs: [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#creating-slos-with-opentsdb)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryPingdomArgs']]] pingdoms: [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#creating-slos-with-pingdom)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryPrometheusArgs']]] prometheuses: [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#creating-slos-with-prometheus)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryRedshiftArgs']]] redshifts: [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/#creating-slos-with-amazon-redshift)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySplunkObservabilityArgs']]] splunk_observabilities: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk-observability)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySplunkArgs']]] splunks: [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySumologicArgs']]] sumologics: [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#creating-slos-with-sumo-logic)
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryThousandeyeArgs']]] thousandeyes: [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#creating-slos-with-thousandeyes)
        """
        if amazon_prometheuses is not None:
            pulumi.set(__self__, "amazon_prometheuses", amazon_prometheuses)
        if appdynamics is not None:
            pulumi.set(__self__, "appdynamics", appdynamics)
        if azure_monitors is not None:
            pulumi.set(__self__, "azure_monitors", azure_monitors)
        if bigqueries is not None:
            pulumi.set(__self__, "bigqueries", bigqueries)
        if cloudwatches is not None:
            pulumi.set(__self__, "cloudwatches", cloudwatches)
        if datadogs is not None:
            pulumi.set(__self__, "datadogs", datadogs)
        if dynatraces is not None:
            pulumi.set(__self__, "dynatraces", dynatraces)
        if elasticsearches is not None:
            pulumi.set(__self__, "elasticsearches", elasticsearches)
        if gcms is not None:
            pulumi.set(__self__, "gcms", gcms)
        if grafana_lokis is not None:
            pulumi.set(__self__, "grafana_lokis", grafana_lokis)
        if graphites is not None:
            pulumi.set(__self__, "graphites", graphites)
        if honeycombs is not None:
            pulumi.set(__self__, "honeycombs", honeycombs)
        if influxdbs is not None:
            pulumi.set(__self__, "influxdbs", influxdbs)
        if instanas is not None:
            pulumi.set(__self__, "instanas", instanas)
        if lightsteps is not None:
            pulumi.set(__self__, "lightsteps", lightsteps)
        if newrelics is not None:
            pulumi.set(__self__, "newrelics", newrelics)
        if opentsdbs is not None:
            pulumi.set(__self__, "opentsdbs", opentsdbs)
        if pingdoms is not None:
            pulumi.set(__self__, "pingdoms", pingdoms)
        if prometheuses is not None:
            pulumi.set(__self__, "prometheuses", prometheuses)
        if redshifts is not None:
            pulumi.set(__self__, "redshifts", redshifts)
        if splunk_observabilities is not None:
            pulumi.set(__self__, "splunk_observabilities", splunk_observabilities)
        if splunks is not None:
            pulumi.set(__self__, "splunks", splunks)
        if sumologics is not None:
            pulumi.set(__self__, "sumologics", sumologics)
        if thousandeyes is not None:
            pulumi.set(__self__, "thousandeyes", thousandeyes)

    @property
    @pulumi.getter(name="amazonPrometheuses")
    def amazon_prometheuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAmazonPrometheusArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Prometheus/#creating-slos-with-ams-prometheus)
        """
        return pulumi.get(self, "amazon_prometheuses")

    @amazon_prometheuses.setter
    def amazon_prometheuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAmazonPrometheusArgs']]]]):
        pulumi.set(self, "amazon_prometheuses", value)

    @property
    @pulumi.getter
    def appdynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAppdynamicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/appdynamics#creating-slos-with-appdynamics)
        """
        return pulumi.get(self, "appdynamics")

    @appdynamics.setter
    def appdynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAppdynamicArgs']]]]):
        pulumi.set(self, "appdynamics", value)

    @property
    @pulumi.getter(name="azureMonitors")
    def azure_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/azure-monitor#creating-slos-with-azure-monitor)
        """
        return pulumi.get(self, "azure_monitors")

    @azure_monitors.setter
    def azure_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorArgs']]]]):
        pulumi.set(self, "azure_monitors", value)

    @property
    @pulumi.getter
    def bigqueries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryBigqueryArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/bigquery#creating-slos-with-bigquery)
        """
        return pulumi.get(self, "bigqueries")

    @bigqueries.setter
    def bigqueries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryBigqueryArgs']]]]):
        pulumi.set(self, "bigqueries", value)

    @property
    @pulumi.getter
    def cloudwatches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryCloudwatchArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_CloudWatch/#creating-slos-with-cloudwatch)
        """
        return pulumi.get(self, "cloudwatches")

    @cloudwatches.setter
    def cloudwatches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryCloudwatchArgs']]]]):
        pulumi.set(self, "cloudwatches", value)

    @property
    @pulumi.getter
    def datadogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryDatadogArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/datadog#creating-slos-with-datadog)
        """
        return pulumi.get(self, "datadogs")

    @datadogs.setter
    def datadogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryDatadogArgs']]]]):
        pulumi.set(self, "datadogs", value)

    @property
    @pulumi.getter
    def dynatraces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryDynatraceArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/dynatrace#creating-slos-with-dynatrace)
        """
        return pulumi.get(self, "dynatraces")

    @dynatraces.setter
    def dynatraces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryDynatraceArgs']]]]):
        pulumi.set(self, "dynatraces", value)

    @property
    @pulumi.getter
    def elasticsearches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryElasticsearchArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/elasticsearch#creating-slos-with-elasticsearch)
        """
        return pulumi.get(self, "elasticsearches")

    @elasticsearches.setter
    def elasticsearches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryElasticsearchArgs']]]]):
        pulumi.set(self, "elasticsearches", value)

    @property
    @pulumi.getter
    def gcms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGcmArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/google-cloud-monitoring#creating-slos-with-google-cloud-monitoring)
        """
        return pulumi.get(self, "gcms")

    @gcms.setter
    def gcms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGcmArgs']]]]):
        pulumi.set(self, "gcms", value)

    @property
    @pulumi.getter(name="grafanaLokis")
    def grafana_lokis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGrafanaLokiArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/grafana-loki#creating-slos-with-grafana-loki)
        """
        return pulumi.get(self, "grafana_lokis")

    @grafana_lokis.setter
    def grafana_lokis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGrafanaLokiArgs']]]]):
        pulumi.set(self, "grafana_lokis", value)

    @property
    @pulumi.getter
    def graphites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGraphiteArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/graphite#creating-slos-with-graphite)
        """
        return pulumi.get(self, "graphites")

    @graphites.setter
    def graphites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryGraphiteArgs']]]]):
        pulumi.set(self, "graphites", value)

    @property
    @pulumi.getter
    def honeycombs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryHoneycombArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/honeycomb#creating-slos-with-honeycomb)
        """
        return pulumi.get(self, "honeycombs")

    @honeycombs.setter
    def honeycombs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryHoneycombArgs']]]]):
        pulumi.set(self, "honeycombs", value)

    @property
    @pulumi.getter
    def influxdbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInfluxdbArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/influxdb#creating-slos-with-influxdb)
        """
        return pulumi.get(self, "influxdbs")

    @influxdbs.setter
    def influxdbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInfluxdbArgs']]]]):
        pulumi.set(self, "influxdbs", value)

    @property
    @pulumi.getter
    def instanas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/instana#creating-slos-with-instana)
        """
        return pulumi.get(self, "instanas")

    @instanas.setter
    def instanas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaArgs']]]]):
        pulumi.set(self, "instanas", value)

    @property
    @pulumi.getter
    def lightsteps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryLightstepArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/lightstep#creating-slos-with-lightstep)
        """
        return pulumi.get(self, "lightsteps")

    @lightsteps.setter
    def lightsteps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryLightstepArgs']]]]):
        pulumi.set(self, "lightsteps", value)

    @property
    @pulumi.getter
    def newrelics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryNewrelicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/new-relic#creating-slos-with-new-relic)
        """
        return pulumi.get(self, "newrelics")

    @newrelics.setter
    def newrelics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryNewrelicArgs']]]]):
        pulumi.set(self, "newrelics", value)

    @property
    @pulumi.getter
    def opentsdbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryOpentsdbArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/opentsdb#creating-slos-with-opentsdb)
        """
        return pulumi.get(self, "opentsdbs")

    @opentsdbs.setter
    def opentsdbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryOpentsdbArgs']]]]):
        pulumi.set(self, "opentsdbs", value)

    @property
    @pulumi.getter
    def pingdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryPingdomArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/pingdom#creating-slos-with-pingdom)
        """
        return pulumi.get(self, "pingdoms")

    @pingdoms.setter
    def pingdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryPingdomArgs']]]]):
        pulumi.set(self, "pingdoms", value)

    @property
    @pulumi.getter
    def prometheuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryPrometheusArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/prometheus#creating-slos-with-prometheus)
        """
        return pulumi.get(self, "prometheuses")

    @prometheuses.setter
    def prometheuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryPrometheusArgs']]]]):
        pulumi.set(self, "prometheuses", value)

    @property
    @pulumi.getter
    def redshifts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryRedshiftArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/Amazon_Redshift/#creating-slos-with-amazon-redshift)
        """
        return pulumi.get(self, "redshifts")

    @redshifts.setter
    def redshifts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryRedshiftArgs']]]]):
        pulumi.set(self, "redshifts", value)

    @property
    @pulumi.getter(name="splunkObservabilities")
    def splunk_observabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySplunkObservabilityArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk-observability)
        """
        return pulumi.get(self, "splunk_observabilities")

    @splunk_observabilities.setter
    def splunk_observabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySplunkObservabilityArgs']]]]):
        pulumi.set(self, "splunk_observabilities", value)

    @property
    @pulumi.getter
    def splunks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySplunkArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/splunk#creating-slos-with-splunk)
        """
        return pulumi.get(self, "splunks")

    @splunks.setter
    def splunks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySplunkArgs']]]]):
        pulumi.set(self, "splunks", value)

    @property
    @pulumi.getter
    def sumologics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySumologicArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/sumo-logic#creating-slos-with-sumo-logic)
        """
        return pulumi.get(self, "sumologics")

    @sumologics.setter
    def sumologics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQuerySumologicArgs']]]]):
        pulumi.set(self, "sumologics", value)

    @property
    @pulumi.getter
    def thousandeyes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryThousandeyeArgs']]]]:
        """
        [Configuration documentation](https://docs.nobl9.com/Sources/thousandeyes#creating-slos-with-thousandeyes)
        """
        return pulumi.get(self, "thousandeyes")

    @thousandeyes.setter
    def thousandeyes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryThousandeyeArgs']]]]):
        pulumi.set(self, "thousandeyes", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryAmazonPrometheusArgs:
    def __init__(__self__, *,
                 promql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] promql: Query for the metrics
        """
        pulumi.set(__self__, "promql", promql)

    @property
    @pulumi.getter
    def promql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "promql")

    @promql.setter
    def promql(self, value: pulumi.Input[str]):
        pulumi.set(self, "promql", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryAppdynamicArgs:
    def __init__(__self__, *,
                 application_name: pulumi.Input[str],
                 metric_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] application_name: Name of the added application
        :param pulumi.Input[str] metric_path: Path to the metrics
        """
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "metric_path", metric_path)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Input[str]:
        """
        Name of the added application
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="metricPath")
    def metric_path(self) -> pulumi.Input[str]:
        """
        Path to the metrics
        """
        return pulumi.get(self, "metric_path")

    @metric_path.setter
    def metric_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_path", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryAzureMonitorArgs:
    def __init__(__self__, *,
                 data_type: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorDimensionArgs']]]] = None,
                 kql_query: Optional[pulumi.Input[str]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 metric_namespace: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 workspaces: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorWorkspaceArgs']]]] = None):
        """
        :param pulumi.Input[str] data_type: Specifies source: 'metrics' or 'logs'
        :param pulumi.Input[str] aggregation: Aggregation type [Required for metrics]
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorDimensionArgs']]] dimensions: Dimensions of the metric [Optional for metrics]
        :param pulumi.Input[str] kql_query: Logs query in Kusto Query Language [Required for logs]
        :param pulumi.Input[str] metric_name: Name of the metric [Required for metrics]
        :param pulumi.Input[str] metric_namespace: Namespace of the metric [Optional for metrics]
        :param pulumi.Input[str] resource_id: Identifier of the Azure Cloud resource [Required for metrics]
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorWorkspaceArgs']]] workspaces: Log analytics workspace [Required for logs]
        """
        pulumi.set(__self__, "data_type", data_type)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if kql_query is not None:
            pulumi.set(__self__, "kql_query", kql_query)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if metric_namespace is not None:
            pulumi.set(__self__, "metric_namespace", metric_namespace)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if workspaces is not None:
            pulumi.set(__self__, "workspaces", workspaces)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Input[str]:
        """
        Specifies source: 'metrics' or 'logs'
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregation type [Required for metrics]
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorDimensionArgs']]]]:
        """
        Dimensions of the metric [Optional for metrics]
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter(name="kqlQuery")
    def kql_query(self) -> Optional[pulumi.Input[str]]:
        """
        Logs query in Kusto Query Language [Required for logs]
        """
        return pulumi.get(self, "kql_query")

    @kql_query.setter
    def kql_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kql_query", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the metric [Required for metrics]
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the metric [Optional for metrics]
        """
        return pulumi.get(self, "metric_namespace")

    @metric_namespace.setter
    def metric_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_namespace", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the Azure Cloud resource [Required for metrics]
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def workspaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorWorkspaceArgs']]]]:
        """
        Log analytics workspace [Required for logs]
        """
        return pulumi.get(self, "workspaces")

    @workspaces.setter
    def workspaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryAzureMonitorWorkspaceArgs']]]]):
        pulumi.set(self, "workspaces", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryAzureMonitorDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the previously defined alert method.
        :param pulumi.Input[str] value: Burn rate value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the previously defined alert method.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Burn rate value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryAzureMonitorWorkspaceArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 workspace_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] resource_group: Resource group of the workspace
        :param pulumi.Input[str] subscription_id: Subscription ID of the workspace
        :param pulumi.Input[str] workspace_id: ID of the workspace
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        Resource group of the workspace
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        Subscription ID of the workspace
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        ID of the workspace
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryBigqueryArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] location: Location of you BigQuery
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Location of you BigQuery
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryCloudwatchArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryCloudwatchDimensionArgs']]]] = None,
                 json: Optional[pulumi.Input[str]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 sql: Optional[pulumi.Input[str]] = None,
                 stat: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region: Region of the CloudWatch instance
        :param pulumi.Input[str] account_id: AccountID used with cross-account observability feature
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryCloudwatchDimensionArgs']]] dimensions: Dimensions of the metric [Optional for metrics]
        :param pulumi.Input[str] json: JSON query
        :param pulumi.Input[str] metric_name: Name of the metric [Required for metrics]
        :param pulumi.Input[str] namespace: Namespace of the metric
        :param pulumi.Input[str] sql: SQL query
        :param pulumi.Input[str] stat: Metric data aggregations
        """
        pulumi.set(__self__, "region", region)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if stat is not None:
            pulumi.set(__self__, "stat", stat)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of the CloudWatch instance
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        AccountID used with cross-account observability feature
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryCloudwatchDimensionArgs']]]]:
        """
        Dimensions of the metric [Optional for metrics]
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryCloudwatchDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON query
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the metric [Required for metrics]
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the metric
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def sql(self) -> Optional[pulumi.Input[str]]:
        """
        SQL query
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter
    def stat(self) -> Optional[pulumi.Input[str]]:
        """
        Metric data aggregations
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stat", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryCloudwatchDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the previously defined alert method.
        :param pulumi.Input[str] value: Burn rate value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the previously defined alert method.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Burn rate value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryDatadogArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryDynatraceArgs:
    def __init__(__self__, *,
                 metric_selector: pulumi.Input[str]):
        """
        :param pulumi.Input[str] metric_selector: Selector for the metrics
        """
        pulumi.set(__self__, "metric_selector", metric_selector)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> pulumi.Input[str]:
        """
        Selector for the metrics
        """
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_selector", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryElasticsearchArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] index: Index of metrics we want to query
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        Index of metrics we want to query
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryGcmArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryGrafanaLokiArgs:
    def __init__(__self__, *,
                 logql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] logql: Query for the logs
        """
        pulumi.set(__self__, "logql", logql)

    @property
    @pulumi.getter
    def logql(self) -> pulumi.Input[str]:
        """
        Query for the logs
        """
        return pulumi.get(self, "logql")

    @logql.setter
    def logql(self, value: pulumi.Input[str]):
        pulumi.set(self, "logql", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryGraphiteArgs:
    def __init__(__self__, *,
                 metric_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] metric_path: Path to the metrics
        """
        pulumi.set(__self__, "metric_path", metric_path)

    @property
    @pulumi.getter(name="metricPath")
    def metric_path(self) -> pulumi.Input[str]:
        """
        Path to the metrics
        """
        return pulumi.get(self, "metric_path")

    @metric_path.setter
    def metric_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_path", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryHoneycombArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input[str],
                 attribute: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] calculation: Calculation type
        :param pulumi.Input[str] attribute: Column name - required for all calculation types besides 'CONCURRENCY' and 'COUNT'
        """
        pulumi.set(__self__, "calculation", calculation)
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input[str]:
        """
        Calculation type
        """
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input[str]):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Column name - required for all calculation types besides 'CONCURRENCY' and 'COUNT'
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryInfluxdbArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryInstanaArgs:
    def __init__(__self__, *,
                 metric_type: pulumi.Input[str],
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaApplicationArgs']]]] = None,
                 infrastructures: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaInfrastructureArgs']]]] = None):
        """
        :param pulumi.Input[str] metric_type: Instana metric type 'application' or 'infrastructure'
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaApplicationArgs']]] applications: Infrastructure metric type
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaInfrastructureArgs']]] infrastructures: Infrastructure metric type
        """
        pulumi.set(__self__, "metric_type", metric_type)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> pulumi.Input[str]:
        """
        Instana metric type 'application' or 'infrastructure'
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaApplicationArgs']]]]:
        """
        Infrastructure metric type
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaInfrastructureArgs']]]]:
        """
        Infrastructure metric type
        """
        return pulumi.get(self, "infrastructures")

    @infrastructures.setter
    def infrastructures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaInfrastructureArgs']]]]):
        pulumi.set(self, "infrastructures", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryInstanaApplicationArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 api_query: pulumi.Input[str],
                 group_bies: pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaApplicationGroupByArgs']]],
                 metric_id: pulumi.Input[str],
                 include_internal: Optional[pulumi.Input[bool]] = None,
                 include_synthetic: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] aggregation: Aggregation type [Required for metrics]
        :param pulumi.Input[str] api_query: API query user passes in a JSON format
        :param pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaApplicationGroupByArgs']]] group_bies: Group by method
        :param pulumi.Input[str] metric_id: Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        :param pulumi.Input[bool] include_internal: Include internal
        :param pulumi.Input[bool] include_synthetic: Include synthetic
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "api_query", api_query)
        pulumi.set(__self__, "group_bies", group_bies)
        pulumi.set(__self__, "metric_id", metric_id)
        if include_internal is not None:
            pulumi.set(__self__, "include_internal", include_internal)
        if include_synthetic is not None:
            pulumi.set(__self__, "include_synthetic", include_synthetic)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        Aggregation type [Required for metrics]
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="apiQuery")
    def api_query(self) -> pulumi.Input[str]:
        """
        API query user passes in a JSON format
        """
        return pulumi.get(self, "api_query")

    @api_query.setter
    def api_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaApplicationGroupByArgs']]]:
        """
        Group by method
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: pulumi.Input[Sequence[pulumi.Input['SloObjectiveRawMetricQueryInstanaApplicationGroupByArgs']]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Input[str]:
        """
        Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="includeInternal")
    def include_internal(self) -> Optional[pulumi.Input[bool]]:
        """
        Include internal
        """
        return pulumi.get(self, "include_internal")

    @include_internal.setter
    def include_internal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_internal", value)

    @property
    @pulumi.getter(name="includeSynthetic")
    def include_synthetic(self) -> Optional[pulumi.Input[bool]]:
        """
        Include synthetic
        """
        return pulumi.get(self, "include_synthetic")

    @include_synthetic.setter
    def include_synthetic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_synthetic", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryInstanaApplicationGroupByArgs:
    def __init__(__self__, *,
                 tag: pulumi.Input[str],
                 tag_entity: pulumi.Input[str],
                 tag_second_level_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tag: Group by tag
        :param pulumi.Input[str] tag_entity: Tag entity - one of 'DESTINATION', 'SOURCE', 'NOT_APPLICABLE'
        """
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "tag_entity", tag_entity)
        if tag_second_level_key is not None:
            pulumi.set(__self__, "tag_second_level_key", tag_second_level_key)

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Input[str]:
        """
        Group by tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="tagEntity")
    def tag_entity(self) -> pulumi.Input[str]:
        """
        Tag entity - one of 'DESTINATION', 'SOURCE', 'NOT_APPLICABLE'
        """
        return pulumi.get(self, "tag_entity")

    @tag_entity.setter
    def tag_entity(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_entity", value)

    @property
    @pulumi.getter(name="tagSecondLevelKey")
    def tag_second_level_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_second_level_key")

    @tag_second_level_key.setter
    def tag_second_level_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_second_level_key", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryInstanaInfrastructureArgs:
    def __init__(__self__, *,
                 metric_id: pulumi.Input[str],
                 metric_retrieval_method: pulumi.Input[str],
                 plugin_id: pulumi.Input[str],
                 query: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric_id: Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        :param pulumi.Input[str] metric_retrieval_method: Metric retrieval method 'query' or 'snapshot'
        :param pulumi.Input[str] plugin_id: Plugin ID
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] snapshot_id: Snapshot ID
        """
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_retrieval_method", metric_retrieval_method)
        pulumi.set(__self__, "plugin_id", plugin_id)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Input[str]:
        """
        Metric ID one of 'calls', 'erroneousCalls', 'errors', 'latency'
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="metricRetrievalMethod")
    def metric_retrieval_method(self) -> pulumi.Input[str]:
        """
        Metric retrieval method 'query' or 'snapshot'
        """
        return pulumi.get(self, "metric_retrieval_method")

    @metric_retrieval_method.setter
    def metric_retrieval_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_retrieval_method", value)

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> pulumi.Input[str]:
        """
        Plugin ID
        """
        return pulumi.get(self, "plugin_id")

    @plugin_id.setter
    def plugin_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_id", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Snapshot ID
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryLightstepArgs:
    def __init__(__self__, *,
                 type_of_data: pulumi.Input[str],
                 percentile: Optional[pulumi.Input[float]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 uql: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type_of_data: Type of data to filter by
        :param pulumi.Input[float] percentile: Optional value to filter by percentiles
        :param pulumi.Input[str] stream_id: ID of the metrics stream
        :param pulumi.Input[str] uql: UQL query
        """
        pulumi.set(__self__, "type_of_data", type_of_data)
        if percentile is not None:
            pulumi.set(__self__, "percentile", percentile)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if uql is not None:
            pulumi.set(__self__, "uql", uql)

    @property
    @pulumi.getter(name="typeOfData")
    def type_of_data(self) -> pulumi.Input[str]:
        """
        Type of data to filter by
        """
        return pulumi.get(self, "type_of_data")

    @type_of_data.setter
    def type_of_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_of_data", value)

    @property
    @pulumi.getter
    def percentile(self) -> Optional[pulumi.Input[float]]:
        """
        Optional value to filter by percentiles
        """
        return pulumi.get(self, "percentile")

    @percentile.setter
    def percentile(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percentile", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the metrics stream
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter
    def uql(self) -> Optional[pulumi.Input[str]]:
        """
        UQL query
        """
        return pulumi.get(self, "uql")

    @uql.setter
    def uql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uql", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryNewrelicArgs:
    def __init__(__self__, *,
                 nrql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] nrql: Query for the metrics
        """
        pulumi.set(__self__, "nrql", nrql)

    @property
    @pulumi.getter
    def nrql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "nrql")

    @nrql.setter
    def nrql(self, value: pulumi.Input[str]):
        pulumi.set(self, "nrql", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryOpentsdbArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryPingdomArgs:
    def __init__(__self__, *,
                 check_id: pulumi.Input[str],
                 check_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] check_id: Pingdom uptime or transaction check's ID
        :param pulumi.Input[str] check_type: Pingdom check type - uptime or transaction
        :param pulumi.Input[str] status: Optional for the Uptime checks. Use it to filter the Pingdom check results by status
        """
        pulumi.set(__self__, "check_id", check_id)
        if check_type is not None:
            pulumi.set(__self__, "check_type", check_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="checkId")
    def check_id(self) -> pulumi.Input[str]:
        """
        Pingdom uptime or transaction check's ID
        """
        return pulumi.get(self, "check_id")

    @check_id.setter
    def check_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "check_id", value)

    @property
    @pulumi.getter(name="checkType")
    def check_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pingdom check type - uptime or transaction
        """
        return pulumi.get(self, "check_type")

    @check_type.setter
    def check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Optional for the Uptime checks. Use it to filter the Pingdom check results by status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryPrometheusArgs:
    def __init__(__self__, *,
                 promql: pulumi.Input[str]):
        """
        :param pulumi.Input[str] promql: Query for the metrics
        """
        pulumi.set(__self__, "promql", promql)

    @property
    @pulumi.getter
    def promql(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "promql")

    @promql.setter
    def promql(self, value: pulumi.Input[str]):
        pulumi.set(self, "promql", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryRedshiftArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 region: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cluster_id: Redshift custer ID
        :param pulumi.Input[str] database_name: Database name
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] region: Region of the CloudWatch instance
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Redshift custer ID
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        Database name
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of the CloudWatch instance
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class SloObjectiveRawMetricQuerySplunkArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query for the metrics
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SloObjectiveRawMetricQuerySplunkObservabilityArgs:
    def __init__(__self__, *,
                 program: pulumi.Input[str]):
        """
        :param pulumi.Input[str] program: Query for the metrics
        """
        pulumi.set(__self__, "program", program)

    @property
    @pulumi.getter
    def program(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "program")

    @program.setter
    def program(self, value: pulumi.Input[str]):
        pulumi.set(self, "program", value)


@pulumi.input_type
class SloObjectiveRawMetricQuerySumologicArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 type: pulumi.Input[str],
                 quantization: Optional[pulumi.Input[str]] = None,
                 rollup: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: Query for the metrics
        :param pulumi.Input[str] type: Sumologic source - metrics or logs
        :param pulumi.Input[str] quantization: Period of data aggregation
        :param pulumi.Input[str] rollup: Aggregation function - avg, sum, min, max, count, none
        """
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "type", type)
        if quantization is not None:
            pulumi.set(__self__, "quantization", quantization)
        if rollup is not None:
            pulumi.set(__self__, "rollup", rollup)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for the metrics
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Sumologic source - metrics or logs
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def quantization(self) -> Optional[pulumi.Input[str]]:
        """
        Period of data aggregation
        """
        return pulumi.get(self, "quantization")

    @quantization.setter
    def quantization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quantization", value)

    @property
    @pulumi.getter
    def rollup(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregation function - avg, sum, min, max, count, none
        """
        return pulumi.get(self, "rollup")

    @rollup.setter
    def rollup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rollup", value)


@pulumi.input_type
class SloObjectiveRawMetricQueryThousandeyeArgs:
    def __init__(__self__, *,
                 test_id: pulumi.Input[int]):
        """
        :param pulumi.Input[int] test_id: ID of the test
        """
        pulumi.set(__self__, "test_id", test_id)

    @property
    @pulumi.getter(name="testId")
    def test_id(self) -> pulumi.Input[int]:
        """
        ID of the test
        """
        return pulumi.get(self, "test_id")

    @test_id.setter
    def test_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "test_id", value)


@pulumi.input_type
class SloTimeWindowArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 unit: pulumi.Input[str],
                 calendars: Optional[pulumi.Input[Sequence[pulumi.Input['SloTimeWindowCalendarArgs']]]] = None,
                 is_rolling: Optional[pulumi.Input[bool]] = None,
                 period: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] count: Count of the time unit
        :param pulumi.Input[str] unit: Unit of time
        :param pulumi.Input[Sequence[pulumi.Input['SloTimeWindowCalendarArgs']]] calendars: Alert Policies attached to SLO
        :param pulumi.Input[bool] is_rolling: Is the window moving or not
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] period: Period between start time and added count
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "unit", unit)
        if calendars is not None:
            pulumi.set(__self__, "calendars", calendars)
        if is_rolling is not None:
            pulumi.set(__self__, "is_rolling", is_rolling)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        Count of the time unit
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Unit of time
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def calendars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloTimeWindowCalendarArgs']]]]:
        """
        Alert Policies attached to SLO
        """
        return pulumi.get(self, "calendars")

    @calendars.setter
    def calendars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloTimeWindowCalendarArgs']]]]):
        pulumi.set(self, "calendars", value)

    @property
    @pulumi.getter(name="isRolling")
    def is_rolling(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the window moving or not
        """
        return pulumi.get(self, "is_rolling")

    @is_rolling.setter
    def is_rolling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_rolling", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Period between start time and added count
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "period", value)


@pulumi.input_type
class SloTimeWindowCalendarArgs:
    def __init__(__self__, *,
                 start_time: pulumi.Input[str],
                 time_zone: pulumi.Input[str]):
        """
        :param pulumi.Input[str] start_time: Date of the start
        :param pulumi.Input[str] time_zone: Timezone name in IANA Time Zone Database
        """
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Date of the start
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        """
        Timezone name in IANA Time Zone Database
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)


