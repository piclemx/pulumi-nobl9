# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RoleBindingArgs', 'RoleBinding']

@pulumi.input_type
class RoleBindingArgs:
    def __init__(__self__, *,
                 role_ref: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None,
                 group_ref: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_ref: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RoleBinding resource.
        :param pulumi.Input[str] role_ref: Role name; the role that you want the user or group to assume.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[str] group_ref: Group name that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Groups**) or using sloctl `get usergroups` command.
        :param pulumi.Input[str] name: Automatically generated, unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project_ref: Project name, the project in which we want the user or group to assume the specified role. When `project_ref` is empty, `role_ref` must contain an Organization Role.
        :param pulumi.Input[str] user: Okta User ID that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Users**).
        """
        pulumi.set(__self__, "role_ref", role_ref)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if group_ref is not None:
            pulumi.set(__self__, "group_ref", group_ref)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_ref is not None:
            pulumi.set(__self__, "project_ref", project_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="roleRef")
    def role_ref(self) -> pulumi.Input[str]:
        """
        Role name; the role that you want the user or group to assume.
        """
        return pulumi.get(self, "role_ref")

    @role_ref.setter
    def role_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_ref", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="groupRef")
    def group_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Group name that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Groups**) or using sloctl `get usergroups` command.
        """
        return pulumi.get(self, "group_ref")

    @group_ref.setter
    def group_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_ref", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically generated, unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectRef")
    def project_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Project name, the project in which we want the user or group to assume the specified role. When `project_ref` is empty, `role_ref` must contain an Organization Role.
        """
        return pulumi.get(self, "project_ref")

    @project_ref.setter
    def project_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Okta User ID that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Users**).
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class _RoleBindingState:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 group_ref: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_ref: Optional[pulumi.Input[str]] = None,
                 role_ref: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RoleBinding resources.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[str] group_ref: Group name that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Groups**) or using sloctl `get usergroups` command.
        :param pulumi.Input[str] name: Automatically generated, unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project_ref: Project name, the project in which we want the user or group to assume the specified role. When `project_ref` is empty, `role_ref` must contain an Organization Role.
        :param pulumi.Input[str] role_ref: Role name; the role that you want the user or group to assume.
        :param pulumi.Input[str] user: Okta User ID that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Users**).
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if group_ref is not None:
            pulumi.set(__self__, "group_ref", group_ref)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_ref is not None:
            pulumi.set(__self__, "project_ref", project_ref)
        if role_ref is not None:
            pulumi.set(__self__, "role_ref", role_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="groupRef")
    def group_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Group name that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Groups**) or using sloctl `get usergroups` command.
        """
        return pulumi.get(self, "group_ref")

    @group_ref.setter
    def group_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_ref", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically generated, unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectRef")
    def project_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Project name, the project in which we want the user or group to assume the specified role. When `project_ref` is empty, `role_ref` must contain an Organization Role.
        """
        return pulumi.get(self, "project_ref")

    @project_ref.setter
    def project_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_ref", value)

    @property
    @pulumi.getter(name="roleRef")
    def role_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Role name; the role that you want the user or group to assume.
        """
        return pulumi.get(self, "role_ref")

    @role_ref.setter
    def role_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Okta User ID that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Users**).
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


class RoleBinding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 group_ref: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_ref: Optional[pulumi.Input[str]] = None,
                 role_ref: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        Here's an example of RBAC resource configuration:

        ```python
        import pulumi
        import piclemx_pulumi_nobl9 as nobl9

        this = nobl9.RoleBinding("this",
            group_ref="test",
            project_ref="default",
            role_ref="project-owner")
        ```
        ## Useful Links

        [Role Based Access Control in Nobl9 | Nobl9 Documentation](https://docs.nobl9.com/Getting_Started/RBAC/)

        [Role Binding YAML Configuration | Nobl9 Documentation](https://docs.nobl9.com/Getting_Started/RBAC/role-binding-yaml)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[str] group_ref: Group name that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Groups**) or using sloctl `get usergroups` command.
        :param pulumi.Input[str] name: Automatically generated, unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project_ref: Project name, the project in which we want the user or group to assume the specified role. When `project_ref` is empty, `role_ref` must contain an Organization Role.
        :param pulumi.Input[str] role_ref: Role name; the role that you want the user or group to assume.
        :param pulumi.Input[str] user: Okta User ID that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Users**).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RoleBindingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        Here's an example of RBAC resource configuration:

        ```python
        import pulumi
        import piclemx_pulumi_nobl9 as nobl9

        this = nobl9.RoleBinding("this",
            group_ref="test",
            project_ref="default",
            role_ref="project-owner")
        ```
        ## Useful Links

        [Role Based Access Control in Nobl9 | Nobl9 Documentation](https://docs.nobl9.com/Getting_Started/RBAC/)

        [Role Binding YAML Configuration | Nobl9 Documentation](https://docs.nobl9.com/Getting_Started/RBAC/role-binding-yaml)

        :param str resource_name: The name of the resource.
        :param RoleBindingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RoleBindingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 group_ref: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_ref: Optional[pulumi.Input[str]] = None,
                 role_ref: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RoleBindingArgs.__new__(RoleBindingArgs)

            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["group_ref"] = group_ref
            __props__.__dict__["name"] = name
            __props__.__dict__["project_ref"] = project_ref
            if role_ref is None and not opts.urn:
                raise TypeError("Missing required property 'role_ref'")
            __props__.__dict__["role_ref"] = role_ref
            __props__.__dict__["user"] = user
        super(RoleBinding, __self__).__init__(
            'nobl9:index/roleBinding:RoleBinding',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            group_ref: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_ref: Optional[pulumi.Input[str]] = None,
            role_ref: Optional[pulumi.Input[str]] = None,
            user: Optional[pulumi.Input[str]] = None) -> 'RoleBinding':
        """
        Get an existing RoleBinding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: User-friendly display name of the resource.
        :param pulumi.Input[str] group_ref: Group name that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Groups**) or using sloctl `get usergroups` command.
        :param pulumi.Input[str] name: Automatically generated, unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        :param pulumi.Input[str] project_ref: Project name, the project in which we want the user or group to assume the specified role. When `project_ref` is empty, `role_ref` must contain an Organization Role.
        :param pulumi.Input[str] role_ref: Role name; the role that you want the user or group to assume.
        :param pulumi.Input[str] user: Okta User ID that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Users**).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RoleBindingState.__new__(_RoleBindingState)

        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["group_ref"] = group_ref
        __props__.__dict__["name"] = name
        __props__.__dict__["project_ref"] = project_ref
        __props__.__dict__["role_ref"] = role_ref
        __props__.__dict__["user"] = user
        return RoleBinding(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        User-friendly display name of the resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="groupRef")
    def group_ref(self) -> pulumi.Output[Optional[str]]:
        """
        Group name that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Groups**) or using sloctl `get usergroups` command.
        """
        return pulumi.get(self, "group_ref")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Automatically generated, unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectRef")
    def project_ref(self) -> pulumi.Output[Optional[str]]:
        """
        Project name, the project in which we want the user or group to assume the specified role. When `project_ref` is empty, `role_ref` must contain an Organization Role.
        """
        return pulumi.get(self, "project_ref")

    @property
    @pulumi.getter(name="roleRef")
    def role_ref(self) -> pulumi.Output[str]:
        """
        Role name; the role that you want the user or group to assume.
        """
        return pulumi.get(self, "role_ref")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[Optional[str]]:
        """
        Okta User ID that can be retrieved from the Nobl9 UI (**Settings** > **Access Controls** > **Users**).
        """
        return pulumi.get(self, "user")

