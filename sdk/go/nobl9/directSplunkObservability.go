// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nobl9

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Splunk Observability allows users to search, monitor, and analyze machine-generated big data. Splunk Observability enables collecting and monitoring metrics, logs, and traces from common data sources. Data collection and monitoring in one place enables full-stack, end-to-end observability of the entire infrastructure. Nobl9 connects with Splunk Observability to collect SLI measurements and compare them to SLO targets.
//
// For more information, refer to [Splunk Observability Direct | Nobl9 Documentation](https://docs.nobl9.com/Sources/splunk-observability/#splunk-observability-direct).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-nobl9/sdk/go/nobl9"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nobl9.NewDirectSplunkObservability(ctx, "test-splunkobservability", &nobl9.DirectSplunkObservabilityArgs{
//				AccessToken: pulumi.String("secret"),
//				Description: pulumi.String("desc"),
//				Project:     pulumi.String("terraform"),
//				Realm:       pulumi.String("eu"),
//				SourceOfs: pulumi.StringArray{
//					pulumi.String("Metrics"),
//					pulumi.String("Services"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Nobl9 Official Documentation
//
// https://docs.nobl9.com/
type DirectSplunkObservability struct {
	pulumi.CustomResourceState

	// [required] | Splunk API Access Token.
	AccessToken pulumi.StringOutput `pulumi:"accessToken"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringOutput `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectSplunkObservabilityQueryDelayPtrOutput `pulumi:"queryDelay"`
	// SplunkObservability Realm.
	Realm pulumi.StringOutput `pulumi:"realm"`
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayOutput `pulumi:"sourceOfs"`
	// The status of the created direct.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewDirectSplunkObservability registers a new resource with the given unique name, arguments, and options.
func NewDirectSplunkObservability(ctx *pulumi.Context,
	name string, args *DirectSplunkObservabilityArgs, opts ...pulumi.ResourceOption) (*DirectSplunkObservability, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Realm == nil {
		return nil, errors.New("invalid value for required argument 'Realm'")
	}
	if args.SourceOfs == nil {
		return nil, errors.New("invalid value for required argument 'SourceOfs'")
	}
	var resource DirectSplunkObservability
	err := ctx.RegisterResource("nobl9:index/directSplunkObservability:DirectSplunkObservability", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectSplunkObservability gets an existing DirectSplunkObservability resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectSplunkObservability(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectSplunkObservabilityState, opts ...pulumi.ResourceOption) (*DirectSplunkObservability, error) {
	var resource DirectSplunkObservability
	err := ctx.ReadResource("nobl9:index/directSplunkObservability:DirectSplunkObservability", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DirectSplunkObservability resources.
type directSplunkObservabilityState struct {
	// [required] | Splunk API Access Token.
	AccessToken *string `pulumi:"accessToken"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description *string `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName *string `pulumi:"displayName"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name *string `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project *string `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay *DirectSplunkObservabilityQueryDelay `pulumi:"queryDelay"`
	// SplunkObservability Realm.
	Realm *string `pulumi:"realm"`
	// Source of Metrics and/or Services.
	SourceOfs []string `pulumi:"sourceOfs"`
	// The status of the created direct.
	Status *string `pulumi:"status"`
}

type DirectSplunkObservabilityState struct {
	// [required] | Splunk API Access Token.
	AccessToken pulumi.StringPtrInput
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrInput
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrInput
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringPtrInput
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringPtrInput
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectSplunkObservabilityQueryDelayPtrInput
	// SplunkObservability Realm.
	Realm pulumi.StringPtrInput
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayInput
	// The status of the created direct.
	Status pulumi.StringPtrInput
}

func (DirectSplunkObservabilityState) ElementType() reflect.Type {
	return reflect.TypeOf((*directSplunkObservabilityState)(nil)).Elem()
}

type directSplunkObservabilityArgs struct {
	// [required] | Splunk API Access Token.
	AccessToken *string `pulumi:"accessToken"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description *string `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName *string `pulumi:"displayName"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name *string `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project string `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay *DirectSplunkObservabilityQueryDelay `pulumi:"queryDelay"`
	// SplunkObservability Realm.
	Realm string `pulumi:"realm"`
	// Source of Metrics and/or Services.
	SourceOfs []string `pulumi:"sourceOfs"`
}

// The set of arguments for constructing a DirectSplunkObservability resource.
type DirectSplunkObservabilityArgs struct {
	// [required] | Splunk API Access Token.
	AccessToken pulumi.StringPtrInput
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrInput
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrInput
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringPtrInput
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringInput
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectSplunkObservabilityQueryDelayPtrInput
	// SplunkObservability Realm.
	Realm pulumi.StringInput
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayInput
}

func (DirectSplunkObservabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directSplunkObservabilityArgs)(nil)).Elem()
}

type DirectSplunkObservabilityInput interface {
	pulumi.Input

	ToDirectSplunkObservabilityOutput() DirectSplunkObservabilityOutput
	ToDirectSplunkObservabilityOutputWithContext(ctx context.Context) DirectSplunkObservabilityOutput
}

func (*DirectSplunkObservability) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectSplunkObservability)(nil)).Elem()
}

func (i *DirectSplunkObservability) ToDirectSplunkObservabilityOutput() DirectSplunkObservabilityOutput {
	return i.ToDirectSplunkObservabilityOutputWithContext(context.Background())
}

func (i *DirectSplunkObservability) ToDirectSplunkObservabilityOutputWithContext(ctx context.Context) DirectSplunkObservabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSplunkObservabilityOutput)
}

// DirectSplunkObservabilityArrayInput is an input type that accepts DirectSplunkObservabilityArray and DirectSplunkObservabilityArrayOutput values.
// You can construct a concrete instance of `DirectSplunkObservabilityArrayInput` via:
//
//	DirectSplunkObservabilityArray{ DirectSplunkObservabilityArgs{...} }
type DirectSplunkObservabilityArrayInput interface {
	pulumi.Input

	ToDirectSplunkObservabilityArrayOutput() DirectSplunkObservabilityArrayOutput
	ToDirectSplunkObservabilityArrayOutputWithContext(context.Context) DirectSplunkObservabilityArrayOutput
}

type DirectSplunkObservabilityArray []DirectSplunkObservabilityInput

func (DirectSplunkObservabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectSplunkObservability)(nil)).Elem()
}

func (i DirectSplunkObservabilityArray) ToDirectSplunkObservabilityArrayOutput() DirectSplunkObservabilityArrayOutput {
	return i.ToDirectSplunkObservabilityArrayOutputWithContext(context.Background())
}

func (i DirectSplunkObservabilityArray) ToDirectSplunkObservabilityArrayOutputWithContext(ctx context.Context) DirectSplunkObservabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSplunkObservabilityArrayOutput)
}

// DirectSplunkObservabilityMapInput is an input type that accepts DirectSplunkObservabilityMap and DirectSplunkObservabilityMapOutput values.
// You can construct a concrete instance of `DirectSplunkObservabilityMapInput` via:
//
//	DirectSplunkObservabilityMap{ "key": DirectSplunkObservabilityArgs{...} }
type DirectSplunkObservabilityMapInput interface {
	pulumi.Input

	ToDirectSplunkObservabilityMapOutput() DirectSplunkObservabilityMapOutput
	ToDirectSplunkObservabilityMapOutputWithContext(context.Context) DirectSplunkObservabilityMapOutput
}

type DirectSplunkObservabilityMap map[string]DirectSplunkObservabilityInput

func (DirectSplunkObservabilityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectSplunkObservability)(nil)).Elem()
}

func (i DirectSplunkObservabilityMap) ToDirectSplunkObservabilityMapOutput() DirectSplunkObservabilityMapOutput {
	return i.ToDirectSplunkObservabilityMapOutputWithContext(context.Background())
}

func (i DirectSplunkObservabilityMap) ToDirectSplunkObservabilityMapOutputWithContext(ctx context.Context) DirectSplunkObservabilityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSplunkObservabilityMapOutput)
}

type DirectSplunkObservabilityOutput struct{ *pulumi.OutputState }

func (DirectSplunkObservabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectSplunkObservability)(nil)).Elem()
}

func (o DirectSplunkObservabilityOutput) ToDirectSplunkObservabilityOutput() DirectSplunkObservabilityOutput {
	return o
}

func (o DirectSplunkObservabilityOutput) ToDirectSplunkObservabilityOutputWithContext(ctx context.Context) DirectSplunkObservabilityOutput {
	return o
}

// [required] | Splunk API Access Token.
func (o DirectSplunkObservabilityOutput) AccessToken() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSplunkObservability) pulumi.StringOutput { return v.AccessToken }).(pulumi.StringOutput)
}

// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
func (o DirectSplunkObservabilityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectSplunkObservability) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User-friendly display name of the resource.
func (o DirectSplunkObservabilityOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectSplunkObservability) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
func (o DirectSplunkObservabilityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSplunkObservability) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
func (o DirectSplunkObservabilityOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSplunkObservability) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
func (o DirectSplunkObservabilityOutput) QueryDelay() DirectSplunkObservabilityQueryDelayPtrOutput {
	return o.ApplyT(func(v *DirectSplunkObservability) DirectSplunkObservabilityQueryDelayPtrOutput { return v.QueryDelay }).(DirectSplunkObservabilityQueryDelayPtrOutput)
}

// SplunkObservability Realm.
func (o DirectSplunkObservabilityOutput) Realm() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSplunkObservability) pulumi.StringOutput { return v.Realm }).(pulumi.StringOutput)
}

// Source of Metrics and/or Services.
func (o DirectSplunkObservabilityOutput) SourceOfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DirectSplunkObservability) pulumi.StringArrayOutput { return v.SourceOfs }).(pulumi.StringArrayOutput)
}

// The status of the created direct.
func (o DirectSplunkObservabilityOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSplunkObservability) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type DirectSplunkObservabilityArrayOutput struct{ *pulumi.OutputState }

func (DirectSplunkObservabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectSplunkObservability)(nil)).Elem()
}

func (o DirectSplunkObservabilityArrayOutput) ToDirectSplunkObservabilityArrayOutput() DirectSplunkObservabilityArrayOutput {
	return o
}

func (o DirectSplunkObservabilityArrayOutput) ToDirectSplunkObservabilityArrayOutputWithContext(ctx context.Context) DirectSplunkObservabilityArrayOutput {
	return o
}

func (o DirectSplunkObservabilityArrayOutput) Index(i pulumi.IntInput) DirectSplunkObservabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DirectSplunkObservability {
		return vs[0].([]*DirectSplunkObservability)[vs[1].(int)]
	}).(DirectSplunkObservabilityOutput)
}

type DirectSplunkObservabilityMapOutput struct{ *pulumi.OutputState }

func (DirectSplunkObservabilityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectSplunkObservability)(nil)).Elem()
}

func (o DirectSplunkObservabilityMapOutput) ToDirectSplunkObservabilityMapOutput() DirectSplunkObservabilityMapOutput {
	return o
}

func (o DirectSplunkObservabilityMapOutput) ToDirectSplunkObservabilityMapOutputWithContext(ctx context.Context) DirectSplunkObservabilityMapOutput {
	return o
}

func (o DirectSplunkObservabilityMapOutput) MapIndex(k pulumi.StringInput) DirectSplunkObservabilityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DirectSplunkObservability {
		return vs[0].(map[string]*DirectSplunkObservability)[vs[1].(string)]
	}).(DirectSplunkObservabilityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSplunkObservabilityInput)(nil)).Elem(), &DirectSplunkObservability{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSplunkObservabilityArrayInput)(nil)).Elem(), DirectSplunkObservabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSplunkObservabilityMapInput)(nil)).Elem(), DirectSplunkObservabilityMap{})
	pulumi.RegisterOutputType(DirectSplunkObservabilityOutput{})
	pulumi.RegisterOutputType(DirectSplunkObservabilityArrayOutput{})
	pulumi.RegisterOutputType(DirectSplunkObservabilityMapOutput{})
}
