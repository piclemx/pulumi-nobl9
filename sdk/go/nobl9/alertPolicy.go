// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nobl9

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An **Alert Policy** expresses a set of conditions you want to track or monitor. The conditions for an Alert Policy define what is monitored and when to activate an alert: when the performance of your service is declining, Nobl9 will send a notification to a predefined channel.
//
// A Nobl9 AlertPolicy accepts up to 7 conditions. All the specified conditions must be satisfied to trigger an alert.
//
// For more details, refer to the [Alert Policy configuration | Nobl9 Documentation](https://docs.nobl9.com/yaml-guide#alertpolicy).
//
// ## Example Usage
//
// Here's an example of Alert Policy resource configuration:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-nobl9/sdk/go/nobl9"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			thisProject, err := nobl9.NewProject(ctx, "thisProject", &nobl9.ProjectArgs{
//				DisplayName: pulumi.String("My Project"),
//				Description: pulumi.String("An example N9 Terraform project"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nobl9.NewService(ctx, "thisService", &nobl9.ServiceArgs{
//				Project: thisProject.Name,
//				DisplayName: thisProject.DisplayName.ApplyT(func(displayName string) (string, error) {
//					return fmt.Sprintf("%v Front Page", displayName), nil
//				}).(pulumi.StringOutput),
//				Description: pulumi.String("Front page service"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nobl9.NewAlertPolicy(ctx, "thisAlertPolicy", &nobl9.AlertPolicyArgs{
//				Project: thisProject.Name,
//				DisplayName: thisProject.DisplayName.ApplyT(func(displayName string) (string, error) {
//					return fmt.Sprintf("%v Front Page Latency", displayName), nil
//				}).(pulumi.StringOutput),
//				Severity:    pulumi.String("High"),
//				Description: pulumi.String("Alert when page latency is > 2000 and error budget would be exhausted"),
//				Conditions: AlertPolicyConditionArray{
//					&AlertPolicyConditionArgs{
//						Measurement: pulumi.String("timeToBurnBudget"),
//						ValueString: pulumi.String("72h"),
//						LastsFor:    pulumi.String("30m"),
//					},
//				},
//				AlertMethods: AlertPolicyAlertMethodArray{
//					&AlertPolicyAlertMethodArgs{
//						Name: pulumi.String("my-alert-method"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Useful Links
//
// [Alert Policy configuration | Nobl9 Documentation](https://docs.nobl9.com/yaml-guide#alertpolicy)
type AlertPolicy struct {
	pulumi.CustomResourceState

	AlertMethods AlertPolicyAlertMethodArrayOutput `pulumi:"alertMethods"`
	// Configuration of an [alert condition](https://docs.nobl9.com/yaml-guide/#alertpolicy).
	Conditions AlertPolicyConditionArrayOutput `pulumi:"conditions"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringOutput `pulumi:"project"`
	// Alert severity. One of `Low` | `Medium` | `High`.
	Severity pulumi.StringOutput `pulumi:"severity"`
}

// NewAlertPolicy registers a new resource with the given unique name, arguments, and options.
func NewAlertPolicy(ctx *pulumi.Context,
	name string, args *AlertPolicyArgs, opts ...pulumi.ResourceOption) (*AlertPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	var resource AlertPolicy
	err := ctx.RegisterResource("nobl9:index/alertPolicy:AlertPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertPolicy gets an existing AlertPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertPolicyState, opts ...pulumi.ResourceOption) (*AlertPolicy, error) {
	var resource AlertPolicy
	err := ctx.ReadResource("nobl9:index/alertPolicy:AlertPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertPolicy resources.
type alertPolicyState struct {
	AlertMethods []AlertPolicyAlertMethod `pulumi:"alertMethods"`
	// Configuration of an [alert condition](https://docs.nobl9.com/yaml-guide/#alertpolicy).
	Conditions []AlertPolicyCondition `pulumi:"conditions"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description *string `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName *string `pulumi:"displayName"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name *string `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project *string `pulumi:"project"`
	// Alert severity. One of `Low` | `Medium` | `High`.
	Severity *string `pulumi:"severity"`
}

type AlertPolicyState struct {
	AlertMethods AlertPolicyAlertMethodArrayInput
	// Configuration of an [alert condition](https://docs.nobl9.com/yaml-guide/#alertpolicy).
	Conditions AlertPolicyConditionArrayInput
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrInput
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrInput
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringPtrInput
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringPtrInput
	// Alert severity. One of `Low` | `Medium` | `High`.
	Severity pulumi.StringPtrInput
}

func (AlertPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertPolicyState)(nil)).Elem()
}

type alertPolicyArgs struct {
	AlertMethods []AlertPolicyAlertMethod `pulumi:"alertMethods"`
	// Configuration of an [alert condition](https://docs.nobl9.com/yaml-guide/#alertpolicy).
	Conditions []AlertPolicyCondition `pulumi:"conditions"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description *string `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName *string `pulumi:"displayName"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name *string `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project string `pulumi:"project"`
	// Alert severity. One of `Low` | `Medium` | `High`.
	Severity string `pulumi:"severity"`
}

// The set of arguments for constructing a AlertPolicy resource.
type AlertPolicyArgs struct {
	AlertMethods AlertPolicyAlertMethodArrayInput
	// Configuration of an [alert condition](https://docs.nobl9.com/yaml-guide/#alertpolicy).
	Conditions AlertPolicyConditionArrayInput
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrInput
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrInput
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringPtrInput
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringInput
	// Alert severity. One of `Low` | `Medium` | `High`.
	Severity pulumi.StringInput
}

func (AlertPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertPolicyArgs)(nil)).Elem()
}

type AlertPolicyInput interface {
	pulumi.Input

	ToAlertPolicyOutput() AlertPolicyOutput
	ToAlertPolicyOutputWithContext(ctx context.Context) AlertPolicyOutput
}

func (*AlertPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertPolicy)(nil)).Elem()
}

func (i *AlertPolicy) ToAlertPolicyOutput() AlertPolicyOutput {
	return i.ToAlertPolicyOutputWithContext(context.Background())
}

func (i *AlertPolicy) ToAlertPolicyOutputWithContext(ctx context.Context) AlertPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyOutput)
}

// AlertPolicyArrayInput is an input type that accepts AlertPolicyArray and AlertPolicyArrayOutput values.
// You can construct a concrete instance of `AlertPolicyArrayInput` via:
//
//	AlertPolicyArray{ AlertPolicyArgs{...} }
type AlertPolicyArrayInput interface {
	pulumi.Input

	ToAlertPolicyArrayOutput() AlertPolicyArrayOutput
	ToAlertPolicyArrayOutputWithContext(context.Context) AlertPolicyArrayOutput
}

type AlertPolicyArray []AlertPolicyInput

func (AlertPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertPolicy)(nil)).Elem()
}

func (i AlertPolicyArray) ToAlertPolicyArrayOutput() AlertPolicyArrayOutput {
	return i.ToAlertPolicyArrayOutputWithContext(context.Background())
}

func (i AlertPolicyArray) ToAlertPolicyArrayOutputWithContext(ctx context.Context) AlertPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyArrayOutput)
}

// AlertPolicyMapInput is an input type that accepts AlertPolicyMap and AlertPolicyMapOutput values.
// You can construct a concrete instance of `AlertPolicyMapInput` via:
//
//	AlertPolicyMap{ "key": AlertPolicyArgs{...} }
type AlertPolicyMapInput interface {
	pulumi.Input

	ToAlertPolicyMapOutput() AlertPolicyMapOutput
	ToAlertPolicyMapOutputWithContext(context.Context) AlertPolicyMapOutput
}

type AlertPolicyMap map[string]AlertPolicyInput

func (AlertPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertPolicy)(nil)).Elem()
}

func (i AlertPolicyMap) ToAlertPolicyMapOutput() AlertPolicyMapOutput {
	return i.ToAlertPolicyMapOutputWithContext(context.Background())
}

func (i AlertPolicyMap) ToAlertPolicyMapOutputWithContext(ctx context.Context) AlertPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyMapOutput)
}

type AlertPolicyOutput struct{ *pulumi.OutputState }

func (AlertPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertPolicy)(nil)).Elem()
}

func (o AlertPolicyOutput) ToAlertPolicyOutput() AlertPolicyOutput {
	return o
}

func (o AlertPolicyOutput) ToAlertPolicyOutputWithContext(ctx context.Context) AlertPolicyOutput {
	return o
}

func (o AlertPolicyOutput) AlertMethods() AlertPolicyAlertMethodArrayOutput {
	return o.ApplyT(func(v *AlertPolicy) AlertPolicyAlertMethodArrayOutput { return v.AlertMethods }).(AlertPolicyAlertMethodArrayOutput)
}

// Configuration of an [alert condition](https://docs.nobl9.com/yaml-guide/#alertpolicy).
func (o AlertPolicyOutput) Conditions() AlertPolicyConditionArrayOutput {
	return o.ApplyT(func(v *AlertPolicy) AlertPolicyConditionArrayOutput { return v.Conditions }).(AlertPolicyConditionArrayOutput)
}

// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
func (o AlertPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User-friendly display name of the resource.
func (o AlertPolicyOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertPolicy) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
func (o AlertPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
func (o AlertPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Alert severity. One of `Low` | `Medium` | `High`.
func (o AlertPolicyOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertPolicy) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

type AlertPolicyArrayOutput struct{ *pulumi.OutputState }

func (AlertPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertPolicy)(nil)).Elem()
}

func (o AlertPolicyArrayOutput) ToAlertPolicyArrayOutput() AlertPolicyArrayOutput {
	return o
}

func (o AlertPolicyArrayOutput) ToAlertPolicyArrayOutputWithContext(ctx context.Context) AlertPolicyArrayOutput {
	return o
}

func (o AlertPolicyArrayOutput) Index(i pulumi.IntInput) AlertPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlertPolicy {
		return vs[0].([]*AlertPolicy)[vs[1].(int)]
	}).(AlertPolicyOutput)
}

type AlertPolicyMapOutput struct{ *pulumi.OutputState }

func (AlertPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertPolicy)(nil)).Elem()
}

func (o AlertPolicyMapOutput) ToAlertPolicyMapOutput() AlertPolicyMapOutput {
	return o
}

func (o AlertPolicyMapOutput) ToAlertPolicyMapOutputWithContext(ctx context.Context) AlertPolicyMapOutput {
	return o
}

func (o AlertPolicyMapOutput) MapIndex(k pulumi.StringInput) AlertPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlertPolicy {
		return vs[0].(map[string]*AlertPolicy)[vs[1].(string)]
	}).(AlertPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyInput)(nil)).Elem(), &AlertPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyArrayInput)(nil)).Elem(), AlertPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyMapInput)(nil)).Elem(), AlertPolicyMap{})
	pulumi.RegisterOutputType(AlertPolicyOutput{})
	pulumi.RegisterOutputType(AlertPolicyArrayOutput{})
	pulumi.RegisterOutputType(AlertPolicyMapOutput{})
}
