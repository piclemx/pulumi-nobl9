// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nobl9

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Splunk provides software for searching, monitoring, and analyzing machine-generated data via a Web-style interface. Nobl9 connects with Splunk to collect SLI measurements and compare them to SLO targets.
//
// For more information, refer to [Splunk Direct | Nobl9 Documentation](https://docs.nobl9.com/Sources/splunk#splunk-direct).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-nobl9/sdk/go/nobl9"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nobl9.NewDirectSplunk(ctx, "test-splunk", &nobl9.DirectSplunkArgs{
//				AccessToken: pulumi.String("secret"),
//				Description: pulumi.String("desc"),
//				HistoricalDataRetrieval: &DirectSplunkHistoricalDataRetrievalArgs{
//					DefaultDurations: DirectSplunkHistoricalDataRetrievalDefaultDurationArray{
//						&DirectSplunkHistoricalDataRetrievalDefaultDurationArgs{
//							Unit:  pulumi.String("Day"),
//							Value: pulumi.Int(0),
//						},
//					},
//					MaxDurations: DirectSplunkHistoricalDataRetrievalMaxDurationArray{
//						&DirectSplunkHistoricalDataRetrievalMaxDurationArgs{
//							Unit:  pulumi.String("Day"),
//							Value: pulumi.Int(30),
//						},
//					},
//				},
//				Project: pulumi.String("terraform"),
//				SourceOfs: pulumi.StringArray{
//					pulumi.String("Metrics"),
//					pulumi.String("Services"),
//				},
//				Url: pulumi.String("https://web.net"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Nobl9 Official Documentation
//
// https://docs.nobl9.com/
type DirectSplunk struct {
	pulumi.CustomResourceState

	// [required] | Splunk API Access Token.
	AccessToken pulumi.StringOutput `pulumi:"accessToken"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// [Replay configuration documentation](https://docs.nobl9.com/replay)
	HistoricalDataRetrieval DirectSplunkHistoricalDataRetrievalPtrOutput `pulumi:"historicalDataRetrieval"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringOutput `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectSplunkQueryDelayPtrOutput `pulumi:"queryDelay"`
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayOutput `pulumi:"sourceOfs"`
	// The status of the created direct.
	Status pulumi.StringOutput `pulumi:"status"`
	// Base API URL to the Splunk Search app.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDirectSplunk registers a new resource with the given unique name, arguments, and options.
func NewDirectSplunk(ctx *pulumi.Context,
	name string, args *DirectSplunkArgs, opts ...pulumi.ResourceOption) (*DirectSplunk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.SourceOfs == nil {
		return nil, errors.New("invalid value for required argument 'SourceOfs'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource DirectSplunk
	err := ctx.RegisterResource("nobl9:index/directSplunk:DirectSplunk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectSplunk gets an existing DirectSplunk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectSplunk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectSplunkState, opts ...pulumi.ResourceOption) (*DirectSplunk, error) {
	var resource DirectSplunk
	err := ctx.ReadResource("nobl9:index/directSplunk:DirectSplunk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DirectSplunk resources.
type directSplunkState struct {
	// [required] | Splunk API Access Token.
	AccessToken *string `pulumi:"accessToken"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description *string `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName *string `pulumi:"displayName"`
	// [Replay configuration documentation](https://docs.nobl9.com/replay)
	HistoricalDataRetrieval *DirectSplunkHistoricalDataRetrieval `pulumi:"historicalDataRetrieval"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name *string `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project *string `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay *DirectSplunkQueryDelay `pulumi:"queryDelay"`
	// Source of Metrics and/or Services.
	SourceOfs []string `pulumi:"sourceOfs"`
	// The status of the created direct.
	Status *string `pulumi:"status"`
	// Base API URL to the Splunk Search app.
	Url *string `pulumi:"url"`
}

type DirectSplunkState struct {
	// [required] | Splunk API Access Token.
	AccessToken pulumi.StringPtrInput
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrInput
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrInput
	// [Replay configuration documentation](https://docs.nobl9.com/replay)
	HistoricalDataRetrieval DirectSplunkHistoricalDataRetrievalPtrInput
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringPtrInput
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringPtrInput
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectSplunkQueryDelayPtrInput
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayInput
	// The status of the created direct.
	Status pulumi.StringPtrInput
	// Base API URL to the Splunk Search app.
	Url pulumi.StringPtrInput
}

func (DirectSplunkState) ElementType() reflect.Type {
	return reflect.TypeOf((*directSplunkState)(nil)).Elem()
}

type directSplunkArgs struct {
	// [required] | Splunk API Access Token.
	AccessToken *string `pulumi:"accessToken"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description *string `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName *string `pulumi:"displayName"`
	// [Replay configuration documentation](https://docs.nobl9.com/replay)
	HistoricalDataRetrieval *DirectSplunkHistoricalDataRetrieval `pulumi:"historicalDataRetrieval"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name *string `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project string `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay *DirectSplunkQueryDelay `pulumi:"queryDelay"`
	// Source of Metrics and/or Services.
	SourceOfs []string `pulumi:"sourceOfs"`
	// Base API URL to the Splunk Search app.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a DirectSplunk resource.
type DirectSplunkArgs struct {
	// [required] | Splunk API Access Token.
	AccessToken pulumi.StringPtrInput
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrInput
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrInput
	// [Replay configuration documentation](https://docs.nobl9.com/replay)
	HistoricalDataRetrieval DirectSplunkHistoricalDataRetrievalPtrInput
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringPtrInput
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringInput
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectSplunkQueryDelayPtrInput
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayInput
	// Base API URL to the Splunk Search app.
	Url pulumi.StringInput
}

func (DirectSplunkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directSplunkArgs)(nil)).Elem()
}

type DirectSplunkInput interface {
	pulumi.Input

	ToDirectSplunkOutput() DirectSplunkOutput
	ToDirectSplunkOutputWithContext(ctx context.Context) DirectSplunkOutput
}

func (*DirectSplunk) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectSplunk)(nil)).Elem()
}

func (i *DirectSplunk) ToDirectSplunkOutput() DirectSplunkOutput {
	return i.ToDirectSplunkOutputWithContext(context.Background())
}

func (i *DirectSplunk) ToDirectSplunkOutputWithContext(ctx context.Context) DirectSplunkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSplunkOutput)
}

// DirectSplunkArrayInput is an input type that accepts DirectSplunkArray and DirectSplunkArrayOutput values.
// You can construct a concrete instance of `DirectSplunkArrayInput` via:
//
//	DirectSplunkArray{ DirectSplunkArgs{...} }
type DirectSplunkArrayInput interface {
	pulumi.Input

	ToDirectSplunkArrayOutput() DirectSplunkArrayOutput
	ToDirectSplunkArrayOutputWithContext(context.Context) DirectSplunkArrayOutput
}

type DirectSplunkArray []DirectSplunkInput

func (DirectSplunkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectSplunk)(nil)).Elem()
}

func (i DirectSplunkArray) ToDirectSplunkArrayOutput() DirectSplunkArrayOutput {
	return i.ToDirectSplunkArrayOutputWithContext(context.Background())
}

func (i DirectSplunkArray) ToDirectSplunkArrayOutputWithContext(ctx context.Context) DirectSplunkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSplunkArrayOutput)
}

// DirectSplunkMapInput is an input type that accepts DirectSplunkMap and DirectSplunkMapOutput values.
// You can construct a concrete instance of `DirectSplunkMapInput` via:
//
//	DirectSplunkMap{ "key": DirectSplunkArgs{...} }
type DirectSplunkMapInput interface {
	pulumi.Input

	ToDirectSplunkMapOutput() DirectSplunkMapOutput
	ToDirectSplunkMapOutputWithContext(context.Context) DirectSplunkMapOutput
}

type DirectSplunkMap map[string]DirectSplunkInput

func (DirectSplunkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectSplunk)(nil)).Elem()
}

func (i DirectSplunkMap) ToDirectSplunkMapOutput() DirectSplunkMapOutput {
	return i.ToDirectSplunkMapOutputWithContext(context.Background())
}

func (i DirectSplunkMap) ToDirectSplunkMapOutputWithContext(ctx context.Context) DirectSplunkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSplunkMapOutput)
}

type DirectSplunkOutput struct{ *pulumi.OutputState }

func (DirectSplunkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectSplunk)(nil)).Elem()
}

func (o DirectSplunkOutput) ToDirectSplunkOutput() DirectSplunkOutput {
	return o
}

func (o DirectSplunkOutput) ToDirectSplunkOutputWithContext(ctx context.Context) DirectSplunkOutput {
	return o
}

// [required] | Splunk API Access Token.
func (o DirectSplunkOutput) AccessToken() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSplunk) pulumi.StringOutput { return v.AccessToken }).(pulumi.StringOutput)
}

// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
func (o DirectSplunkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectSplunk) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User-friendly display name of the resource.
func (o DirectSplunkOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectSplunk) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// [Replay configuration documentation](https://docs.nobl9.com/replay)
func (o DirectSplunkOutput) HistoricalDataRetrieval() DirectSplunkHistoricalDataRetrievalPtrOutput {
	return o.ApplyT(func(v *DirectSplunk) DirectSplunkHistoricalDataRetrievalPtrOutput { return v.HistoricalDataRetrieval }).(DirectSplunkHistoricalDataRetrievalPtrOutput)
}

// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
func (o DirectSplunkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSplunk) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
func (o DirectSplunkOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSplunk) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
func (o DirectSplunkOutput) QueryDelay() DirectSplunkQueryDelayPtrOutput {
	return o.ApplyT(func(v *DirectSplunk) DirectSplunkQueryDelayPtrOutput { return v.QueryDelay }).(DirectSplunkQueryDelayPtrOutput)
}

// Source of Metrics and/or Services.
func (o DirectSplunkOutput) SourceOfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DirectSplunk) pulumi.StringArrayOutput { return v.SourceOfs }).(pulumi.StringArrayOutput)
}

// The status of the created direct.
func (o DirectSplunkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSplunk) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Base API URL to the Splunk Search app.
func (o DirectSplunkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSplunk) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DirectSplunkArrayOutput struct{ *pulumi.OutputState }

func (DirectSplunkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectSplunk)(nil)).Elem()
}

func (o DirectSplunkArrayOutput) ToDirectSplunkArrayOutput() DirectSplunkArrayOutput {
	return o
}

func (o DirectSplunkArrayOutput) ToDirectSplunkArrayOutputWithContext(ctx context.Context) DirectSplunkArrayOutput {
	return o
}

func (o DirectSplunkArrayOutput) Index(i pulumi.IntInput) DirectSplunkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DirectSplunk {
		return vs[0].([]*DirectSplunk)[vs[1].(int)]
	}).(DirectSplunkOutput)
}

type DirectSplunkMapOutput struct{ *pulumi.OutputState }

func (DirectSplunkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectSplunk)(nil)).Elem()
}

func (o DirectSplunkMapOutput) ToDirectSplunkMapOutput() DirectSplunkMapOutput {
	return o
}

func (o DirectSplunkMapOutput) ToDirectSplunkMapOutputWithContext(ctx context.Context) DirectSplunkMapOutput {
	return o
}

func (o DirectSplunkMapOutput) MapIndex(k pulumi.StringInput) DirectSplunkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DirectSplunk {
		return vs[0].(map[string]*DirectSplunk)[vs[1].(string)]
	}).(DirectSplunkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSplunkInput)(nil)).Elem(), &DirectSplunk{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSplunkArrayInput)(nil)).Elem(), DirectSplunkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSplunkMapInput)(nil)).Elem(), DirectSplunkMap{})
	pulumi.RegisterOutputType(DirectSplunkOutput{})
	pulumi.RegisterOutputType(DirectSplunkArrayOutput{})
	pulumi.RegisterOutputType(DirectSplunkMapOutput{})
}
