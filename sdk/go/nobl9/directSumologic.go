// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nobl9

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Sumo Logic is an observability platform that provides visibility into AWS, Azure, and GCP cloud applications and infrastructure. Nobl9 connects with Sumo Logic to collect SLI measurements and compare them to SLO targets.
//
// For more information, refer to [Sumo Logic Direct | Nobl9 Documentation](https://docs.nobl9.com/Sources/sumo-logic#sumo-logic-direct).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/piclemx/pulumi-nobl9/sdk/go/nobl9"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := nobl9.NewDirectSumologic(ctx, "test-sumologic", &nobl9.DirectSumologicArgs{
// 			AccessId:    pulumi.String("secret"),
// 			AccessKey:   pulumi.String("secret"),
// 			Description: pulumi.String("desc"),
// 			Project:     pulumi.String("terraform"),
// 			SourceOfs: pulumi.StringArray{
// 				pulumi.String("Metrics"),
// 			},
// 			Url: pulumi.String("http://web.net"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Nobl9 Official Documentation
//
// https://docs.nobl9.com/
type DirectSumologic struct {
	pulumi.CustomResourceState

	// [required] | Sumo Logic API Access ID.
	AccessId pulumi.StringOutput `pulumi:"accessId"`
	// [required] | Sumo Logic API Access Key.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringOutput `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectSumologicQueryDelayPtrOutput `pulumi:"queryDelay"`
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayOutput `pulumi:"sourceOfs"`
	// The status of the created direct.
	Status pulumi.StringOutput `pulumi:"status"`
	// Sumo Logic API URL.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDirectSumologic registers a new resource with the given unique name, arguments, and options.
func NewDirectSumologic(ctx *pulumi.Context,
	name string, args *DirectSumologicArgs, opts ...pulumi.ResourceOption) (*DirectSumologic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.SourceOfs == nil {
		return nil, errors.New("invalid value for required argument 'SourceOfs'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DirectSumologic
	err := ctx.RegisterResource("nobl9:index/directSumologic:DirectSumologic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectSumologic gets an existing DirectSumologic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectSumologic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectSumologicState, opts ...pulumi.ResourceOption) (*DirectSumologic, error) {
	var resource DirectSumologic
	err := ctx.ReadResource("nobl9:index/directSumologic:DirectSumologic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DirectSumologic resources.
type directSumologicState struct {
	// [required] | Sumo Logic API Access ID.
	AccessId *string `pulumi:"accessId"`
	// [required] | Sumo Logic API Access Key.
	AccessKey *string `pulumi:"accessKey"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description *string `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName *string `pulumi:"displayName"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name *string `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project *string `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay *DirectSumologicQueryDelay `pulumi:"queryDelay"`
	// Source of Metrics and/or Services.
	SourceOfs []string `pulumi:"sourceOfs"`
	// The status of the created direct.
	Status *string `pulumi:"status"`
	// Sumo Logic API URL.
	Url *string `pulumi:"url"`
}

type DirectSumologicState struct {
	// [required] | Sumo Logic API Access ID.
	AccessId pulumi.StringPtrInput
	// [required] | Sumo Logic API Access Key.
	AccessKey pulumi.StringPtrInput
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrInput
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrInput
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringPtrInput
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringPtrInput
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectSumologicQueryDelayPtrInput
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayInput
	// The status of the created direct.
	Status pulumi.StringPtrInput
	// Sumo Logic API URL.
	Url pulumi.StringPtrInput
}

func (DirectSumologicState) ElementType() reflect.Type {
	return reflect.TypeOf((*directSumologicState)(nil)).Elem()
}

type directSumologicArgs struct {
	// [required] | Sumo Logic API Access ID.
	AccessId *string `pulumi:"accessId"`
	// [required] | Sumo Logic API Access Key.
	AccessKey *string `pulumi:"accessKey"`
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description *string `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName *string `pulumi:"displayName"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name *string `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project string `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay *DirectSumologicQueryDelay `pulumi:"queryDelay"`
	// Source of Metrics and/or Services.
	SourceOfs []string `pulumi:"sourceOfs"`
	// Sumo Logic API URL.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a DirectSumologic resource.
type DirectSumologicArgs struct {
	// [required] | Sumo Logic API Access ID.
	AccessId pulumi.StringPtrInput
	// [required] | Sumo Logic API Access Key.
	AccessKey pulumi.StringPtrInput
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrInput
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrInput
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringPtrInput
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringInput
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectSumologicQueryDelayPtrInput
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayInput
	// Sumo Logic API URL.
	Url pulumi.StringInput
}

func (DirectSumologicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directSumologicArgs)(nil)).Elem()
}

type DirectSumologicInput interface {
	pulumi.Input

	ToDirectSumologicOutput() DirectSumologicOutput
	ToDirectSumologicOutputWithContext(ctx context.Context) DirectSumologicOutput
}

func (*DirectSumologic) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectSumologic)(nil)).Elem()
}

func (i *DirectSumologic) ToDirectSumologicOutput() DirectSumologicOutput {
	return i.ToDirectSumologicOutputWithContext(context.Background())
}

func (i *DirectSumologic) ToDirectSumologicOutputWithContext(ctx context.Context) DirectSumologicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSumologicOutput)
}

// DirectSumologicArrayInput is an input type that accepts DirectSumologicArray and DirectSumologicArrayOutput values.
// You can construct a concrete instance of `DirectSumologicArrayInput` via:
//
//          DirectSumologicArray{ DirectSumologicArgs{...} }
type DirectSumologicArrayInput interface {
	pulumi.Input

	ToDirectSumologicArrayOutput() DirectSumologicArrayOutput
	ToDirectSumologicArrayOutputWithContext(context.Context) DirectSumologicArrayOutput
}

type DirectSumologicArray []DirectSumologicInput

func (DirectSumologicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectSumologic)(nil)).Elem()
}

func (i DirectSumologicArray) ToDirectSumologicArrayOutput() DirectSumologicArrayOutput {
	return i.ToDirectSumologicArrayOutputWithContext(context.Background())
}

func (i DirectSumologicArray) ToDirectSumologicArrayOutputWithContext(ctx context.Context) DirectSumologicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSumologicArrayOutput)
}

// DirectSumologicMapInput is an input type that accepts DirectSumologicMap and DirectSumologicMapOutput values.
// You can construct a concrete instance of `DirectSumologicMapInput` via:
//
//          DirectSumologicMap{ "key": DirectSumologicArgs{...} }
type DirectSumologicMapInput interface {
	pulumi.Input

	ToDirectSumologicMapOutput() DirectSumologicMapOutput
	ToDirectSumologicMapOutputWithContext(context.Context) DirectSumologicMapOutput
}

type DirectSumologicMap map[string]DirectSumologicInput

func (DirectSumologicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectSumologic)(nil)).Elem()
}

func (i DirectSumologicMap) ToDirectSumologicMapOutput() DirectSumologicMapOutput {
	return i.ToDirectSumologicMapOutputWithContext(context.Background())
}

func (i DirectSumologicMap) ToDirectSumologicMapOutputWithContext(ctx context.Context) DirectSumologicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSumologicMapOutput)
}

type DirectSumologicOutput struct{ *pulumi.OutputState }

func (DirectSumologicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectSumologic)(nil)).Elem()
}

func (o DirectSumologicOutput) ToDirectSumologicOutput() DirectSumologicOutput {
	return o
}

func (o DirectSumologicOutput) ToDirectSumologicOutputWithContext(ctx context.Context) DirectSumologicOutput {
	return o
}

// [required] | Sumo Logic API Access ID.
func (o DirectSumologicOutput) AccessId() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSumologic) pulumi.StringOutput { return v.AccessId }).(pulumi.StringOutput)
}

// [required] | Sumo Logic API Access Key.
func (o DirectSumologicOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSumologic) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
func (o DirectSumologicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectSumologic) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User-friendly display name of the resource.
func (o DirectSumologicOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectSumologic) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
func (o DirectSumologicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSumologic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
func (o DirectSumologicOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSumologic) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
func (o DirectSumologicOutput) QueryDelay() DirectSumologicQueryDelayPtrOutput {
	return o.ApplyT(func(v *DirectSumologic) DirectSumologicQueryDelayPtrOutput { return v.QueryDelay }).(DirectSumologicQueryDelayPtrOutput)
}

// Source of Metrics and/or Services.
func (o DirectSumologicOutput) SourceOfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DirectSumologic) pulumi.StringArrayOutput { return v.SourceOfs }).(pulumi.StringArrayOutput)
}

// The status of the created direct.
func (o DirectSumologicOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSumologic) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Sumo Logic API URL.
func (o DirectSumologicOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectSumologic) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DirectSumologicArrayOutput struct{ *pulumi.OutputState }

func (DirectSumologicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectSumologic)(nil)).Elem()
}

func (o DirectSumologicArrayOutput) ToDirectSumologicArrayOutput() DirectSumologicArrayOutput {
	return o
}

func (o DirectSumologicArrayOutput) ToDirectSumologicArrayOutputWithContext(ctx context.Context) DirectSumologicArrayOutput {
	return o
}

func (o DirectSumologicArrayOutput) Index(i pulumi.IntInput) DirectSumologicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DirectSumologic {
		return vs[0].([]*DirectSumologic)[vs[1].(int)]
	}).(DirectSumologicOutput)
}

type DirectSumologicMapOutput struct{ *pulumi.OutputState }

func (DirectSumologicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectSumologic)(nil)).Elem()
}

func (o DirectSumologicMapOutput) ToDirectSumologicMapOutput() DirectSumologicMapOutput {
	return o
}

func (o DirectSumologicMapOutput) ToDirectSumologicMapOutputWithContext(ctx context.Context) DirectSumologicMapOutput {
	return o
}

func (o DirectSumologicMapOutput) MapIndex(k pulumi.StringInput) DirectSumologicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DirectSumologic {
		return vs[0].(map[string]*DirectSumologic)[vs[1].(string)]
	}).(DirectSumologicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSumologicInput)(nil)).Elem(), &DirectSumologic{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSumologicArrayInput)(nil)).Elem(), DirectSumologicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSumologicMapInput)(nil)).Elem(), DirectSumologicMap{})
	pulumi.RegisterOutputType(DirectSumologicOutput{})
	pulumi.RegisterOutputType(DirectSumologicArrayOutput{})
	pulumi.RegisterOutputType(DirectSumologicMapOutput{})
}
