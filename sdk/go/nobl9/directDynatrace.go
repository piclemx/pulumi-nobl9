// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nobl9

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Dynatrace is a software intelligence platform that monitors and optimizes application performance, development and security, IT infrastructure, and user experience. The Dynatrace Software Intelligence Platform maps, and monitors applications, microservices, container orchestration platforms such as Kubernetes, and IT infrastructure running in multi-cloud and hybrid-cloud environments, and provides automated problem remediation. Nobl9 connects with Dynatrace to collect SLI measurements and compare them to SLO targets.
//
// For more information, refer to [Dynatrace Direct | Nobl9 Documentation](https://docs.nobl9.com/Sources/dynatrace#dynatrace-direct).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-nobl9/sdk/go/nobl9"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nobl9.NewDirectDynatrace(ctx, "test-dynatrace", &nobl9.DirectDynatraceArgs{
//				Description:    pulumi.String("desc"),
//				DynatraceToken: pulumi.String("secret"),
//				HistoricalDataRetrieval: &DirectDynatraceHistoricalDataRetrievalArgs{
//					DefaultDurations: DirectDynatraceHistoricalDataRetrievalDefaultDurationArray{
//						&DirectDynatraceHistoricalDataRetrievalDefaultDurationArgs{
//							Unit:  pulumi.String("Day"),
//							Value: pulumi.Int(1),
//						},
//					},
//					MaxDurations: DirectDynatraceHistoricalDataRetrievalMaxDurationArray{
//						&DirectDynatraceHistoricalDataRetrievalMaxDurationArgs{
//							Unit:  pulumi.String("Day"),
//							Value: pulumi.Int(10),
//						},
//					},
//				},
//				Project: pulumi.String("terraform"),
//				SourceOfs: pulumi.StringArray{
//					pulumi.String("Metrics"),
//					pulumi.String("Services"),
//				},
//				Url: pulumi.String("https://web.net"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Nobl9 Official Documentation
//
// https://docs.nobl9.com/
type DirectDynatrace struct {
	pulumi.CustomResourceState

	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// [required] | Dynatrace Token.
	DynatraceToken pulumi.StringOutput `pulumi:"dynatraceToken"`
	// [Replay configuration documentation](https://docs.nobl9.com/replay)
	HistoricalDataRetrieval DirectDynatraceHistoricalDataRetrievalPtrOutput `pulumi:"historicalDataRetrieval"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringOutput `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectDynatraceQueryDelayPtrOutput `pulumi:"queryDelay"`
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayOutput `pulumi:"sourceOfs"`
	// The status of the created direct.
	Status pulumi.StringOutput `pulumi:"status"`
	// Dynatrace API URL.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDirectDynatrace registers a new resource with the given unique name, arguments, and options.
func NewDirectDynatrace(ctx *pulumi.Context,
	name string, args *DirectDynatraceArgs, opts ...pulumi.ResourceOption) (*DirectDynatrace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.SourceOfs == nil {
		return nil, errors.New("invalid value for required argument 'SourceOfs'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource DirectDynatrace
	err := ctx.RegisterResource("nobl9:index/directDynatrace:DirectDynatrace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectDynatrace gets an existing DirectDynatrace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectDynatrace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectDynatraceState, opts ...pulumi.ResourceOption) (*DirectDynatrace, error) {
	var resource DirectDynatrace
	err := ctx.ReadResource("nobl9:index/directDynatrace:DirectDynatrace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DirectDynatrace resources.
type directDynatraceState struct {
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description *string `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName *string `pulumi:"displayName"`
	// [required] | Dynatrace Token.
	DynatraceToken *string `pulumi:"dynatraceToken"`
	// [Replay configuration documentation](https://docs.nobl9.com/replay)
	HistoricalDataRetrieval *DirectDynatraceHistoricalDataRetrieval `pulumi:"historicalDataRetrieval"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name *string `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project *string `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay *DirectDynatraceQueryDelay `pulumi:"queryDelay"`
	// Source of Metrics and/or Services.
	SourceOfs []string `pulumi:"sourceOfs"`
	// The status of the created direct.
	Status *string `pulumi:"status"`
	// Dynatrace API URL.
	Url *string `pulumi:"url"`
}

type DirectDynatraceState struct {
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrInput
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrInput
	// [required] | Dynatrace Token.
	DynatraceToken pulumi.StringPtrInput
	// [Replay configuration documentation](https://docs.nobl9.com/replay)
	HistoricalDataRetrieval DirectDynatraceHistoricalDataRetrievalPtrInput
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringPtrInput
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringPtrInput
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectDynatraceQueryDelayPtrInput
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayInput
	// The status of the created direct.
	Status pulumi.StringPtrInput
	// Dynatrace API URL.
	Url pulumi.StringPtrInput
}

func (DirectDynatraceState) ElementType() reflect.Type {
	return reflect.TypeOf((*directDynatraceState)(nil)).Elem()
}

type directDynatraceArgs struct {
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description *string `pulumi:"description"`
	// User-friendly display name of the resource.
	DisplayName *string `pulumi:"displayName"`
	// [required] | Dynatrace Token.
	DynatraceToken *string `pulumi:"dynatraceToken"`
	// [Replay configuration documentation](https://docs.nobl9.com/replay)
	HistoricalDataRetrieval *DirectDynatraceHistoricalDataRetrieval `pulumi:"historicalDataRetrieval"`
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name *string `pulumi:"name"`
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project string `pulumi:"project"`
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay *DirectDynatraceQueryDelay `pulumi:"queryDelay"`
	// Source of Metrics and/or Services.
	SourceOfs []string `pulumi:"sourceOfs"`
	// Dynatrace API URL.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a DirectDynatrace resource.
type DirectDynatraceArgs struct {
	// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
	Description pulumi.StringPtrInput
	// User-friendly display name of the resource.
	DisplayName pulumi.StringPtrInput
	// [required] | Dynatrace Token.
	DynatraceToken pulumi.StringPtrInput
	// [Replay configuration documentation](https://docs.nobl9.com/replay)
	HistoricalDataRetrieval DirectDynatraceHistoricalDataRetrievalPtrInput
	// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Name pulumi.StringPtrInput
	// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	Project pulumi.StringInput
	// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
	QueryDelay DirectDynatraceQueryDelayPtrInput
	// Source of Metrics and/or Services.
	SourceOfs pulumi.StringArrayInput
	// Dynatrace API URL.
	Url pulumi.StringInput
}

func (DirectDynatraceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directDynatraceArgs)(nil)).Elem()
}

type DirectDynatraceInput interface {
	pulumi.Input

	ToDirectDynatraceOutput() DirectDynatraceOutput
	ToDirectDynatraceOutputWithContext(ctx context.Context) DirectDynatraceOutput
}

func (*DirectDynatrace) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectDynatrace)(nil)).Elem()
}

func (i *DirectDynatrace) ToDirectDynatraceOutput() DirectDynatraceOutput {
	return i.ToDirectDynatraceOutputWithContext(context.Background())
}

func (i *DirectDynatrace) ToDirectDynatraceOutputWithContext(ctx context.Context) DirectDynatraceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectDynatraceOutput)
}

// DirectDynatraceArrayInput is an input type that accepts DirectDynatraceArray and DirectDynatraceArrayOutput values.
// You can construct a concrete instance of `DirectDynatraceArrayInput` via:
//
//	DirectDynatraceArray{ DirectDynatraceArgs{...} }
type DirectDynatraceArrayInput interface {
	pulumi.Input

	ToDirectDynatraceArrayOutput() DirectDynatraceArrayOutput
	ToDirectDynatraceArrayOutputWithContext(context.Context) DirectDynatraceArrayOutput
}

type DirectDynatraceArray []DirectDynatraceInput

func (DirectDynatraceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectDynatrace)(nil)).Elem()
}

func (i DirectDynatraceArray) ToDirectDynatraceArrayOutput() DirectDynatraceArrayOutput {
	return i.ToDirectDynatraceArrayOutputWithContext(context.Background())
}

func (i DirectDynatraceArray) ToDirectDynatraceArrayOutputWithContext(ctx context.Context) DirectDynatraceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectDynatraceArrayOutput)
}

// DirectDynatraceMapInput is an input type that accepts DirectDynatraceMap and DirectDynatraceMapOutput values.
// You can construct a concrete instance of `DirectDynatraceMapInput` via:
//
//	DirectDynatraceMap{ "key": DirectDynatraceArgs{...} }
type DirectDynatraceMapInput interface {
	pulumi.Input

	ToDirectDynatraceMapOutput() DirectDynatraceMapOutput
	ToDirectDynatraceMapOutputWithContext(context.Context) DirectDynatraceMapOutput
}

type DirectDynatraceMap map[string]DirectDynatraceInput

func (DirectDynatraceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectDynatrace)(nil)).Elem()
}

func (i DirectDynatraceMap) ToDirectDynatraceMapOutput() DirectDynatraceMapOutput {
	return i.ToDirectDynatraceMapOutputWithContext(context.Background())
}

func (i DirectDynatraceMap) ToDirectDynatraceMapOutputWithContext(ctx context.Context) DirectDynatraceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectDynatraceMapOutput)
}

type DirectDynatraceOutput struct{ *pulumi.OutputState }

func (DirectDynatraceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectDynatrace)(nil)).Elem()
}

func (o DirectDynatraceOutput) ToDirectDynatraceOutput() DirectDynatraceOutput {
	return o
}

func (o DirectDynatraceOutput) ToDirectDynatraceOutputWithContext(ctx context.Context) DirectDynatraceOutput {
	return o
}

// Optional description of the resource. Here, you can add details about who is responsible for the integration (team/owner) or the purpose of creating it.
func (o DirectDynatraceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectDynatrace) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User-friendly display name of the resource.
func (o DirectDynatraceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectDynatrace) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// [required] | Dynatrace Token.
func (o DirectDynatraceOutput) DynatraceToken() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectDynatrace) pulumi.StringOutput { return v.DynatraceToken }).(pulumi.StringOutput)
}

// [Replay configuration documentation](https://docs.nobl9.com/replay)
func (o DirectDynatraceOutput) HistoricalDataRetrieval() DirectDynatraceHistoricalDataRetrievalPtrOutput {
	return o.ApplyT(func(v *DirectDynatrace) DirectDynatraceHistoricalDataRetrievalPtrOutput {
		return v.HistoricalDataRetrieval
	}).(DirectDynatraceHistoricalDataRetrievalPtrOutput)
}

// Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
func (o DirectDynatraceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectDynatrace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the Nobl9 project the resource sits in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
func (o DirectDynatraceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectDynatrace) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// [Query delay configuration documentation](https://docs.nobl9.com/Features/query-delay). Computed if not provided.
func (o DirectDynatraceOutput) QueryDelay() DirectDynatraceQueryDelayPtrOutput {
	return o.ApplyT(func(v *DirectDynatrace) DirectDynatraceQueryDelayPtrOutput { return v.QueryDelay }).(DirectDynatraceQueryDelayPtrOutput)
}

// Source of Metrics and/or Services.
func (o DirectDynatraceOutput) SourceOfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DirectDynatrace) pulumi.StringArrayOutput { return v.SourceOfs }).(pulumi.StringArrayOutput)
}

// The status of the created direct.
func (o DirectDynatraceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectDynatrace) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Dynatrace API URL.
func (o DirectDynatraceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectDynatrace) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DirectDynatraceArrayOutput struct{ *pulumi.OutputState }

func (DirectDynatraceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectDynatrace)(nil)).Elem()
}

func (o DirectDynatraceArrayOutput) ToDirectDynatraceArrayOutput() DirectDynatraceArrayOutput {
	return o
}

func (o DirectDynatraceArrayOutput) ToDirectDynatraceArrayOutputWithContext(ctx context.Context) DirectDynatraceArrayOutput {
	return o
}

func (o DirectDynatraceArrayOutput) Index(i pulumi.IntInput) DirectDynatraceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DirectDynatrace {
		return vs[0].([]*DirectDynatrace)[vs[1].(int)]
	}).(DirectDynatraceOutput)
}

type DirectDynatraceMapOutput struct{ *pulumi.OutputState }

func (DirectDynatraceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectDynatrace)(nil)).Elem()
}

func (o DirectDynatraceMapOutput) ToDirectDynatraceMapOutput() DirectDynatraceMapOutput {
	return o
}

func (o DirectDynatraceMapOutput) ToDirectDynatraceMapOutputWithContext(ctx context.Context) DirectDynatraceMapOutput {
	return o
}

func (o DirectDynatraceMapOutput) MapIndex(k pulumi.StringInput) DirectDynatraceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DirectDynatrace {
		return vs[0].(map[string]*DirectDynatrace)[vs[1].(string)]
	}).(DirectDynatraceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectDynatraceInput)(nil)).Elem(), &DirectDynatrace{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectDynatraceArrayInput)(nil)).Elem(), DirectDynatraceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectDynatraceMapInput)(nil)).Elem(), DirectDynatraceMap{})
	pulumi.RegisterOutputType(DirectDynatraceOutput{})
	pulumi.RegisterOutputType(DirectDynatraceArrayOutput{})
	pulumi.RegisterOutputType(DirectDynatraceMapOutput{})
}
