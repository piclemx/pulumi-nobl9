// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AgentAmazonPrometheusConfig {
    /**
     * AWS region e.g., eu-central-1
     */
    region: string;
    /**
     * Base URL to Amazon Prometheus server.
     */
    url: string;
}

export interface AgentAppdynamicsConfig {
    /**
     * Base URL to the AppDynamics Controller.
     */
    url: string;
}

export interface AgentBigqueryConfig {
}

export interface AgentCloudwatchConfig {
}

export interface AgentDatadogConfig {
    /**
     * `com` or `eu`, Datadog SaaS instance, which corresponds to one of Datadog's two locations (https://www.datadoghq.com/ in the U.S. or https://datadoghq.eu/ in the European Union)
     */
    site: string;
}

export interface AgentDynatraceConfig {
    /**
     * Dynatrace API URL.
     */
    url: string;
}

export interface AgentElasticsearchConfig {
    /**
     * API URL endpoint to the Elasticsearch's instance.
     */
    url: string;
}

export interface AgentGcmConfig {
}

export interface AgentGrafanaLokiConfig {
    /**
     * API URL endpoint to the Grafana Loki instance.
     */
    url: string;
}

export interface AgentGraphiteConfig {
    /**
     * API URL endpoint to the Graphite's instance.
     */
    url: string;
}

export interface AgentInfluxdbConfig {
    /**
     * API URL endpoint to the InfluxDB's instance.
     */
    url: string;
}

export interface AgentInstanaConfig {
    /**
     * API URL endpoint to the InfluxDB's instance.
     */
    url: string;
}

export interface AgentLightstepConfig {
    /**
     * Organization name registered in Lightstep.
     */
    organization: string;
    /**
     * Name of the Lightstep project.
     */
    project: string;
}

export interface AgentNewrelicConfig {
    /**
     * ID number assigned to the New Relic user account.
     */
    accountId: string;
}

export interface AgentOpentsdbConfig {
    /**
     * OpenTSDB cluster URL.
     */
    url: string;
}

export interface AgentPingdomConfig {
}

export interface AgentPrometheusConfig {
    /**
     * Base URL to Prometheus server.
     */
    url: string;
}

export interface AgentQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface AgentRedshiftConfig {
}

export interface AgentSplunkConfig {
    /**
     * Base API URL to the Splunk Search app.
     */
    url: string;
}

export interface AgentSplunkObservabilityConfig {
    /**
     * SplunkObservability Realm.
     */
    realm: string;
}

export interface AgentSumologicConfig {
    /**
     * Sumo Logic API URL.
     */
    url: string;
}

export interface AgentThousandeyesConfig {
}

export interface AlertPolicyAlertMethod {
    /**
     * The name of the previously defined alert method.
     */
    name: string;
    /**
     * Project name the Alert Method is in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). If not defined, Nobl9 returns a default value for this field.
     */
    project?: string;
}

export interface AlertPolicyCondition {
    /**
     * Indicates how long a given condition needs to be valid to mark the condition as true.
     */
    lastsFor?: string;
    /**
     * One of `timeToBurnBudget` | `burnRate` | `burnedBudget`.
     */
    measurement: string;
    /**
     * For `averageBurnRate`, it indicates how fast the error budget is burning. For `burnedBudget`, it tells how much error budget is already burned.
     */
    value?: number;
    /**
     * Used with `timeToBurnBudget`, indicates when the budget would be exhausted. The expected value is a string in time duration string format.
     */
    valueString?: string;
}

export interface DirectAppdynamicsQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectBigqueryQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectCloudwatchHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: outputs.DirectCloudwatchHistoricalDataRetrievalDefaultDuration[];
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: outputs.DirectCloudwatchHistoricalDataRetrievalMaxDuration[];
}

export interface DirectCloudwatchHistoricalDataRetrievalDefaultDuration {
    unit: string;
    value: number;
}

export interface DirectCloudwatchHistoricalDataRetrievalMaxDuration {
    unit: string;
    value: number;
}

export interface DirectCloudwatchQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectDatadogHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: outputs.DirectDatadogHistoricalDataRetrievalDefaultDuration[];
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: outputs.DirectDatadogHistoricalDataRetrievalMaxDuration[];
}

export interface DirectDatadogHistoricalDataRetrievalDefaultDuration {
    unit: string;
    value: number;
}

export interface DirectDatadogHistoricalDataRetrievalMaxDuration {
    unit: string;
    value: number;
}

export interface DirectDatadogQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectDynatraceHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: outputs.DirectDynatraceHistoricalDataRetrievalDefaultDuration[];
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: outputs.DirectDynatraceHistoricalDataRetrievalMaxDuration[];
}

export interface DirectDynatraceHistoricalDataRetrievalDefaultDuration {
    unit: string;
    value: number;
}

export interface DirectDynatraceHistoricalDataRetrievalMaxDuration {
    unit: string;
    value: number;
}

export interface DirectDynatraceQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectGcmQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectInfluxdbQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectInstanaQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectLightstepHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: outputs.DirectLightstepHistoricalDataRetrievalDefaultDuration[];
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: outputs.DirectLightstepHistoricalDataRetrievalMaxDuration[];
}

export interface DirectLightstepHistoricalDataRetrievalDefaultDuration {
    unit: string;
    value: number;
}

export interface DirectLightstepHistoricalDataRetrievalMaxDuration {
    unit: string;
    value: number;
}

export interface DirectLightstepQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectNewrelicHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: outputs.DirectNewrelicHistoricalDataRetrievalDefaultDuration[];
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: outputs.DirectNewrelicHistoricalDataRetrievalMaxDuration[];
}

export interface DirectNewrelicHistoricalDataRetrievalDefaultDuration {
    unit: string;
    value: number;
}

export interface DirectNewrelicHistoricalDataRetrievalMaxDuration {
    unit: string;
    value: number;
}

export interface DirectNewrelicQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectPingdomQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectRedshiftQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectSplunkHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: outputs.DirectSplunkHistoricalDataRetrievalDefaultDuration[];
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: outputs.DirectSplunkHistoricalDataRetrievalMaxDuration[];
}

export interface DirectSplunkHistoricalDataRetrievalDefaultDuration {
    unit: string;
    value: number;
}

export interface DirectSplunkHistoricalDataRetrievalMaxDuration {
    unit: string;
    value: number;
}

export interface DirectSplunkObservabilityQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectSplunkQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectSumologicQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface DirectThousandeyesQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: string;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: number;
}

export interface ProjectLabel {
    /**
     * A key for the label, unique within the associated resource.
     */
    key: string;
    /**
     * A list of unique values for a single key.
     */
    values: string[];
}

export interface ServiceLabel {
    /**
     * A key for the label, unique within the associated resource.
     */
    key: string;
    /**
     * A list of unique values for a single key.
     */
    values: string[];
}

export interface SloAttachment {
    /**
     * Name displayed for the attachment. Max. length: 63 characters.
     */
    displayName?: string;
    /**
     * URL to the attachment
     */
    url: string;
}

export interface SloComposite {
    /**
     * Condition when the Composite SLO’s error budget is burning.
     */
    burnRateConditions?: outputs.SloCompositeBurnRateCondition[];
    /**
     * Designated value
     */
    target: number;
}

export interface SloCompositeBurnRateCondition {
    op: string;
    value: number;
}

export interface SloIndicator {
    /**
     * Kind of the metric source. One of {Agent, Direct}.
     */
    kind?: string;
    /**
     * Name of the metric source (agent).
     */
    name: string;
    /**
     * Name of the metric source project.
     */
    project?: string;
}

export interface SloLabel {
    /**
     * A key for the label, unique within the associated resource.
     */
    key: string;
    /**
     * A list of unique values for a single key.
     */
    values: string[];
}

export interface SloObjective {
    /**
     * Compares two time series, indicating the ratio of the count of good values to total values.
     */
    countMetrics?: outputs.SloObjectiveCountMetric[];
    /**
     * Name to be displayed
     */
    displayName: string;
    /**
     * Objective's name. This field is computed if not provided.
     */
    name: string;
    /**
     * Type of logical operation
     */
    op?: string;
    /**
     * Raw data is used to compare objective values.
     */
    rawMetrics?: outputs.SloObjectiveRawMetric[];
    /**
     * Designated value
     */
    target: number;
    /**
     * Designated value for slice
     */
    timeSliceTarget?: number;
    /**
     * Value
     */
    value: number;
}

export interface SloObjectiveCountMetric {
    goods?: outputs.SloObjectiveCountMetricGood[];
    incremental: boolean;
    totals?: outputs.SloObjectiveCountMetricTotal[];
}

export interface SloObjectiveCountMetricGood {
    amazonPrometheuses?: outputs.SloObjectiveCountMetricGoodAmazonPrometheus[];
    appdynamics?: outputs.SloObjectiveCountMetricGoodAppdynamic[];
    bigqueries?: outputs.SloObjectiveCountMetricGoodBigquery[];
    cloudwatches?: outputs.SloObjectiveCountMetricGoodCloudwatch[];
    datadogs?: outputs.SloObjectiveCountMetricGoodDatadog[];
    dynatraces?: outputs.SloObjectiveCountMetricGoodDynatrace[];
    elasticsearches?: outputs.SloObjectiveCountMetricGoodElasticsearch[];
    gcms?: outputs.SloObjectiveCountMetricGoodGcm[];
    grafanaLokis?: outputs.SloObjectiveCountMetricGoodGrafanaLoki[];
    graphites?: outputs.SloObjectiveCountMetricGoodGraphite[];
    influxdbs?: outputs.SloObjectiveCountMetricGoodInfluxdb[];
    instanas?: outputs.SloObjectiveCountMetricGoodInstana[];
    lightsteps?: outputs.SloObjectiveCountMetricGoodLightstep[];
    newrelics?: outputs.SloObjectiveCountMetricGoodNewrelic[];
    opentsdbs?: outputs.SloObjectiveCountMetricGoodOpentsdb[];
    pingdoms?: outputs.SloObjectiveCountMetricGoodPingdom[];
    prometheuses?: outputs.SloObjectiveCountMetricGoodPrometheus[];
    redshifts?: outputs.SloObjectiveCountMetricGoodRedshift[];
    splunkObservabilities?: outputs.SloObjectiveCountMetricGoodSplunkObservability[];
    splunks?: outputs.SloObjectiveCountMetricGoodSplunk[];
    sumologics?: outputs.SloObjectiveCountMetricGoodSumologic[];
    thousandeyes?: outputs.SloObjectiveCountMetricGoodThousandeye[];
}

export interface SloObjectiveCountMetricGoodAmazonPrometheus {
    promql: string;
}

export interface SloObjectiveCountMetricGoodAppdynamic {
    applicationName: string;
    metricPath: string;
}

export interface SloObjectiveCountMetricGoodBigquery {
    location: string;
    projectId: string;
    query: string;
}

export interface SloObjectiveCountMetricGoodCloudwatch {
    dimensions?: outputs.SloObjectiveCountMetricGoodCloudwatchDimension[];
    json?: string;
    metricName?: string;
    namespace?: string;
    region: string;
    sql?: string;
    stat?: string;
}

export interface SloObjectiveCountMetricGoodCloudwatchDimension {
    /**
     * Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
     */
    name: string;
    value: string;
}

export interface SloObjectiveCountMetricGoodDatadog {
    query: string;
}

export interface SloObjectiveCountMetricGoodDynatrace {
    metricSelector: string;
}

export interface SloObjectiveCountMetricGoodElasticsearch {
    index: string;
    query: string;
}

export interface SloObjectiveCountMetricGoodGcm {
    projectId: string;
    query: string;
}

export interface SloObjectiveCountMetricGoodGrafanaLoki {
    logql: string;
}

export interface SloObjectiveCountMetricGoodGraphite {
    metricPath: string;
}

export interface SloObjectiveCountMetricGoodInfluxdb {
    query: string;
}

export interface SloObjectiveCountMetricGoodInstana {
    applications?: outputs.SloObjectiveCountMetricGoodInstanaApplication[];
    infrastructures?: outputs.SloObjectiveCountMetricGoodInstanaInfrastructure[];
    metricType: string;
}

export interface SloObjectiveCountMetricGoodInstanaApplication {
    aggregation: string;
    apiQuery: string;
    groupBies: outputs.SloObjectiveCountMetricGoodInstanaApplicationGroupBy[];
    includeInternal?: boolean;
    includeSynthetic?: boolean;
    metricId: string;
}

export interface SloObjectiveCountMetricGoodInstanaApplicationGroupBy {
    tag: string;
    tagEntity: string;
    tagSecondLevelKey?: string;
}

export interface SloObjectiveCountMetricGoodInstanaInfrastructure {
    metricId: string;
    metricRetrievalMethod: string;
    pluginId: string;
    query?: string;
    snapshotId?: string;
}

export interface SloObjectiveCountMetricGoodLightstep {
    percentile?: number;
    streamId?: string;
    typeOfData: string;
    uql?: string;
}

export interface SloObjectiveCountMetricGoodNewrelic {
    nrql: string;
}

export interface SloObjectiveCountMetricGoodOpentsdb {
    query: string;
}

export interface SloObjectiveCountMetricGoodPingdom {
    checkId: string;
    checkType?: string;
    status?: string;
}

export interface SloObjectiveCountMetricGoodPrometheus {
    promql: string;
}

export interface SloObjectiveCountMetricGoodRedshift {
    clusterId: string;
    databaseName: string;
    query: string;
    region: string;
}

export interface SloObjectiveCountMetricGoodSplunk {
    query: string;
}

export interface SloObjectiveCountMetricGoodSplunkObservability {
    program: string;
}

export interface SloObjectiveCountMetricGoodSumologic {
    quantization?: string;
    query: string;
    rollup?: string;
    type: string;
}

export interface SloObjectiveCountMetricGoodThousandeye {
    testId: number;
}

export interface SloObjectiveCountMetricTotal {
    amazonPrometheuses?: outputs.SloObjectiveCountMetricTotalAmazonPrometheus[];
    appdynamics?: outputs.SloObjectiveCountMetricTotalAppdynamic[];
    bigqueries?: outputs.SloObjectiveCountMetricTotalBigquery[];
    cloudwatches?: outputs.SloObjectiveCountMetricTotalCloudwatch[];
    datadogs?: outputs.SloObjectiveCountMetricTotalDatadog[];
    dynatraces?: outputs.SloObjectiveCountMetricTotalDynatrace[];
    elasticsearches?: outputs.SloObjectiveCountMetricTotalElasticsearch[];
    gcms?: outputs.SloObjectiveCountMetricTotalGcm[];
    grafanaLokis?: outputs.SloObjectiveCountMetricTotalGrafanaLoki[];
    graphites?: outputs.SloObjectiveCountMetricTotalGraphite[];
    influxdbs?: outputs.SloObjectiveCountMetricTotalInfluxdb[];
    instanas?: outputs.SloObjectiveCountMetricTotalInstana[];
    lightsteps?: outputs.SloObjectiveCountMetricTotalLightstep[];
    newrelics?: outputs.SloObjectiveCountMetricTotalNewrelic[];
    opentsdbs?: outputs.SloObjectiveCountMetricTotalOpentsdb[];
    pingdoms?: outputs.SloObjectiveCountMetricTotalPingdom[];
    prometheuses?: outputs.SloObjectiveCountMetricTotalPrometheus[];
    redshifts?: outputs.SloObjectiveCountMetricTotalRedshift[];
    splunkObservabilities?: outputs.SloObjectiveCountMetricTotalSplunkObservability[];
    splunks?: outputs.SloObjectiveCountMetricTotalSplunk[];
    sumologics?: outputs.SloObjectiveCountMetricTotalSumologic[];
    thousandeyes?: outputs.SloObjectiveCountMetricTotalThousandeye[];
}

export interface SloObjectiveCountMetricTotalAmazonPrometheus {
    promql: string;
}

export interface SloObjectiveCountMetricTotalAppdynamic {
    applicationName: string;
    metricPath: string;
}

export interface SloObjectiveCountMetricTotalBigquery {
    location: string;
    projectId: string;
    query: string;
}

export interface SloObjectiveCountMetricTotalCloudwatch {
    dimensions?: outputs.SloObjectiveCountMetricTotalCloudwatchDimension[];
    json?: string;
    metricName?: string;
    namespace?: string;
    region: string;
    sql?: string;
    stat?: string;
}

export interface SloObjectiveCountMetricTotalCloudwatchDimension {
    /**
     * Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
     */
    name: string;
    value: string;
}

export interface SloObjectiveCountMetricTotalDatadog {
    query: string;
}

export interface SloObjectiveCountMetricTotalDynatrace {
    metricSelector: string;
}

export interface SloObjectiveCountMetricTotalElasticsearch {
    index: string;
    query: string;
}

export interface SloObjectiveCountMetricTotalGcm {
    projectId: string;
    query: string;
}

export interface SloObjectiveCountMetricTotalGrafanaLoki {
    logql: string;
}

export interface SloObjectiveCountMetricTotalGraphite {
    metricPath: string;
}

export interface SloObjectiveCountMetricTotalInfluxdb {
    query: string;
}

export interface SloObjectiveCountMetricTotalInstana {
    applications?: outputs.SloObjectiveCountMetricTotalInstanaApplication[];
    infrastructures?: outputs.SloObjectiveCountMetricTotalInstanaInfrastructure[];
    metricType: string;
}

export interface SloObjectiveCountMetricTotalInstanaApplication {
    aggregation: string;
    apiQuery: string;
    groupBies: outputs.SloObjectiveCountMetricTotalInstanaApplicationGroupBy[];
    includeInternal?: boolean;
    includeSynthetic?: boolean;
    metricId: string;
}

export interface SloObjectiveCountMetricTotalInstanaApplicationGroupBy {
    tag: string;
    tagEntity: string;
    tagSecondLevelKey?: string;
}

export interface SloObjectiveCountMetricTotalInstanaInfrastructure {
    metricId: string;
    metricRetrievalMethod: string;
    pluginId: string;
    query?: string;
    snapshotId?: string;
}

export interface SloObjectiveCountMetricTotalLightstep {
    percentile?: number;
    streamId?: string;
    typeOfData: string;
    uql?: string;
}

export interface SloObjectiveCountMetricTotalNewrelic {
    nrql: string;
}

export interface SloObjectiveCountMetricTotalOpentsdb {
    query: string;
}

export interface SloObjectiveCountMetricTotalPingdom {
    checkId: string;
    checkType?: string;
    status?: string;
}

export interface SloObjectiveCountMetricTotalPrometheus {
    promql: string;
}

export interface SloObjectiveCountMetricTotalRedshift {
    clusterId: string;
    databaseName: string;
    query: string;
    region: string;
}

export interface SloObjectiveCountMetricTotalSplunk {
    query: string;
}

export interface SloObjectiveCountMetricTotalSplunkObservability {
    program: string;
}

export interface SloObjectiveCountMetricTotalSumologic {
    quantization?: string;
    query: string;
    rollup?: string;
    type: string;
}

export interface SloObjectiveCountMetricTotalThousandeye {
    testId: number;
}

export interface SloObjectiveRawMetric {
    queries?: outputs.SloObjectiveRawMetricQuery[];
}

export interface SloObjectiveRawMetricQuery {
    amazonPrometheuses?: outputs.SloObjectiveRawMetricQueryAmazonPrometheus[];
    appdynamics?: outputs.SloObjectiveRawMetricQueryAppdynamic[];
    bigqueries?: outputs.SloObjectiveRawMetricQueryBigquery[];
    cloudwatches?: outputs.SloObjectiveRawMetricQueryCloudwatch[];
    datadogs?: outputs.SloObjectiveRawMetricQueryDatadog[];
    dynatraces?: outputs.SloObjectiveRawMetricQueryDynatrace[];
    elasticsearches?: outputs.SloObjectiveRawMetricQueryElasticsearch[];
    gcms?: outputs.SloObjectiveRawMetricQueryGcm[];
    grafanaLokis?: outputs.SloObjectiveRawMetricQueryGrafanaLoki[];
    graphites?: outputs.SloObjectiveRawMetricQueryGraphite[];
    influxdbs?: outputs.SloObjectiveRawMetricQueryInfluxdb[];
    instanas?: outputs.SloObjectiveRawMetricQueryInstana[];
    lightsteps?: outputs.SloObjectiveRawMetricQueryLightstep[];
    newrelics?: outputs.SloObjectiveRawMetricQueryNewrelic[];
    opentsdbs?: outputs.SloObjectiveRawMetricQueryOpentsdb[];
    pingdoms?: outputs.SloObjectiveRawMetricQueryPingdom[];
    prometheuses?: outputs.SloObjectiveRawMetricQueryPrometheus[];
    redshifts?: outputs.SloObjectiveRawMetricQueryRedshift[];
    splunkObservabilities?: outputs.SloObjectiveRawMetricQuerySplunkObservability[];
    splunks?: outputs.SloObjectiveRawMetricQuerySplunk[];
    sumologics?: outputs.SloObjectiveRawMetricQuerySumologic[];
    thousandeyes?: outputs.SloObjectiveRawMetricQueryThousandeye[];
}

export interface SloObjectiveRawMetricQueryAmazonPrometheus {
    promql: string;
}

export interface SloObjectiveRawMetricQueryAppdynamic {
    applicationName: string;
    metricPath: string;
}

export interface SloObjectiveRawMetricQueryBigquery {
    location: string;
    projectId: string;
    query: string;
}

export interface SloObjectiveRawMetricQueryCloudwatch {
    dimensions?: outputs.SloObjectiveRawMetricQueryCloudwatchDimension[];
    json?: string;
    metricName?: string;
    namespace?: string;
    region: string;
    sql?: string;
    stat?: string;
}

export interface SloObjectiveRawMetricQueryCloudwatchDimension {
    /**
     * Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
     */
    name: string;
    value: string;
}

export interface SloObjectiveRawMetricQueryDatadog {
    query: string;
}

export interface SloObjectiveRawMetricQueryDynatrace {
    metricSelector: string;
}

export interface SloObjectiveRawMetricQueryElasticsearch {
    index: string;
    query: string;
}

export interface SloObjectiveRawMetricQueryGcm {
    projectId: string;
    query: string;
}

export interface SloObjectiveRawMetricQueryGrafanaLoki {
    logql: string;
}

export interface SloObjectiveRawMetricQueryGraphite {
    metricPath: string;
}

export interface SloObjectiveRawMetricQueryInfluxdb {
    query: string;
}

export interface SloObjectiveRawMetricQueryInstana {
    applications?: outputs.SloObjectiveRawMetricQueryInstanaApplication[];
    infrastructures?: outputs.SloObjectiveRawMetricQueryInstanaInfrastructure[];
    metricType: string;
}

export interface SloObjectiveRawMetricQueryInstanaApplication {
    aggregation: string;
    apiQuery: string;
    groupBies: outputs.SloObjectiveRawMetricQueryInstanaApplicationGroupBy[];
    includeInternal?: boolean;
    includeSynthetic?: boolean;
    metricId: string;
}

export interface SloObjectiveRawMetricQueryInstanaApplicationGroupBy {
    tag: string;
    tagEntity: string;
    tagSecondLevelKey?: string;
}

export interface SloObjectiveRawMetricQueryInstanaInfrastructure {
    metricId: string;
    metricRetrievalMethod: string;
    pluginId: string;
    query?: string;
    snapshotId?: string;
}

export interface SloObjectiveRawMetricQueryLightstep {
    percentile?: number;
    streamId?: string;
    typeOfData: string;
    uql?: string;
}

export interface SloObjectiveRawMetricQueryNewrelic {
    nrql: string;
}

export interface SloObjectiveRawMetricQueryOpentsdb {
    query: string;
}

export interface SloObjectiveRawMetricQueryPingdom {
    checkId: string;
    checkType?: string;
    status?: string;
}

export interface SloObjectiveRawMetricQueryPrometheus {
    promql: string;
}

export interface SloObjectiveRawMetricQueryRedshift {
    clusterId: string;
    databaseName: string;
    query: string;
    region: string;
}

export interface SloObjectiveRawMetricQuerySplunk {
    query: string;
}

export interface SloObjectiveRawMetricQuerySplunkObservability {
    program: string;
}

export interface SloObjectiveRawMetricQuerySumologic {
    quantization?: string;
    query: string;
    rollup?: string;
    type: string;
}

export interface SloObjectiveRawMetricQueryThousandeye {
    testId: number;
}

export interface SloTimeWindow {
    /**
     * Alert Policies attached to SLO
     */
    calendars?: outputs.SloTimeWindowCalendar[];
    /**
     * Count of the time unit
     */
    count: number;
    /**
     * Is the window moving or not
     */
    isRolling?: boolean;
    /**
     * Period between start time and added count
     */
    period: {[key: string]: string};
    /**
     * Unit of time
     */
    unit: string;
}

export interface SloTimeWindowCalendar {
    startTime: string;
    timeZone: string;
}

