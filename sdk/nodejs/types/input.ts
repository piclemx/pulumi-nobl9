// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AgentAmazonPrometheusConfig {
    /**
     * AWS region e.g., eu-central-1
     */
    region: pulumi.Input<string>;
    /**
     * Base URL to Amazon Prometheus server.
     */
    url: pulumi.Input<string>;
}

export interface AgentAppdynamicsConfig {
    /**
     * Base URL to the AppDynamics Controller.
     */
    url: pulumi.Input<string>;
}

export interface AgentBigqueryConfig {
}

export interface AgentCloudwatchConfig {
}

export interface AgentDatadogConfig {
    /**
     * `com` or `eu`, Datadog SaaS instance, which corresponds to one of Datadog's two locations (https://www.datadoghq.com/ in the U.S. or https://datadoghq.eu/ in the European Union)
     */
    site: pulumi.Input<string>;
}

export interface AgentDynatraceConfig {
    /**
     * Dynatrace API URL.
     */
    url: pulumi.Input<string>;
}

export interface AgentElasticsearchConfig {
    /**
     * API URL endpoint to the Elasticsearch's instance.
     */
    url: pulumi.Input<string>;
}

export interface AgentGcmConfig {
}

export interface AgentGrafanaLokiConfig {
    /**
     * API URL endpoint to the Grafana Loki instance.
     */
    url: pulumi.Input<string>;
}

export interface AgentGraphiteConfig {
    /**
     * API URL endpoint to the Graphite's instance.
     */
    url: pulumi.Input<string>;
}

export interface AgentInfluxdbConfig {
    /**
     * API URL endpoint to the InfluxDB's instance.
     */
    url: pulumi.Input<string>;
}

export interface AgentInstanaConfig {
    /**
     * API URL endpoint to the InfluxDB's instance.
     */
    url: pulumi.Input<string>;
}

export interface AgentLightstepConfig {
    /**
     * Organization name registered in Lightstep.
     */
    organization: pulumi.Input<string>;
    /**
     * Name of the Lightstep project.
     */
    project: pulumi.Input<string>;
}

export interface AgentNewrelicConfig {
    /**
     * ID number assigned to the New Relic user account.
     */
    accountId: pulumi.Input<string>;
}

export interface AgentOpentsdbConfig {
    /**
     * OpenTSDB cluster URL.
     */
    url: pulumi.Input<string>;
}

export interface AgentPingdomConfig {
}

export interface AgentPrometheusConfig {
    /**
     * Base URL to Prometheus server.
     */
    url: pulumi.Input<string>;
}

export interface AgentQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface AgentRedshiftConfig {
}

export interface AgentSplunkConfig {
    /**
     * Base API URL to the Splunk Search app.
     */
    url: pulumi.Input<string>;
}

export interface AgentSplunkObservabilityConfig {
    /**
     * SplunkObservability Realm.
     */
    realm: pulumi.Input<string>;
}

export interface AgentSumologicConfig {
    /**
     * Sumo Logic API URL.
     */
    url: pulumi.Input<string>;
}

export interface AgentThousandeyesConfig {
}

export interface AlertPolicyAlertMethod {
    /**
     * The name of the previously defined alert method.
     */
    name: pulumi.Input<string>;
    /**
     * Project name the Alert Method is in, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). If not defined, Nobl9 returns a default value for this field.
     */
    project?: pulumi.Input<string>;
}

export interface AlertPolicyCondition {
    /**
     * Indicates how long a given condition needs to be valid to mark the condition as true.
     */
    lastsFor?: pulumi.Input<string>;
    /**
     * One of `timeToBurnBudget` | `burnRate` | `burnedBudget`.
     */
    measurement: pulumi.Input<string>;
    /**
     * For `averageBurnRate`, it indicates how fast the error budget is burning. For `burnedBudget`, it tells how much error budget is already burned.
     */
    value?: pulumi.Input<number>;
    /**
     * Used with `timeToBurnBudget`, indicates when the budget would be exhausted. The expected value is a string in time duration string format.
     */
    valueString?: pulumi.Input<string>;
}

export interface DirectAppdynamicsQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectBigqueryQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectCloudwatchHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: pulumi.Input<pulumi.Input<inputs.DirectCloudwatchHistoricalDataRetrievalDefaultDuration>[]>;
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: pulumi.Input<pulumi.Input<inputs.DirectCloudwatchHistoricalDataRetrievalMaxDuration>[]>;
}

export interface DirectCloudwatchHistoricalDataRetrievalDefaultDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectCloudwatchHistoricalDataRetrievalMaxDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectCloudwatchQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectDatadogHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: pulumi.Input<pulumi.Input<inputs.DirectDatadogHistoricalDataRetrievalDefaultDuration>[]>;
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: pulumi.Input<pulumi.Input<inputs.DirectDatadogHistoricalDataRetrievalMaxDuration>[]>;
}

export interface DirectDatadogHistoricalDataRetrievalDefaultDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectDatadogHistoricalDataRetrievalMaxDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectDatadogQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectDynatraceHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: pulumi.Input<pulumi.Input<inputs.DirectDynatraceHistoricalDataRetrievalDefaultDuration>[]>;
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: pulumi.Input<pulumi.Input<inputs.DirectDynatraceHistoricalDataRetrievalMaxDuration>[]>;
}

export interface DirectDynatraceHistoricalDataRetrievalDefaultDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectDynatraceHistoricalDataRetrievalMaxDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectDynatraceQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectGcmQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectInfluxdbQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectInstanaQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectLightstepHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: pulumi.Input<pulumi.Input<inputs.DirectLightstepHistoricalDataRetrievalDefaultDuration>[]>;
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: pulumi.Input<pulumi.Input<inputs.DirectLightstepHistoricalDataRetrievalMaxDuration>[]>;
}

export interface DirectLightstepHistoricalDataRetrievalDefaultDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectLightstepHistoricalDataRetrievalMaxDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectLightstepQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectNewrelicHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: pulumi.Input<pulumi.Input<inputs.DirectNewrelicHistoricalDataRetrievalDefaultDuration>[]>;
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: pulumi.Input<pulumi.Input<inputs.DirectNewrelicHistoricalDataRetrievalMaxDuration>[]>;
}

export interface DirectNewrelicHistoricalDataRetrievalDefaultDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectNewrelicHistoricalDataRetrievalMaxDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectNewrelicQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectPingdomQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectRedshiftQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectSplunkHistoricalDataRetrieval {
    /**
     * Used by default for any SLOs connected to this data source.
     */
    defaultDurations: pulumi.Input<pulumi.Input<inputs.DirectSplunkHistoricalDataRetrievalDefaultDuration>[]>;
    /**
     * Defines the maximum period for which data can be retrieved.
     */
    maxDurations: pulumi.Input<pulumi.Input<inputs.DirectSplunkHistoricalDataRetrievalMaxDuration>[]>;
}

export interface DirectSplunkHistoricalDataRetrievalDefaultDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectSplunkHistoricalDataRetrievalMaxDuration {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DirectSplunkObservabilityQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectSplunkQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectSumologicQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface DirectThousandeyesQueryDelay {
    /**
     * Must be one of Minute or Second.
     */
    unit: pulumi.Input<string>;
    /**
     * Must be an integer greater than or equal to 0.
     */
    value: pulumi.Input<number>;
}

export interface ProjectLabel {
    /**
     * A key for the label, unique within the associated resource.
     */
    key: pulumi.Input<string>;
    /**
     * A list of unique values for a single key.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceLabel {
    /**
     * A key for the label, unique within the associated resource.
     */
    key: pulumi.Input<string>;
    /**
     * A list of unique values for a single key.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SloAttachment {
    /**
     * Name displayed for the attachment. Max. length: 63 characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * URL to the attachment
     */
    url: pulumi.Input<string>;
}

export interface SloComposite {
    /**
     * Condition when the Composite SLO’s error budget is burning.
     */
    burnRateConditions?: pulumi.Input<pulumi.Input<inputs.SloCompositeBurnRateCondition>[]>;
    /**
     * Designated value
     */
    target: pulumi.Input<number>;
}

export interface SloCompositeBurnRateCondition {
    op: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface SloIndicator {
    /**
     * Kind of the metric source. One of {Agent, Direct}.
     */
    kind?: pulumi.Input<string>;
    /**
     * Name of the metric source (agent).
     */
    name: pulumi.Input<string>;
    /**
     * Name of the metric source project.
     */
    project?: pulumi.Input<string>;
}

export interface SloLabel {
    /**
     * A key for the label, unique within the associated resource.
     */
    key: pulumi.Input<string>;
    /**
     * A list of unique values for a single key.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SloObjective {
    /**
     * Compares two time series, indicating the ratio of the count of good values to total values.
     */
    countMetrics?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetric>[]>;
    /**
     * Name to be displayed
     */
    displayName: pulumi.Input<string>;
    /**
     * Objective's name. This field is computed if not provided.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of logical operation
     */
    op?: pulumi.Input<string>;
    /**
     * Raw data is used to compare objective values.
     */
    rawMetrics?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetric>[]>;
    /**
     * Designated value
     */
    target: pulumi.Input<number>;
    /**
     * Designated value for slice
     */
    timeSliceTarget?: pulumi.Input<number>;
    /**
     * Value
     */
    value: pulumi.Input<number>;
}

export interface SloObjectiveCountMetric {
    goods?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGood>[]>;
    incremental: pulumi.Input<boolean>;
    totals?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotal>[]>;
}

export interface SloObjectiveCountMetricGood {
    amazonPrometheuses?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodAmazonPrometheus>[]>;
    appdynamics?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodAppdynamic>[]>;
    bigqueries?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodBigquery>[]>;
    cloudwatches?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodCloudwatch>[]>;
    datadogs?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodDatadog>[]>;
    dynatraces?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodDynatrace>[]>;
    elasticsearches?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodElasticsearch>[]>;
    gcms?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodGcm>[]>;
    grafanaLokis?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodGrafanaLoki>[]>;
    graphites?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodGraphite>[]>;
    influxdbs?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodInfluxdb>[]>;
    instanas?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodInstana>[]>;
    lightsteps?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodLightstep>[]>;
    newrelics?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodNewrelic>[]>;
    opentsdbs?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodOpentsdb>[]>;
    pingdoms?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodPingdom>[]>;
    prometheuses?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodPrometheus>[]>;
    redshifts?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodRedshift>[]>;
    splunkObservabilities?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodSplunkObservability>[]>;
    splunks?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodSplunk>[]>;
    sumologics?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodSumologic>[]>;
    thousandeyes?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodThousandeye>[]>;
}

export interface SloObjectiveCountMetricGoodAmazonPrometheus {
    promql: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodAppdynamic {
    applicationName: pulumi.Input<string>;
    metricPath: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodBigquery {
    location: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodCloudwatch {
    dimensions?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodCloudwatchDimension>[]>;
    json?: pulumi.Input<string>;
    metricName?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    sql?: pulumi.Input<string>;
    stat?: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodCloudwatchDimension {
    /**
     * Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
     */
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodDatadog {
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodDynatrace {
    metricSelector: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodElasticsearch {
    index: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodGcm {
    projectId: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodGrafanaLoki {
    logql: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodGraphite {
    metricPath: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodInfluxdb {
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodInstana {
    applications?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodInstanaApplication>[]>;
    infrastructures?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodInstanaInfrastructure>[]>;
    metricType: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodInstanaApplication {
    aggregation: pulumi.Input<string>;
    apiQuery: pulumi.Input<string>;
    groupBies: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricGoodInstanaApplicationGroupBy>[]>;
    includeInternal?: pulumi.Input<boolean>;
    includeSynthetic?: pulumi.Input<boolean>;
    metricId: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodInstanaApplicationGroupBy {
    tag: pulumi.Input<string>;
    tagEntity: pulumi.Input<string>;
    tagSecondLevelKey?: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodInstanaInfrastructure {
    metricId: pulumi.Input<string>;
    metricRetrievalMethod: pulumi.Input<string>;
    pluginId: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodLightstep {
    percentile?: pulumi.Input<number>;
    streamId?: pulumi.Input<string>;
    typeOfData: pulumi.Input<string>;
    uql?: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodNewrelic {
    nrql: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodOpentsdb {
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodPingdom {
    checkId: pulumi.Input<string>;
    checkType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodPrometheus {
    promql: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodRedshift {
    clusterId: pulumi.Input<string>;
    databaseName: pulumi.Input<string>;
    query: pulumi.Input<string>;
    region: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodSplunk {
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodSplunkObservability {
    program: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodSumologic {
    quantization?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    rollup?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricGoodThousandeye {
    testId: pulumi.Input<number>;
}

export interface SloObjectiveCountMetricTotal {
    amazonPrometheuses?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalAmazonPrometheus>[]>;
    appdynamics?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalAppdynamic>[]>;
    bigqueries?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalBigquery>[]>;
    cloudwatches?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalCloudwatch>[]>;
    datadogs?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalDatadog>[]>;
    dynatraces?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalDynatrace>[]>;
    elasticsearches?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalElasticsearch>[]>;
    gcms?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalGcm>[]>;
    grafanaLokis?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalGrafanaLoki>[]>;
    graphites?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalGraphite>[]>;
    influxdbs?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalInfluxdb>[]>;
    instanas?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalInstana>[]>;
    lightsteps?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalLightstep>[]>;
    newrelics?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalNewrelic>[]>;
    opentsdbs?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalOpentsdb>[]>;
    pingdoms?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalPingdom>[]>;
    prometheuses?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalPrometheus>[]>;
    redshifts?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalRedshift>[]>;
    splunkObservabilities?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalSplunkObservability>[]>;
    splunks?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalSplunk>[]>;
    sumologics?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalSumologic>[]>;
    thousandeyes?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalThousandeye>[]>;
}

export interface SloObjectiveCountMetricTotalAmazonPrometheus {
    promql: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalAppdynamic {
    applicationName: pulumi.Input<string>;
    metricPath: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalBigquery {
    location: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalCloudwatch {
    dimensions?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalCloudwatchDimension>[]>;
    json?: pulumi.Input<string>;
    metricName?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    sql?: pulumi.Input<string>;
    stat?: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalCloudwatchDimension {
    /**
     * Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
     */
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalDatadog {
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalDynatrace {
    metricSelector: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalElasticsearch {
    index: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalGcm {
    projectId: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalGrafanaLoki {
    logql: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalGraphite {
    metricPath: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalInfluxdb {
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalInstana {
    applications?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalInstanaApplication>[]>;
    infrastructures?: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalInstanaInfrastructure>[]>;
    metricType: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalInstanaApplication {
    aggregation: pulumi.Input<string>;
    apiQuery: pulumi.Input<string>;
    groupBies: pulumi.Input<pulumi.Input<inputs.SloObjectiveCountMetricTotalInstanaApplicationGroupBy>[]>;
    includeInternal?: pulumi.Input<boolean>;
    includeSynthetic?: pulumi.Input<boolean>;
    metricId: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalInstanaApplicationGroupBy {
    tag: pulumi.Input<string>;
    tagEntity: pulumi.Input<string>;
    tagSecondLevelKey?: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalInstanaInfrastructure {
    metricId: pulumi.Input<string>;
    metricRetrievalMethod: pulumi.Input<string>;
    pluginId: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalLightstep {
    percentile?: pulumi.Input<number>;
    streamId?: pulumi.Input<string>;
    typeOfData: pulumi.Input<string>;
    uql?: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalNewrelic {
    nrql: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalOpentsdb {
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalPingdom {
    checkId: pulumi.Input<string>;
    checkType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalPrometheus {
    promql: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalRedshift {
    clusterId: pulumi.Input<string>;
    databaseName: pulumi.Input<string>;
    query: pulumi.Input<string>;
    region: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalSplunk {
    query: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalSplunkObservability {
    program: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalSumologic {
    quantization?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    rollup?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SloObjectiveCountMetricTotalThousandeye {
    testId: pulumi.Input<number>;
}

export interface SloObjectiveRawMetric {
    queries?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQuery>[]>;
}

export interface SloObjectiveRawMetricQuery {
    amazonPrometheuses?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryAmazonPrometheus>[]>;
    appdynamics?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryAppdynamic>[]>;
    bigqueries?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryBigquery>[]>;
    cloudwatches?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryCloudwatch>[]>;
    datadogs?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryDatadog>[]>;
    dynatraces?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryDynatrace>[]>;
    elasticsearches?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryElasticsearch>[]>;
    gcms?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryGcm>[]>;
    grafanaLokis?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryGrafanaLoki>[]>;
    graphites?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryGraphite>[]>;
    influxdbs?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryInfluxdb>[]>;
    instanas?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryInstana>[]>;
    lightsteps?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryLightstep>[]>;
    newrelics?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryNewrelic>[]>;
    opentsdbs?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryOpentsdb>[]>;
    pingdoms?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryPingdom>[]>;
    prometheuses?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryPrometheus>[]>;
    redshifts?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryRedshift>[]>;
    splunkObservabilities?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQuerySplunkObservability>[]>;
    splunks?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQuerySplunk>[]>;
    sumologics?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQuerySumologic>[]>;
    thousandeyes?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryThousandeye>[]>;
}

export interface SloObjectiveRawMetricQueryAmazonPrometheus {
    promql: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryAppdynamic {
    applicationName: pulumi.Input<string>;
    metricPath: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryBigquery {
    location: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryCloudwatch {
    dimensions?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryCloudwatchDimension>[]>;
    json?: pulumi.Input<string>;
    metricName?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    sql?: pulumi.Input<string>;
    stat?: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryCloudwatchDimension {
    /**
     * Unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
     */
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryDatadog {
    query: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryDynatrace {
    metricSelector: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryElasticsearch {
    index: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryGcm {
    projectId: pulumi.Input<string>;
    query: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryGrafanaLoki {
    logql: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryGraphite {
    metricPath: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryInfluxdb {
    query: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryInstana {
    applications?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryInstanaApplication>[]>;
    infrastructures?: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryInstanaInfrastructure>[]>;
    metricType: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryInstanaApplication {
    aggregation: pulumi.Input<string>;
    apiQuery: pulumi.Input<string>;
    groupBies: pulumi.Input<pulumi.Input<inputs.SloObjectiveRawMetricQueryInstanaApplicationGroupBy>[]>;
    includeInternal?: pulumi.Input<boolean>;
    includeSynthetic?: pulumi.Input<boolean>;
    metricId: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryInstanaApplicationGroupBy {
    tag: pulumi.Input<string>;
    tagEntity: pulumi.Input<string>;
    tagSecondLevelKey?: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryInstanaInfrastructure {
    metricId: pulumi.Input<string>;
    metricRetrievalMethod: pulumi.Input<string>;
    pluginId: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryLightstep {
    percentile?: pulumi.Input<number>;
    streamId?: pulumi.Input<string>;
    typeOfData: pulumi.Input<string>;
    uql?: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryNewrelic {
    nrql: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryOpentsdb {
    query: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryPingdom {
    checkId: pulumi.Input<string>;
    checkType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryPrometheus {
    promql: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryRedshift {
    clusterId: pulumi.Input<string>;
    databaseName: pulumi.Input<string>;
    query: pulumi.Input<string>;
    region: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQuerySplunk {
    query: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQuerySplunkObservability {
    program: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQuerySumologic {
    quantization?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    rollup?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SloObjectiveRawMetricQueryThousandeye {
    testId: pulumi.Input<number>;
}

export interface SloTimeWindow {
    /**
     * Alert Policies attached to SLO
     */
    calendars?: pulumi.Input<pulumi.Input<inputs.SloTimeWindowCalendar>[]>;
    /**
     * Count of the time unit
     */
    count: pulumi.Input<number>;
    /**
     * Is the window moving or not
     */
    isRolling?: pulumi.Input<boolean>;
    /**
     * Period between start time and added count
     */
    period?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Unit of time
     */
    unit: pulumi.Input<string>;
}

export interface SloTimeWindowCalendar {
    startTime: pulumi.Input<string>;
    timeZone: pulumi.Input<string>;
}

