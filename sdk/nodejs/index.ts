// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./agent";
export * from "./alertMethodDiscord";
export * from "./alertMethodEmail";
export * from "./alertMethodJira";
export * from "./alertMethodMsteams";
export * from "./alertMethodOpsgenie";
export * from "./alertMethodPagerduty";
export * from "./alertMethodServicenow";
export * from "./alertMethodSlack";
export * from "./alertMethodWebhook";
export * from "./alertPolicy";
export * from "./directAppdynamics";
export * from "./directBigquery";
export * from "./directCloudwatch";
export * from "./directDatadog";
export * from "./directDynatrace";
export * from "./directGcm";
export * from "./directInfluxdb";
export * from "./directInstana";
export * from "./directLightstep";
export * from "./directNewrelic";
export * from "./directPingdom";
export * from "./directRedshift";
export * from "./directSplunk";
export * from "./directSplunkObservability";
export * from "./directSumologic";
export * from "./directThousandeyes";
export * from "./project";
export * from "./provider";
export * from "./roleBinding";
export * from "./service";
export * from "./slo";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { Agent } from "./agent";
import { AlertMethodDiscord } from "./alertMethodDiscord";
import { AlertMethodEmail } from "./alertMethodEmail";
import { AlertMethodJira } from "./alertMethodJira";
import { AlertMethodMsteams } from "./alertMethodMsteams";
import { AlertMethodOpsgenie } from "./alertMethodOpsgenie";
import { AlertMethodPagerduty } from "./alertMethodPagerduty";
import { AlertMethodServicenow } from "./alertMethodServicenow";
import { AlertMethodSlack } from "./alertMethodSlack";
import { AlertMethodWebhook } from "./alertMethodWebhook";
import { AlertPolicy } from "./alertPolicy";
import { DirectAppdynamics } from "./directAppdynamics";
import { DirectBigquery } from "./directBigquery";
import { DirectCloudwatch } from "./directCloudwatch";
import { DirectDatadog } from "./directDatadog";
import { DirectDynatrace } from "./directDynatrace";
import { DirectGcm } from "./directGcm";
import { DirectInfluxdb } from "./directInfluxdb";
import { DirectInstana } from "./directInstana";
import { DirectLightstep } from "./directLightstep";
import { DirectNewrelic } from "./directNewrelic";
import { DirectPingdom } from "./directPingdom";
import { DirectRedshift } from "./directRedshift";
import { DirectSplunk } from "./directSplunk";
import { DirectSplunkObservability } from "./directSplunkObservability";
import { DirectSumologic } from "./directSumologic";
import { DirectThousandeyes } from "./directThousandeyes";
import { Project } from "./project";
import { RoleBinding } from "./roleBinding";
import { Service } from "./service";
import { Slo } from "./slo";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "nobl9:index/agent:Agent":
                return new Agent(name, <any>undefined, { urn })
            case "nobl9:index/alertMethodDiscord:AlertMethodDiscord":
                return new AlertMethodDiscord(name, <any>undefined, { urn })
            case "nobl9:index/alertMethodEmail:AlertMethodEmail":
                return new AlertMethodEmail(name, <any>undefined, { urn })
            case "nobl9:index/alertMethodJira:AlertMethodJira":
                return new AlertMethodJira(name, <any>undefined, { urn })
            case "nobl9:index/alertMethodMsteams:AlertMethodMsteams":
                return new AlertMethodMsteams(name, <any>undefined, { urn })
            case "nobl9:index/alertMethodOpsgenie:AlertMethodOpsgenie":
                return new AlertMethodOpsgenie(name, <any>undefined, { urn })
            case "nobl9:index/alertMethodPagerduty:AlertMethodPagerduty":
                return new AlertMethodPagerduty(name, <any>undefined, { urn })
            case "nobl9:index/alertMethodServicenow:AlertMethodServicenow":
                return new AlertMethodServicenow(name, <any>undefined, { urn })
            case "nobl9:index/alertMethodSlack:AlertMethodSlack":
                return new AlertMethodSlack(name, <any>undefined, { urn })
            case "nobl9:index/alertMethodWebhook:AlertMethodWebhook":
                return new AlertMethodWebhook(name, <any>undefined, { urn })
            case "nobl9:index/alertPolicy:AlertPolicy":
                return new AlertPolicy(name, <any>undefined, { urn })
            case "nobl9:index/directAppdynamics:DirectAppdynamics":
                return new DirectAppdynamics(name, <any>undefined, { urn })
            case "nobl9:index/directBigquery:DirectBigquery":
                return new DirectBigquery(name, <any>undefined, { urn })
            case "nobl9:index/directCloudwatch:DirectCloudwatch":
                return new DirectCloudwatch(name, <any>undefined, { urn })
            case "nobl9:index/directDatadog:DirectDatadog":
                return new DirectDatadog(name, <any>undefined, { urn })
            case "nobl9:index/directDynatrace:DirectDynatrace":
                return new DirectDynatrace(name, <any>undefined, { urn })
            case "nobl9:index/directGcm:DirectGcm":
                return new DirectGcm(name, <any>undefined, { urn })
            case "nobl9:index/directInfluxdb:DirectInfluxdb":
                return new DirectInfluxdb(name, <any>undefined, { urn })
            case "nobl9:index/directInstana:DirectInstana":
                return new DirectInstana(name, <any>undefined, { urn })
            case "nobl9:index/directLightstep:DirectLightstep":
                return new DirectLightstep(name, <any>undefined, { urn })
            case "nobl9:index/directNewrelic:DirectNewrelic":
                return new DirectNewrelic(name, <any>undefined, { urn })
            case "nobl9:index/directPingdom:DirectPingdom":
                return new DirectPingdom(name, <any>undefined, { urn })
            case "nobl9:index/directRedshift:DirectRedshift":
                return new DirectRedshift(name, <any>undefined, { urn })
            case "nobl9:index/directSplunk:DirectSplunk":
                return new DirectSplunk(name, <any>undefined, { urn })
            case "nobl9:index/directSplunkObservability:DirectSplunkObservability":
                return new DirectSplunkObservability(name, <any>undefined, { urn })
            case "nobl9:index/directSumologic:DirectSumologic":
                return new DirectSumologic(name, <any>undefined, { urn })
            case "nobl9:index/directThousandeyes:DirectThousandeyes":
                return new DirectThousandeyes(name, <any>undefined, { urn })
            case "nobl9:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "nobl9:index/roleBinding:RoleBinding":
                return new RoleBinding(name, <any>undefined, { urn })
            case "nobl9:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "nobl9:index/slo:Slo":
                return new Slo(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nobl9", "index/agent", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/alertMethodDiscord", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/alertMethodEmail", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/alertMethodJira", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/alertMethodMsteams", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/alertMethodOpsgenie", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/alertMethodPagerduty", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/alertMethodServicenow", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/alertMethodSlack", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/alertMethodWebhook", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/alertPolicy", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directAppdynamics", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directBigquery", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directCloudwatch", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directDatadog", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directDynatrace", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directGcm", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directInfluxdb", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directInstana", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directLightstep", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directNewrelic", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directPingdom", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directRedshift", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directSplunk", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directSplunkObservability", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directSumologic", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/directThousandeyes", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/project", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/roleBinding", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/service", _module)
pulumi.runtime.registerResourceModule("nobl9", "index/slo", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("nobl9", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:nobl9") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
