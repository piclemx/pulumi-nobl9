// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * Here's an example of RBAC resource configuration:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nobl9 from "@pulumi/nobl9";
 *
 * const thisRoleBinding = new nobl9.RoleBinding("this", {
 *     projectRef: "1234567890asdfghjkl",
 *     roleRef: "project-owner",
 *     user: "1234567890asdfghjkl",
 * });
 * ```
 * ## Useful Links
 *
 * [Role Based Access Control in Nobl9 | Nobl9 Documentation](https://docs.nobl9.com/Getting_Started/RBAC/)
 *
 * [Role Binding YAML Configuration | Nobl9 Documentation](https://docs.nobl9.com/Getting_Started/RBAC/role-binding-yaml)
 */
export class RoleBinding extends pulumi.CustomResource {
    /**
     * Get an existing RoleBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleBindingState, opts?: pulumi.CustomResourceOptions): RoleBinding {
        return new RoleBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nobl9:index/roleBinding:RoleBinding';

    /**
     * Returns true if the given object is an instance of RoleBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoleBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleBinding.__pulumiType;
    }

    /**
     * User-friendly display name of the resource.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Automatically generated, unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project name, the project in which we want the user to assume the specified role. When `projectRef` is empty, `roleRef` must contain an Organization Role.
     */
    public readonly projectRef!: pulumi.Output<string | undefined>;
    /**
     * Role name; the role that you want the user to assume.
     */
    public readonly roleRef!: pulumi.Output<string>;
    /**
     * Okta User ID that can be retrieved from the Nobl9 UI (**Settings** > **Users**).
     */
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a RoleBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleBindingArgs | RoleBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleBindingState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectRef"] = state ? state.projectRef : undefined;
            resourceInputs["roleRef"] = state ? state.roleRef : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as RoleBindingArgs | undefined;
            if ((!args || args.roleRef === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleRef'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectRef"] = args ? args.projectRef : undefined;
            resourceInputs["roleRef"] = args ? args.roleRef : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleBinding.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoleBinding resources.
 */
export interface RoleBindingState {
    /**
     * User-friendly display name of the resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Automatically generated, unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
     */
    name?: pulumi.Input<string>;
    /**
     * Project name, the project in which we want the user to assume the specified role. When `projectRef` is empty, `roleRef` must contain an Organization Role.
     */
    projectRef?: pulumi.Input<string>;
    /**
     * Role name; the role that you want the user to assume.
     */
    roleRef?: pulumi.Input<string>;
    /**
     * Okta User ID that can be retrieved from the Nobl9 UI (**Settings** > **Users**).
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoleBinding resource.
 */
export interface RoleBindingArgs {
    /**
     * User-friendly display name of the resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Automatically generated, unique name of the resource, must conform to the naming convention from [DNS RFC1123](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
     */
    name?: pulumi.Input<string>;
    /**
     * Project name, the project in which we want the user to assume the specified role. When `projectRef` is empty, `roleRef` must contain an Organization Role.
     */
    projectRef?: pulumi.Input<string>;
    /**
     * Role name; the role that you want the user to assume.
     */
    roleRef: pulumi.Input<string>;
    /**
     * Okta User ID that can be retrieved from the Nobl9 UI (**Settings** > **Users**).
     */
    user: pulumi.Input<string>;
}
